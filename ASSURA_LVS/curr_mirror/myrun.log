
            Assura (R) Physical Verification Version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17
            Release 4.1_USR4_HF23

Copyright (c) Cadence Design Systems. All rights reserved.
@(#)$CDS: assura_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:21 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113

run on localhost.localdomain from /pkg/Cadence/installs/ASSURA41/tools.lnx86/assura/bin/64bit/assura on Sat Dec 12 22:17:45 2015

Loading all available HV p-cell functions
No mx check

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/aveng /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf -exec1 -LVS -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib
@(#)$CDS: aveng_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:22 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113

run on localhost.localdomain from /pkg/Cadence/installs/ASSURA41/tools.lnx86/assura/bin/64bit/aveng on Sat Dec 12 22:17:45 2015

Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets
 Summary Report: myrun.sum
 RSF           : /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf
 Library Name  : TUTORIAL
 CDSLIB Path   : "/home/saul/projects/LAYOUT_TUT/cds.lib"
 Cell Name     : curr_mirror
 View Name     : layout
 Rules File    : /pkg/AMS411/assura/h18a6/h18a6am/extract.rul
 Options       : -exec1 -LVS -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib 
 Work Directory: /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror
 Operating Mode: Legacy Mode is Off


Starting dfIIToVdb...
Virtuoso Framework License (111) was checked out successfully. Total checkout time was 0.22s.
@(#)$CDS: dfIIToVdb_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:25 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113

run on localhost.localdomain from /pkg/Cadence/installs/ASSURA41/tools.lnx86/assura/bin/64bit/dfIIToVdb on Sat Dec 12 22:17:46 2015

Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets
*WARNING* LIB TECH_H18A6 from File /home/saul/projects/LAYOUT_TUT/cds.lib Line 57 redefines
LIB TECH_H18A6 from the same file (defined earlier.)
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A7AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A7AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A5AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A5AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A4AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A4AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A3AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A3AM'.
*WARNING* LIB TECH_H18A6 from File /home/saul/projects/LAYOUT_TUT/cds.lib Line 57 redefines
LIB TECH_H18A6 from the same file (defined earlier.)
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A7AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A7AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A5AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A5AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A4AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A4AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A3AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A3AM'.
*WARNING* (icLic-3) Could not get license Virtuoso_Layout_Suite_L
*WARNING* (icLic-3) Could not get license Virtuoso_Layout_Suite_XL
 
Loading IBM PDK cmhv7sf procedures for Cadence Version "av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17"...
...IBM PDK cmhv7sf procedures loaded.
 
*INFO* (icLic-25) License Virtuoso_Layout_Suite_GXL ("Layout GXL") was used to run Layout L.
Checking out VLS-GXL license for the Express Pcell feature because a VLS-L or VLS-XL license is not available.
VLS-GXL license has been checked out for the Express Pcell feature.
VLS-L license has been locked for Express Pcell feature. This will remain checked out until the current session ends.
Compiling rules...

WARNING LVS Run detected.
Non-legacy mode has been disabled for this LVS run
WARNING (AVRC-10379): Switch "COMPARE_NF_VALUES" not found in rule file.
WARNING (AVRC-10379): Switch "COMPARE_DIODE_SIZE" not found in rule file.
        Switches in rule file:
            "no_sti_stress_extraction" "NO_SUBC_IN_GRLOGIC"
            "resimulate_extracted"
        Switches in rsf-file or in techRuleSet:
            "COMPARE_NF_VALUES" "COMPARE_DIODE_SIZE"
        Check switch list in '?set' parameter in rsf-file or
        in switches file defined by techRuleSet parameter.

Checking out license for Assura_LVS
*WARNING* Failed to obtain license for Assura_LVS
No Assura license available.
Checking out license for Phys_Ver_Sys_LVS_XL

Reading the design data...



Finished dfIIToVdb.

Building the VDB part 2 in background mode.

Building tables for LVS Preprocessing in background mode.


Starting /pkg/Cadence/installs/ASSURA41/tools/assura/bin/vdbToCells /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror myrun

Finished /pkg/Cadence/installs/ASSURA41/tools/assura/bin/vdbToCells

Starting Nvn PreExtraction...

Starting /pkg/Cadence/installs/ASSURA41/tools/assura/bin/nvn /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf -preExtract -exec1 -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib
Checking out license for Assura_LVS
Checking out license for Phys_Ver_Sys_LVS_XL
@(#)$CDS: nvn_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:27 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113
run on localhost.localdomain at Sat Dec 12 22:17:49 2015
Loading all available HV p-cell functions
No mx check
Reading schematic network
 running dfIIToVldb -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.vlr /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf
Virtuoso Framework License (111) was checked out successfully. Total checkout time was 0.22s.
@(#)$CDS: dfIIToVldb_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:25 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113

run on localhost.localdomain from /pkg/Cadence/installs/ASSURA41/tools.lnx86/assura/bin/64bit/dfIIToVldb on Sat Dec 12 22:17:49 2015

Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets
function calcTermOrder redefined
function getParams redefined
function setModelName redefined
Top Cell Library: "TUTORIAL"
Top Cell Name: "curr_mirror"
Top Cell View: "schematic"
Output Data Base Name: "/home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.sdb"
Simulator Name: "auCdl"
Failed to obtain license for "Assura_LVS". 
Checking out license for Phys_Ver_Sys_LVS_XL
ERROR (LMF-02018): License call failed for feature Assura_LVS, version 4.100 and quantity 1. The license server search path is defined as @license.it.kth.se. The FLEXnet error message is as follows,
    FLEXnet ERROR(-18, 0, 0): License server system does not support this feature.

Run 'lic_error LMF-02018' for more information.
*WARNING* LIB TECH_H18A6 from File /home/saul/projects/LAYOUT_TUT/cds.lib Line 57 redefines
LIB TECH_H18A6 from the same file (defined earlier.)
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A7AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A7AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A5AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A5AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A4AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A4AM'.
View List: "auCdl schematic cmos_sch symbol"
Stop List: "auCdl"
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A3AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A3AM'.
*WARNING* LIB TECH_H18A6 from File /home/saul/projects/LAYOUT_TUT/cds.lib Line 57 redefines
LIB TECH_H18A6 from the same file (defined earlier.)
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A7AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A7AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A5AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A5AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A4AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A4AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A3AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A3AM'.
Net Listing Mode is Analog
 
Loading IBM PDK cmhv7sf procedures for Cadence Version "av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17"...
...IBM PDK cmhv7sf procedures loaded.
 
writing /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.sdb
 inputting /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.sdb
Reading layout network
 inputting network ASSURA_LVS/curr_mirror/myrun.ldb
Preprocessing schematic network phase 1
Preprocessing layout network phase 1
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'opndires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'opndres3(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'opndires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'opndires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'opndiresx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'opndires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'oppdires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'oppdres3(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'oppdires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'oppdires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'oppdiresx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'oppdires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'sblkndires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'sblkndres3(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'sblkndires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'sblkndires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'sblkndiresx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'sblkndires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'sblkpdires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'sblkpdres3(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'sblkpdires' is not found and
 will be considered a dummy cell. The default binding for layout cell 'sblkpdires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'sblkpdiresx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'sblkpdires(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfeti' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfeti(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfeti' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfeti4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetix' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfeti(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetix' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfeti4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetim' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetim(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetim' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetim4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetimx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetim(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetimx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetim4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfeti_rf' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfeti_rf(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfeti_rf' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfeti4_rf(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetihvt' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetihvt(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetihvt' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetihvt4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetihvtx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetihvt(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'nfetihvtx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'nfetihvt4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfeti' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfeti4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfeti' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfeti(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetix' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfeti4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetix' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfeti(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetim' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetim4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetim' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetim(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetimx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetim4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetimx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetim(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfeti_rf' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfeti4_rf(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfeti_rf' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfeti_rf(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetihvt' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetihvt4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetihvt' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetihvt(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetihvtx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetihvt4(Generic)' will be broken.
 WARNING (AVLVSNN-10034) : bindingFile/bind rule - schematic cell 'pfetihvtx' is not found and
 will be considered a dummy cell. The default binding for layout cell 'pfetihvt(Generic)' will be broken.
Preprocessing schematic network phase 2
Preprocessing layout network phase 2
cpu=0.00m  wall=0.03m  mem=55.09mb

Finished /pkg/Cadence/installs/ASSURA41/tools/assura/bin/nvn
*WARNING* '?expandCellToParent' list: No cell name match for mosvar*
*WARNING* '?expandCellToParent' list: No cell name match for sbd*
*WARNING* '?expandCellToParent' list: No cell name match for pcdcap*
*WARNING* '?expandCellToParent' list: No cell name match for pcap*
*WARNING* '?expandCellToParent' list: No cell name match for corrPoint
*WARNING* '?expandCellToParent' list: No cell name match for vpnp*
*WARNING* '?expandCellToParent' list: No cell name match for vnpn*
*WARNING* '?expandCellToParent' list: No cell name match for hvpwres*
*WARNING* '?expandCellToParent' list: No cell name match for hvnwres*
*WARNING* '?expandCellToParent' list: No cell name match for vncap_hv*
*WARNING* '?expandCellToParent' list: No cell name match for vncap*
*WARNING* '?expandCellToParent' list: No cell name match for esdndsx*
*WARNING* '?expandCellToParent' list: No cell name match for esdvpnpnw*
*WARNING* '?expandCellToParent' list: No cell name match for esdnfet*
*WARNING* '?expandCellToParent' list: No cell name match for k1res*
*WARNING* '?expandCellToParent' list: No cell name match for bondpad*
*WARNING* '?expandCellToParent' list: No cell name match for cmim*
*WARNING* '?expandCellToParent' list: No cell name match for dualcmim*
*WARNING* '?expandCellToParent' list: No cell name match for opp*
*WARNING* '?expandCellToParent' list: No cell name match for opn*
*WARNING* '?expandCellToParent' list: No cell name match for oppp*
*WARNING* '?expandCellToParent' list: No cell name match for oprr*
*WARNING* '?expandCellToParent' list: No cell name match for nwpc*
*WARNING* '?expandCellToParent' list: No cell name match for divpnp
*WARNING* '?expandCellToParent' list: No cell name match for dipdnw
*WARNING* '?expandCellToParent' list: No cell name match for subc*
*WARNING* '?expandCellToParent' list: No cell name match for pfet*
*WARNING* '?expandCellToParent' list: No cell name match for efuse*
*WARNING* '?expandCellToParent' list: No cell name match for esdndpi*
*WARNING* '?expandCellToParent' list: No cell name match for esdpnpi*
*WARNING* '?expandCellToParent' list: No cell name match for esdpdidn*
*WARNING* '?expandCellToParent' list: No cell name match for esdndidn*
*WARNING* '?expandCellToParent' list: No cell name match for esdtdi2*
*WARNING* '?expandCellToParent' list: No cell name match for esdfdi*
*WARNING* '?expandCellToParent' list: No cell name match for wdpwdn
*WARNING* '?expandCellToParent' list: No cell name match for wddnsx
*WARNING* '?expandCellToParent' list: No cell name match for wdnwsx
*WARNING* '?expandCellToParent' list: No cell name match for tdpdnw
*WARNING* '?expandCellToParent' list: No cell name match for tdndsx
*WARNING* '?expandCellToParent' list: No cell name match for diode*
*WARNING* '?expandCellToParent' list: No cell name match for devicepad*
*WARNING* '?expandCellToParent' list: No cell name match for pjfet*
*WARNING* '?expandCellToParent' list: No cell name match for symind*
*WARNING* '?expandCellToParent' list: No cell name match for ind*
*WARNING* '?expandCellToParent' list: No cell name match for coupledwire*
*WARNING* '?expandCellToParent' list: No cell name match for singlewire*
*WARNING* '?expandCellToParent' list: No cell name match for dindpw
*WARNING* '?expandCellToParent' list: No cell name match for mosvar*
*WARNING* '?expandCellToParent' list: No cell name match for sbd*
*WARNING* '?expandCellToParent' list: No cell name match for pcdcap*
*WARNING* '?expandCellToParent' list: No cell name match for pcap*
*WARNING* '?expandCellToParent' list: No cell name match for corrPoint
*WARNING* '?expandCellToParent' list: No cell name match for vpnp*
*WARNING* '?expandCellToParent' list: No cell name match for vnpn*
*WARNING* '?expandCellToParent' list: No cell name match for hvpwres*
*WARNING* '?expandCellToParent' list: No cell name match for hvnwres*
*WARNING* '?expandCellToParent' list: No cell name match for vncap_hv*
*WARNING* '?expandCellToParent' list: No cell name match for vncap*
*WARNING* '?expandCellToParent' list: No cell name match for esdndsx*
*WARNING* '?expandCellToParent' list: No cell name match for esdvpnpnw*
*WARNING* '?expandCellToParent' list: No cell name match for esdnfet*
*WARNING* '?expandCellToParent' list: No cell name match for k1res*
*WARNING* '?expandCellToParent' list: No cell name match for bondpad*
*WARNING* '?expandCellToParent' list: No cell name match for cmim*
*WARNING* '?expandCellToParent' list: No cell name match for dualcmim*
*WARNING* '?expandCellToParent' list: No cell name match for opp*
*WARNING* '?expandCellToParent' list: No cell name match for opn*
*WARNING* '?expandCellToParent' list: No cell name match for oppp*
*WARNING* '?expandCellToParent' list: No cell name match for oprr*
*WARNING* '?expandCellToParent' list: No cell name match for nwpc*
*WARNING* '?expandCellToParent' list: No cell name match for divpnp
*WARNING* '?expandCellToParent' list: No cell name match for dipdnw
*WARNING* '?expandCellToParent' list: No cell name match for subc*
*WARNING* '?expandCellToParent' list: No cell name match for pfet*
*WARNING* '?expandCellToParent' list: No cell name match for efuse*
*WARNING* '?expandCellToParent' list: No cell name match for esdndpi*
*WARNING* '?expandCellToParent' list: No cell name match for esdpnpi*
*WARNING* '?expandCellToParent' list: No cell name match for esdpdidn*
*WARNING* '?expandCellToParent' list: No cell name match for esdndidn*
*WARNING* '?expandCellToParent' list: No cell name match for esdtdi2*
*WARNING* '?expandCellToParent' list: No cell name match for esdfdi*
*WARNING* '?expandCellToParent' list: No cell name match for wdpwdn
*WARNING* '?expandCellToParent' list: No cell name match for wddnsx
*WARNING* '?expandCellToParent' list: No cell name match for wdnwsx
*WARNING* '?expandCellToParent' list: No cell name match for tdpdnw
*WARNING* '?expandCellToParent' list: No cell name match for tdndsx
*WARNING* '?expandCellToParent' list: No cell name match for diode*
*WARNING* '?expandCellToParent' list: No cell name match for devicepad*
*WARNING* '?expandCellToParent' list: No cell name match for pjfet*
*WARNING* '?expandCellToParent' list: No cell name match for symind*
*WARNING* '?expandCellToParent' list: No cell name match for ind*
*WARNING* '?expandCellToParent' list: No cell name match for coupledwire*
*WARNING* '?expandCellToParent' list: No cell name match for singlewire*
*WARNING* '?expandCellToParent' list: No cell name match for dindpw

Building the VDB part 3 in background mode.

Finished building the VDB. VDB build times for main process:
cpu: 0.33  elap: 5  pf: 0  in: 0  out: 0  virt: 128M  phys: 619M

Running the Task Processor, 1 cells, 19232 steps...

Top Cell is 'curr_mirror layout TUTORIAL'

Executing: psp_model = geomEmpty()

Executing: bkgnd = geomBkgnd()

Executing: ns = geomOr(NS_drawing)

Executing: nw = geomOr(NW_drawing)

Executing: ca = geomOr(CA_drawing_net CABAR_drawing_net CA_bb)

Executing: ca_input = geomOr(ca)

Executing: v1 = geomOr(V1_drawing_net V1BAR_drawing V1_bb)

Executing: m1_bb = geomAndNot(m1_bb m1_RES_bb)

Executing: m1 = geomOr(m1 m1_bb M1_pin)

Executing: v1_input = geomOr(v1)

Executing: FT_bb = geomAndNot(FT_bb qt_bb)

Executing: ft = geomOr(FT_drawing_net FT_bb)

Executing: ft_input = geomOr(ft)

Executing: mt_bb = geomAndNot(mt_bb mt_RES_bb)

Executing: mt = geomOr(mt mt_bb MT_pin)

Executing: m2_bb = geomAndNot(m2_bb m2_RES_bb)

Executing: m2 = geomOr(m2 m2_bb M2_pin)

Executing: v2 = geomOr(V2_drawing_net V2BAR_drawing V2_bb)

Executing: v2_input = geomOr(v2)

Executing: m3_bb = geomAndNot(m3_bb m3_RES_bb)

Executing: m3 = geomOr(m3 m3_bb M3_pin)

Executing: v3 = geomOr(V3_drawing_net V3BAR_drawing V3_bb)

Executing: v3_input = geomOr(v3)

Executing: m4_bb = geomAndNot(m4_bb m4_RES_bb)

Executing: m4 = geomOr(m4 m4_bb M4_pin)

Executing: v4 = geomOr(V4_drawing_net V4BAR_drawing V4_bb)

Executing: v4_input = geomOr(v4)

Executing: bondPadFilter = geomSize(PAD_DEV -0.1)

Executing: wb_pad_dv = geomAnd(dv geomOr(bondPadFilter LVSDG6))

Executing: wb_pad_lv = geomAnd(lv geomOr(bondPadFilter LVSDG6))

Executing: am_bb = geomAndNot(am_bb am_RES_bb)

Executing: am = geomOr(am_bb am AM_pin)

Executing: bondPad = geomAnd(bondPadFilter am)

Executing: bondPad_top = geomOr(bondPad)

Executing: bondPad_via = geomAnd(am bondPad)

Executing: padOverDev = geomAnd(geomOutside(LVSDG6 bondPad) am)

Executing: padOverDev_top = geomOr(padOverDev)

Executing: padOverDev_via = geomAnd(am_padOverDev padOverDev)

Executing: wb_pad_dv_via = geomAnd(wb_pad_dv geomOr(bondPad padOverDev))

Executing: wb_pad_lv_via = geomAnd(wb_pad_lv geomOr(bondPad padOverDev))

Executing: geomHoles(BFCUS)

Executing: geomHoles(BPCUS)

Executing: hv_fet_pc = geomGetHoled(pc)

Executing: geomHoles(pc)

Executing: hv_pc = geomOr(hv_fet_pc hv_pc_hole)

Executing: geomHoles(sn)

Executing: geomHoles(nw)

Executing: geomHoles(sp)

Executing: sp_shape_holed = geomGetHoled(sp)

Executing: hv_sp = geomOr(sp_hole sp_shape_holed)

Executing: esdtdi20_rev = geomGetTexted(rxhv rxhv_text "ESDTDI20_REV_3.0")

Executing: esdtdi25_rev = geomGetTexted(rxhv rxhv_text "ESDTDI25_REV_2.0")

Executing: esdfdi25_rev = geomGetTexted(rxhv rxhv_text "ESDFDI25_REV_2.0")

Executing: esdfdi50_rev = geomGetTexted(rxhv rxhv_text "ESDFDI50_REV_2.0")

Executing: esdtdi50_rev = geomGetTexted(rxhv rxhv_text "ESDTDI50_REV_3.0")

Executing: rxhv_esdtdi20_name = geomGetTexted(rxhv rxhv_text "ESDTDI20_*")

Executing: geomGetUnTexted(rxhv_esdtdi20_name rxhv_text "ESDTDI20_REV_3.0")

Executing: rxhv_esdtdi25_name = geomGetTexted(rxhv rxhv_text "ESDTDI25_*")

Executing: geomGetUnTexted(rxhv_esdtdi25_name rxhv_text "ESDTDI25_REV_2.0")

Executing: rxhv_esdfdi25_name = geomGetTexted(rxhv rxhv_text "ESDFDI25_*")

Executing: geomGetUnTexted(rxhv_esdfdi25_name rxhv_text "ESDFDI25_REV_2.0")

Executing: rxhv_esdfdi50_name = geomGetTexted(rxhv rxhv_text "ESDFDI50_*")

Executing: geomGetUnTexted(rxhv_esdfdi50_name rxhv_text "ESDFDI50_REV_2.0")

Executing: rxhv_esdtdi50_name = geomGetTexted(rxhv rxhv_text "ESDTDI50_*")

Executing: geomGetUnTexted(rxhv_esdtdi50_name rxhv_text "ESDTDI50_REV_3.0")

Executing: hvpwres_rev = geomGetTexted(rxhv rxhv_text "HVPWRES_REV_4.0")

Executing: hvnwres_rev = geomGetTexted(rxhv rxhv_text "HVNWRES_REV_4.0")

Executing: vnpn_rev = geomGetTexted(rxhv rxhv_text "VNPN_REV_2.0")

Executing: vpnp_rev = geomGetTexted(rxhv rxhv_text "VPNP_REV_1.0")

Executing: nfet20mh_rev = geomGetTexted(rxhv rxhv_text "NFET20MH_REV_1.0")

Executing: nfet20hs_rev = geomGetTexted(rxhv rxhv_text "NFET20HS_REV_4.0")

Executing: nfet50hs_rev = geomGetTexted(rxhv rxhv_text "NFET50HS_REV_4.0")

Executing: nfeti20h_rev = geomGetTexted(rxhv rxhv_text "NFETI20H_REV_4.0")

Executing: nfeti20t_rev = geomGetTexted(rxhv rxhv_text "NFETI20T_REV_4.0")

Executing: nfeti25m_rev = geomGetTexted(rxhv rxhv_text "NFETI25M_REV_4.0")

Executing: nfeti50h_rev = geomGetTexted(rxhv rxhv_text "NFETI50H_REV_6.0")

Executing: nfeti50m_rev = geomGetTexted(rxhv rxhv_text "NFETI50M_REV_5.0")

Executing: nfeti50t_rev = geomGetTexted(rxhv rxhv_text "NFETI50T_REV_5.0")

Executing: pfet20h_rev = geomGetTexted(rxhv rxhv_text "PFET20H_REV_4.0")

Executing: pfet20hs_rev = geomGetTexted(rxhv rxhv_text "PFET20HS_REV_4.0")

Executing: pfet20t_rev = geomGetTexted(rxhv rxhv_text "PFET20T_REV_3.0")

Executing: pfet25m_rev = geomGetTexted(rxhv rxhv_text "PFET25M_REV_4.0")

Executing: pfet50h_rev = geomGetTexted(rxhv rxhv_text "PFET50H_REV_4.0")

Executing: pfet50hs_rev = geomGetTexted(rxhv rxhv_text "PFET50HS_REV_4.0")

Executing: pfet50m_rev = geomGetTexted(rxhv rxhv_text "PFET50M_REV_4.0")

Executing: pfet50t_rev = geomGetTexted(rxhv rxhv_text "PFET50T_REV_4.0")

Executing: pjfet_rev = geomGetTexted(rxhv rxhv_text "PJFET_REV_2.0")

Executing: pc = geomOr(pc geomAnd(pc PC_pin) pc_bb)

Executing: pc_input = geomOr(pc)

Executing: rx_input = geomOr(rx)

Executing: pc_ISO = geomOverlap(pc geomOr(ISODEV FLTGATE))

Executing: rx = geomAndNot(rx pc_ISO)

Executing: bp_not_bb = geomAndNot(bp bb)

Executing: pc_fill = geomOutside(geomInside(geomEnclose(pc rx) GRLOGIC) ca)

Executing: rx_fill = geomOutside(rx geomOr(ca pi))

Executing: rx = geomAndNot(rx geomOr(pc_fill))

Executing: rx = geomOr(geomOverlap(rx ca) geomOverlap(rx nw (keep > 1)) geomInside(rx rx...

Executing: ind_xy = geomAnd(ind_xy ind)

Executing: RF = geomSize(RF 0.25)

Executing: op_vncap_hv = geomAnd(op geomSize(VNCAP_PC 0.2))

Executing: op = geomAndNot(op op_vncap_hv)

Executing: errorLayer(geomOutside(geomAndNot(sblk op) ESD_DRC) "SBLK without OP")

Executing: op_temp = geomOutside(op sblk)

Executing: sblk = geomAnd(op sblk)

Executing: sblk_over_pc = geomOverlap(sblk pc)

Executing: sblk = geomAndNot(sblk geomSize(pc 0.01))

Executing: op = geomOr(op_temp)

Executing: ESD_DEV_LV = geomOutside(ESD_DEV rxhv)

Executing: ESD_nsnw = geomOverlap(geomOr(ns nw) ESD_DEV_LV)

Executing: ESD_pdif = geomOverlap(geomOr(bp pd) ESD_DEV_LV)

Executing: ESD_pdnw = geomOverlap(ESD_DEV_LV geomGetRectangle(geomAnd(ESD_pdif ESD_nsnw)))

Executing: ESD_pdnw_diode = geomOutside(ESD_pdnw GRLOGIC)

Executing: ESD_pdnw_subc = geomOutside(geomOverlap(geomAnd(rx ESD_pdif) ESD_pdnw) ESD_nsnw)

Executing: ESD_pdnw_plus = geomOverlap(geomOverlap(geomAnd(rx ESD_pdif) ESD_pdnw) ESD_nsnw)

Executing: ESD_pdnw_minus = geomOverlap(geomAndNot(rx ESD_pdif) ESD_pdnw)

Executing: rx = geomAndNot(rx ESD_pdnw_plus)

Executing: VPNPnw = geomAnd(ESD_DEV_LV geomEnclose(nw bp))

Executing: ESD_vpnp_pdif = geomOr(VPNPnw ESD_pdif)

Executing: ESD_ndsx = geomOutside(ESD_DEV_LV VPNPnw)

Executing: ESD_ndsx_minus = geomInside(geomOutside(rx ESD_vpnp_pdif) ESD_DEV_LV)

Executing: ESD_ndsx_minus = geomOr(geomOverlap(nw ESD_ndsx_minus) ESD_ndsx_minus)

Executing: ESD_ndsx_plus = geomOutside(ESD_pdif VPNPnw)

Executing: geomHoles(ESD_ndsx_plus)

Executing: ESD_ndsx_plus_term = geomOr(ESD_ndsx_plus geomSize(ESD_ndsx_plus_hole 0.1))

Executing: ESD_ndsx_plus_via = geomAnd(ESD_ndsx_plus_term ESD_ndsx_plus)

Executing: ESD_pdnw_pi = geomOverlap(ESD_pdnw pi)

Executing: ESD_pdnw_dn = geomOverlap(ESD_pdnw dn)

Executing: esd_pdnw_dn_err = geomAnd(ESD_pdnw_dn geomOr(ns pi rn nr pr bb tg ng pc rr rp...
	   errorLayer(esd_pdnw_dn_err "ESDPDIDN device touching ns pi rn nr pr bb tg ng pc rr rp pd op rxhv sn dp sp")

Executing: ESD_pdnw = geomOutside(ESD_pdnw geomOr(pi dn))

Executing: ESD_pdnw_diode = geomOutside(ESD_pdnw_diode geomOr(pi dn))

Executing: esd_pdnw_err = geomAnd(ESD_pdnw_diode geomOr(ns pi rn nr pr bb tg ng pc rr rp...
	   errorLayer(esd_pdnw_err "ESDVPNPNW device touching ns pi rn nr pr bb tg ng pc rr rp pd op rxhv dn sn dp sp")

Executing: ESD_ndsx_pi = geomOverlap(ESD_ndsx pi)

Executing: ESD_ndsx_dn = geomOverlap(ESD_ndsx dn)

Executing: esd_ndsx_dn_err = geomAnd(ESD_ndsx_dn geomOr(ns pi rn nr pr bb tg ng pc rr rp...
	   errorLayer(esd_ndsx_dn_err "ESDNDIDN device touching ns pi rn nw nr pr bb tg ng pc bp rr rp pd op rxhv sn dp sp")

Executing: ESD_ndsx = geomOutside(ESD_ndsx geomOr(pi dn))

Executing: ESD_ndsx_GR = geomSize(geomAnd(geomOverlap(ESD_ndsx GRLOGIC) ESD_ndsx_minus) ...

Executing: ESD_ndsx = geomOutside(ESD_ndsx GRLOGIC)

Executing: esd_ndsx_err = geomAnd(ESD_ndsx geomOr(ns pi rn nr pr bb tg ng pc rr rp pd op...
	   errorLayer(esd_ndsx_err "ESDNDSX device touching ns pi rn nw nr pr bb tg ng pc bp rr rp pd op rxhv dn sn dp sp")

Executing: ESD_pdnw_diode_GR = geomSize(geomAnd(geomOverlap(ESD_pdnw GRLOGIC) ESD_pdnw_p...

Executing: ESD_nw = geomOverlap(nw ESD_DEV_LV)

Executing: nw = geomOutside(nw geomOr(ESD_pdnw ESD_ndsx))

Executing: ns = geomOutside(ns geomOr(ESD_DEV_LV ESD_ndsx))

Executing: recognized_device = geomOr(ESD_pdnw ESD_ndsx ESD_pdnw_pi ESD_ndsx_pi ESD_ndsx...

Executing: BFCUS_holed = geomGetHoled(BFCUS)

Executing: esd_hv_dev = geomOverlap(ESD_DEV geomOverlap(rxhv dn))

Executing: esd_fdi_dev = geomOverlap(esd_hv_dev geomOverlap(dp sp))

Executing: esd_tdi_dev = geomOutside(geomOutside(geomOverlap(esd_hv_dev sp_shape_holed) ...

Executing: esd_tdi_50_dev = geomOverlap(geomOverlap(esd_hv_dev BFCUS_holed) hv_fet_pc)

Executing: esd_hv_cath = geomOverlap(geomOutside(geomAnd(rx sn) geomOr(sp dp)) esd_hv_dev)

Executing: esd_fdi_anod = geomOverlap(geomOverlap(geomAnd(rx bp) geomAnd(dp sp)) esd_fdi...

Executing: esd_fdi_meas = geomOverlap(geomGetBBox(dp) esd_fdi_anod)

Executing: esd_tdi_anod = geomOverlap(geomOverlap(hv_sp rx) esd_tdi_dev)

Executing: esd_tdi_50_anod = geomOverlap(geomOverlap(BFCUS_hole rx) esd_tdi_50_dev)

Executing: recognized_device = geomOr(recognized_device esd_hv_dev)

Executing: esdfdi25_dev = geomOverlap(esd_fdi_dev esdfdi25_rev)

Executing: esdfdi50_dev = geomOverlap(esd_fdi_dev esdfdi50_rev)

Executing: esdtdi20_dev = geomOverlap(esd_tdi_dev esdtdi20_rev)

Executing: esdtdi25_dev = geomOverlap(esd_tdi_dev esdtdi25_rev)

Executing: esdtdi50_dev = geomOverlap(esd_tdi_50_dev esdtdi50_rev)

Executing: esdtdi_pc = geomAndNot(geomOverlap(hv_fet_pc esd_tdi_50_anod) geomGetBBox(esd...

Executing: esdtdi50_err = geomButtOrOver(geomAnd(m1 ca) esdtdi_pc)
	   errorLayer(esdtdi50_err "esdtdi50 anod wiring not allowed through PC !")

Executing: esdfdi_pc = geomAndNot(geomInside(hv_fet_pc esd_fdi_dev) geomSize(hv_pc_hole ...

Executing: esdfdi_err = geomButtOrOver(geomAnd(m1 ca) esdfdi_pc)
	   errorLayer(esdfdi_err "esdfdi25/50 anod wiring not allowed through PC !")

Executing: diode_esdfdi_model = geomSize(geomOverlap(rxhv geomOr(esdfdi25_dev esdfdi50_d...

Executing: diode_esdtdi_20_model = geomSize(geomOverlap(rxhv geomOr(esdtdi20_dev)) 2.0)

Executing: diode_esdtdi_25_50_model = geomSize(geomOverlap(rxhv geomOr(esdtdi25_dev esdt...

Executing: diode_esdHV_model = geomOr(diode_esdfdi_model diode_esdtdi_20_model diode_esd...

Executing: esd_fdi_err = geomAnd(esd_fdi_dev geomOr(ns pi rn nr pr bb tg ng rr rp pd op))
	   errorLayer(esd_fdi_err "ESDFDI device touching ns pi rn nr pr bb tg ng rr rp pd op")

Executing: esd_tdi_err = geomAnd(esd_tdi_dev geomOr(ns pi rn nw nr pr bb tg ng pc rr rp ...
	   errorLayer(esd_tdi_err "ESDTDI device touching ns pi rn nw nr pr bb tg ng pc rr rp pd op dp")

Executing: efuse = geomOr(pcFuse)

Executing: efuse_cath = geomOr(drc(geomButting(pc efuse) (area > 3)))

Executing: efuse_anod = geomOr(drc(geomButting(pc efuse) (area < 3)))

Executing: efuse_err1 = geomOutside(efuse bp)
	   errorLayer(efuse_err1 "efuse device without bp")

Executing: efuse_err2 = geomAnd(efuse geomOr(ns rx pi rn nw nr pr bb tg ng rr rp pd op r...
	   errorLayer(efuse_err2 "efuse device touching ns rx pi rn nw nr pr bb tg ng rr rp pd op rxhv dn sn dp sp")

Executing: pjfet_dev_d = geomOverlap(geomStraddle(geomOverlap(dp geomAnd(sp bp)) sn) dn)

Executing: pjfet_dev = geomOverlap(pjfet_dev_d pjfet_rev)

Executing: pjfet_sd = geomOverlap(geomAnd(rx geomAnd(sp bp)) pjfet_dev)

Executing: pjfet_g = geomOverlap(geomAnd(rx sn) pjfet_dev)

Executing: pjfet_sn_sh = geomAnd(sn pjfet_dev)

Executing: pjfet_mul = geomOverlap(pjfet_dev multi)

Executing: recognized_device = geomOr(recognized_device pjfet_dev)

Executing: hv_bipolar_dev = geomOverlap(geomOverlap(geomOutside(geomOverlap(dp rx) pc) s...

Executing: hv_bipolar_dev = geomOutside(hv_bipolar_dev recognized_device)

Executing: vpnp_dev = geomSize(geomOverlap(rxhv geomOverlap(hv_bipolar_dev sp)) 7.28)

Executing: VPNP = geomSize(vpnp_dev 0.22)

Executing: vnpn_dev = geomSize(geomOverlap(rxhv geomOutside(hv_bipolar_dev sp)) 0.28)

Executing: vnpn_dev = geomOverlap(vnpn_dev vnpn_rev)

Executing: vpnp_dev = geomOverlap(vpnp_dev vpnp_rev)

Executing: vnpn_base = geomInside(geomInside(geomAnd(geomAnd(rx bp) dp) dn) vnpn_dev)

Executing: vnpn_emit = geomInside(geomInside(geomOutside(geomAnd(geomOutside(rx bp) dp) ...

Executing: vnpn_coll = geomAnd(geomAnd(geomAnd(rx sn) dn) vnpn_dev)

Executing: vpnp_base = geomAnd(geomAnd(geomAnd(rx sn) dn) vpnp_dev)

Executing: vpnp_emit = geomInside(geomInside(geomOverlap(dp geomAnd(sp geomAnd(rx bp))) ...

Executing: vpnp_coll = geomOverlap(geomOutside(geomOverlap(rx bp) dp) vpnp_dev)

Executing: BIPOLAR_DEV = geomOr(vnpn_dev vpnp_dev)

Executing: BIPOLAR_err = geomAnd(BIPOLAR_DEV geomOr(ns pi rn nw nr pr bb tg ng pc rr rp ...
	   errorLayer(BIPOLAR_err "VPNP/VNPN device touching ns pi rn nw nr pr bb tg ng pc rr rp pd op")

Executing: recognized_device = geomOr(recognized_device BIPOLAR_DEV)

Executing: vnpn_dev_modeled = geomSize(geomOverlap(rxhv vnpn_dev) 2.2)

Executing: vpnp_dev_modeled = geomSize(geomOverlap(rxhv vpnp_dev) 1.6)

Executing: diode_bipHV_model = geomOr(vnpn_dev_modeled vpnp_dev_modeled)

Executing: hvres_op = geomGetHoled(op)

Executing: hvnwres_dev_d = geomOutside(geomOverlap(geomOverlap(sn rx) hvres_op) dn)

Executing: hvnwres_dev = geomOverlap(hvnwres_dev_d hvnwres_rev)

Executing: hvpwres_dev_d = geomOverlap(geomOverlap(geomOverlap(dp geomAnd(sp rx)) hvres_...

Executing: hvpwres_dev = geomOverlap(hvpwres_dev_d hvpwres_rev)

Executing: hvnwres_dev_err = geomAnd(hvnwres_dev geomOr(sp dp))
	   errorLayer(hvnwres_dev_err "High Voltage Resistor device (hvnwres) touching sp,dp")

Executing: hvpwres_dev_err = geomAnd(hvpwres_dev geomOr(sn))
	   errorLayer(hvpwres_dev_err "High Voltage Resistor device (hvpwres) touching sn")

Executing: geomHoles(op)

Executing: hvpwres_term = geomInside(geomOverlap(geomOverlap(geomAnd(geomAnd(rx bp) op_h...

Executing: hvpwres_area = geomInside(geomAnd(op sp) hvpwres_dev)

Executing: hvpwres_w_edge = geomSize(geomGetEdge(hvpwres_area butting op_hole) 0.1)

Executing: hvnwres_term = geomOverlap(geomAnd(rx geomAnd(BPCUS_hole op_hole)) hvnwres_dev)

Executing: hvnwres_area = geomInside(geomSize(geomSize(geomAnd(op sn) -1.0) 1.0) hvnwres...

Executing: hvnwres_w_edge = geomSize(geomGetEdge(hvnwres_area inside sn) 0.1)

Executing: HVRES_DEV = geomOr(hvnwres_dev hvpwres_dev)

Executing: resistorHV_m = geomOverlap(HVRES_DEV multi)

Executing: HVRES_err = geomAnd(HVRES_DEV geomOr(ns pi rn nr pr bb tg ng pc rr rp pd))
	   errorLayer(HVRES_err "High Voltage Resistor device touching ns pi rn nr pr bb tg ng pc rr rp pd")

Executing: recognized_device = geomOr(recognized_device HVRES_DEV)

Executing: dp = geomAndNot(dp hvpwres_dev)

Executing: sp = geomAndNot(sp hvpwres_dev)

Executing: sn = geomAndNot(sn hvnwres_dev)

Executing: hvnwres_modeled = geomSize(hvnwres_dev 1.0)

Executing: hvpwres_modeled = geomSize(hvpwres_dev 2.8)

Executing: diode_resHV_model = geomOr(hvnwres_modeled hvpwres_modeled)

Executing: HAVAR = geomOverlap(bperi jd)

Executing: hvr_dev = geomOr(HAVAR)

Executing: hvr_cath = geomAnd(HAVAR geomAnd(rx rn))

Executing: hvr_anod = geomAnd(HAVAR geomAndNot(rx rn))

Executing: hvr_dev_err = geomAnd(hvr_dev geomOr(pi nw nr pr dg pc rr rp pd op))
	   errorLayer(hvr_dev_err "HAVAR device touching pi,nw,nr,pr,dg,pc,rr,rp,pd,op")

Executing: hvr_dev_err2 = geomOutside(hvr_dev geomOr(ns bb))
	   errorLayer(hvr_dev_err2 "HAVAR device outside ns or bb")

Executing: recognized_device = geomOr(recognized_device HAVAR)

Executing: bb_ndiffs = geomOverlap(geomOverlap(geomAndNot(rx geomOr(bp pd pc jd)) bb) ca)

Executing: geomHoles(geomAndNot(pd recognized_device))

Executing: SBD_seed = geomAnd(SBD_in MOSvar)

Executing: SBD = geomOutside(geomOutside(geomEnclose(geomAnd(SBD_seed bb) geomAnd(rx pd_...

Executing: SBD_A = geomInside(geomStraddle(IBM_LayerCopy(rx) pd_hole) SBD)

Executing: SBD_C = geomAnd(geomAnd(rx rn) SBD)

Executing: pd_hole_sbd = geomAnd(pd_hole SBD_A)

Executing: width_label_s_edge = geomSize(geomGetEdge(width_label coincident pd_hole_sbd)...

Executing: width_label_sbd = geomButting(width_label width_label_s_edge (keep == 3))

Executing: sbd_err = geomAndNot(SBD dn)
	   errorLayer(sbd_err "SBD device must be covered by DN")

Executing: sbdi_dn = geomOverlap(IBM_LayerCopy(dn) SBD)

Executing: dn = geomOutside(dn sbdi_dn)

Executing: SBD_err1 = geomAnd(SBD geomOr(ns pi nw nr pr tg ng pc rr rp op rxhv sn dp sp))
	   errorLayer(SBD_err1 "SBDI device touching ns pi nw nr pr tg ng pc rr rp op rxhv sn dp sp")

Executing: DI_diode = geomOverlap(nw di)

Executing: DI_anode = geomOverlap(geomInside(IBM_LayerCopy(rx) di) DI_diode)

Executing: DI_cathode = geomAnd(geomOutside(rx di) DI_diode)

Executing: DI_FILTER = geomSize(DI_diode 0.94)

Executing: DI_VPNP = geomOverlap(bperi DI_FILTER)

Executing: DI_coll = geomOutside(geomOverlap(IBM_LayerCopy(rx) DI_VPNP) DI_diode)

Executing: DI_diode = geomOutside(DI_diode DI_VPNP)

Executing: DI_diode_err1 = geomOutside(DI_diode bp)
	   errorLayer(DI_diode_err1 "DI Diode device without bp")

Executing: DI_diode_err2 = geomAnd(DI_diode geomOr(ns pi rn nr pr bb tg ng pc rr rp pd o...
	   errorLayer(DI_diode_err2 "DI Diode device touching ns pi rn nr pr bb tg ng pc rr rp pd op rxhv sn dp sp")

Executing: DI_VPNP_err = geomAnd(DI_VPNP geomOr(ns pi rn nr pr bb tg ng pc rr rp pd op r...
	   errorLayer(DI_VPNP_err "DIVPNP device touching ns pi rn nr pr bb tg ng pc rr rp pd op rxhv dn sn dp sp")

Executing: DIPI_diode1 = geomEnclose(geomAndNot(dn nw) DIPI)

Executing: DIPI_diode2 = geomSize(DIPI_diode1 0.7)

Executing: dindpw_rev = geomGetTexted(DIPI_diode2 DEVICE_ID_TXT "DINDPW-DEVICE")

Executing: DIPI_diode = geomOverlap(DIPI_diode2 dindpw_rev)

Executing: DIPI_diode_pd = geomAnd(bp DIPI_diode)

Executing: DIPI_FILTER = geomSize(DIPI_diode 2.5)

Executing: DIPI_cathode = geomOverlap(geomInside(IBM_LayerCopy(rx) DIPI) DIPI_diode)

Executing: DIPI_anode = geomOverlap(geomAnd(rx DIPI_diode_pd) DIPI_diode)

Executing: DIPI_nw = geomAnd(nw DIPI_diode)

Executing: DIPI_nw_diff = geomAnd(rx DIPI_nw)

Executing: bp = geomAndNot(bp DIPI_diode_pd)

Executing: nw = geomAndNot(nw DIPI_nw)

Executing: rx = geomAndNot(rx DIPI_nw_diff)

Executing: DIPI_diode_err2 = geomAnd(DIPI_diode geomOr(ns pi rn nr pr bb tg ng pc rr rp ...
	   errorLayer(DIPI_diode_err2 "DIPI Diode device touching ns pi rn nr pr bb tg ng pc rr rp pd op rxhv sn dp sp")

Executing: DIPI_diode_err3 = geomAnd(DIPI geomOr(nw bp))
	   errorLayer(DIPI_diode_err3 "DIPI Diode device touching nw,bp")

Executing: pcap_dev = geomAnd(geomOverlap(dn geomOutside(geomAnd(pc rx) geomOr(rn))) MOS...

Executing: pcap_dev_all = geomOr(pcap_dev)

Executing: pcap_dev_pd = geomAnd(bp pcap_dev)

Executing: pcap_pc = geomOverlap(IBM_LayerCopy(pc) pcap_dev)

Executing: pcap_rx = geomOverlap(geomAnd(IBM_LayerCopy(rx) pcap_dev_pd) pcap_dev)

Executing: pcap_RX = geomOr(pcap_rx)

Executing: pcap_gates = geomOverlap(geomAnd(IBM_LayerCopy(rx) IBM_LayerCopy(pc)) pcap_dev)

Executing: pcap_pc_length = geomSize(geomGetEdge(pcap_gates inside IBM_LayerCopy(pc)) -0...

Executing: pcap_rx_width = geomSize(geomGetEdge(pcap_gates inside IBM_LayerCopy(rx)) -0.05)

Executing: pcap_mul = geomOverlap(pcap_dev multi)

Executing: pcap_err = geomAnd(pcap_dev geomOr(ns pi rn nr pr bb ng rr rp pd op rxhv sn d...
	   errorLayer(pcap_err "pcapi or pcapim devices touching ns pi rn nr pr bb ng rr rp pd op rxhv sn dp sp")

Executing: pcap50_dev = geomOverlap(pcap_dev tg)

Executing: pcap_dev = geomOutside(pcap_dev tg)

Executing: MOSVAR = geomOverlap(nw geomOutside(geomAnd(pc rx) geomOr(bp rn)))

Executing: mosvar_dev = geomOverlap(geomOverlap(MOSVAR geomAnd(pc rx)) MOSvar)

Executing: mosvar_pc = geomOverlap(IBM_LayerCopy(pc) mosvar_dev)

Executing: mosvar_nw = geomOverlap(IBM_LayerCopy(nw) mosvar_dev)

Executing: pc = geomAndNot(pc mosvar_pc)

Executing: mosvar_rx = geomAnd(geomAndNot(geomOverlap(IBM_LayerCopy(rx) mosvar_dev) pc) ...

Executing: mosvar_RX = geomOr(mosvar_rx)

Executing: mosvar_gates = geomOverlap(geomAnd(rx mosvar_pc) mosvar_dev)

Executing: mosvar_pc_length = geomSize(geomGetEdge(mosvar_gates inside mosvar_pc) -0.05)

Executing: mosvar_rx_width = geomSize(geomGetEdge(mosvar_gates inside rx) -0.05)

Executing: mosvar_err = geomAnd(mosvar_dev geomOr(ns jd pi rn nr pr dg bp rr rp pd op))
	   errorLayer(mosvar_err "mosvar, mosvarm or pcdcapm devices touching ns,jd,pi,rn,nr,pr,dg,bp,rr,rp,pd,op")

Executing: nw = geomAndNot(nw mosvar_nw)

Executing: mosvart_rev = geomGetTexted(MOSvar DEVICE_ID_TXT "MOSVART-DEVICE")

Executing: mosvarm_rev = geomGetTexted(MOSvar DEVICE_ID_TXT "MOSVARM-DEVICE")

Executing: pcdcapm_rev = geomGetTexted(PCDCAPM DEVICE_ID_TXT "PCDCAPM-DEVICE")

Executing: pcdcapt_rev = geomGetTexted(PCDCAPM DEVICE_ID_TXT "PCDCAPT-DEVICE")

Executing: pcdcap50_dev = geomAnd(geomOverlap(geomOverlap(mosvar_dev tg) pcdcapm_rev) PC...

Executing: mosvar50_dev = geomAnd(geomOutside(geomOverlap(geomOverlap(mosvar_dev tg) mos...

Executing: mosvar_dev = geomAnd(geomOutside(geomOverlap(geomOutside(mosvar_dev geomOr(tg...

Executing: ncap_dev = geomOutside(geomAnd(MOSVAR geomAnd(pc rx)) MOSvar)

Executing: ncap_pc = geomOverlap(IBM_LayerCopy(pc) ncap_dev)

Executing: ncap_nw = geomOverlap(IBM_LayerCopy(nw) ncap_dev)

Executing: ncap_rx = geomAnd(geomAndNot(geomOverlap(rx ncap_dev) geomOr(pc bp)) ncap_nw)

Executing: ncap_gates = geomOverlap(geomAnd(rx pc) ncap_dev)

Executing: decap_rx = geomAnd(geomOverlap(geomAnd(rx pc) ncap_dev) ncap_nw)

Executing: ncap_rx = geomOr(ncap_rx geomAnd(GRLOGIC decap_rx))

Executing: ndiff_in_ncap_nw = geomAnd(geomAndNot(geomOutside(rx ncap_dev) geomOr(pc bp))...

Executing: ncap_ndiff = geomOr(ncap_rx ndiff_in_ncap_nw)

Executing: pplus_in_ncap_nw = geomAnd(ncap_nw geomAnd(rx bp))
	   errorLayer(pplus_in_ncap_nw "P+ diffusion in ncap nwell found")

Executing: ncap_pc_length = geomSize(geomGetEdge(ncap_gates inside pc) -0.1)

Executing: ncap_rx_width = geomSize(geomGetEdge(ncap_gates inside rx) -0.1)

Executing: ncap_mul = geomOverlap(ncap_dev multi)

Executing: ncap_err = geomAnd(ncap_nw geomOr(ns pi rn nr pr ng bp rr rp pd op rxhv dn sn...
	   errorLayer(ncap_err "pcdcap devices touching ns pi rn nr pr ng bp rr rp pd op rxhv dn sn dp sp")

Executing: pc = geomAndNot(pc ncap_pc)

Executing: nw = geomAndNot(nw ncap_nw)

Executing: ncap_dev = geomOutside(ncap_dev geomOr(dg tg))

Executing: pcdcapt_dev = geomOverlap(geomInside(ncap_dev PCDCAPM) pcdcapt_rev)

Executing: ncap_dev = geomOutside(ncap_dev PCDCAPM)

Executing: ncap_n1 = geomGetEdge(geomOr(mosvar_nw ncap_nw) inside rx)

Executing: ncap_ndo = geomSize(ncap_n1 0.01)

Executing: ncap_ndi = geomSize(ncap_n1 -0.01)

Executing: ncap_nd = geomOr(ncap_ndo ncap_ndi)

Executing: rx = geomAndNot(rx mosvar_rx)

Executing: rx = geomAndNot(rx geomOr(ncap_rx decap_rx))

Executing: butt_rx = geomGetEdge(bp inside rx)

Executing: butt_rxn = geomSize(butt_rx 0.1 edges)

Executing: butt_rxp = geomSize(butt_rx -0.1 edges)

Executing: butt_top = geomOr(butt_rxn butt_rxp)

Executing: ndiff = geomAndNot(rx geomOr(bp))

Executing: nfet_gate = geomOutside(geomAndNot(geomAnd(pc ndiff) nw) rxhv)

Executing: nfet_dev_polygon = geomGetPolygon(nfet_gate)

Executing: nfet_gate_gns = geomOverlap(sblk_over_pc nfet_gate)

Executing: nfet_dev_b = geomOutside(geomOr(nfet_dev_polygon) geomOr(nr ne))

Executing: nfet_dev = geomOutside(nfet_gate geomOr(nfet_dev_b dg dgv tg ZVT nr ne))

Executing: nfet_dev_TG = geomAndNot(geomAnd(geomOutside(geomAndNot(nfet_gate nfet_dev_b)...

Executing: nfet_dev_HVT = geomAndNot(geomAnd(geomAndNot(nfet_gate nfet_dev_polygon) nr) ...

Executing: nfet_dev_HVT_b = geomAndNot(geomAnd(nfet_dev_polygon nr) geomOr(dg dgv ne))

Executing: nfet_dev_SHVT = geomAndNot(geomAnd(geomAndNot(nfet_gate nfet_dev_polygon) ne)...

Executing: nfet_dev_SHVT_b = geomAndNot(geomAnd(nfet_dev_polygon ne) geomOr(dg dgv nr))

Executing: nfet_sd = geomButting(geomAndNot(geomAndNot(ndiff nw) geomOr(pc rn op sblk)) ...

Executing: nfet_fingers = geomInside(nfet_dev multi)

Executing: nfet_fingers_TG = geomInside(nfet_dev_TG multi)

Executing: nfet_fingers_HVT = geomInside(nfet_dev_HVT multi)

Executing: nfet_fingers_SHVT = geomInside(nfet_dev_SHVT multi)

Executing: nfet_mul = geomStraddle(rx nfet_fingers)

Executing: nfet_mul_TG = geomStraddle(rx nfet_fingers_TG)

Executing: nfet_mul_HVT = geomStraddle(rx nfet_fingers_HVT)

Executing: nfet_mul_SHVT = geomStraddle(rx nfet_fingers_SHVT)

Executing: nfet_dev = geomOutside(nfet_dev multi)

Executing: nfet_dev_TG = geomOutside(nfet_dev_TG multi)

Executing: nfet_dev_HVT = geomOutside(nfet_dev_HVT multi)

Executing: nfet_dev_SHVT = geomOutside(nfet_dev_SHVT multi)

Executing: nfeti_dev_b = nfeti_dev_b = nfeti_dev_b = geomOutside(geomOverlap(geomOutside...

Executing: nfeti_dev = geomOutside(geomOverlap(geomOutside(nfet_dev RF) pi) psp_model)

Executing: nfeti_mul = geomOutside(geomOverlap(geomOutside(nfet_mul RF) pi) psp_model)

Executing: nfeti_dev_TG = geomOverlap(geomOutside(nfet_dev_TG RF) pi)

Executing: nfeti_mul_TG = geomOverlap(geomOutside(nfet_mul_TG RF) pi)

Executing: nfeti_dev_HVT_b = nfeti_dev_HVT_b = nfeti_dev_HVT_b = geomOutside(geomOverlap...

Executing: nfeti_dev_HVT = nfeti_dev_HVT = nfeti_dev_HVT = geomOutside(geomOverlap(geomO...

Executing: nfeti_mul_HVT = geomOutside(geomOverlap(geomOutside(nfet_mul_HVT RF) pi) psp_...

Executing: nfRFi_dev = geomOverlap(rx geomOverlap(geomOverlap(nfet_dev RF) pi))

Executing: nfRFi_mul = geomOverlap(rx geomOverlap(geomOverlap(nfet_mul RF) pi))

Executing: nfRF_dev = geomOverlap(rx geomOutside(geomOverlap(nfet_dev RF) pi))

Executing: nfRF_mul = geomOverlap(rx geomOutside(geomOverlap(nfet_mul RF) pi))

Executing: nfet_dev = geomOutside(geomOutside(geomOutside(nfet_dev RF) pi) psp_model)

Executing: nfet_mul = geomOutside(geomOutside(geomOutside(nfet_mul RF) pi) psp_model)

Executing: nfet_dev_b = geomOutside(geomOutside(geomOutside(nfet_dev_b RF) pi) psp_model)

Executing: nfet_dev_HVT = geomOutside(geomOutside(nfet_dev_HVT RF) pi)

Executing: nfet_mul_HVT = geomOutside(geomOutside(nfet_mul_HVT RF) pi)

Executing: nfet_dev_HVT_b = geomOutside(geomOutside(nfet_dev_HVT_b RF) pi)

Executing: nfet_dev_SHVT = nfet_dev_SHVT = nfet_dev_SHVT = geomOutside(geomOutside(nfet_...

Executing: nfet_mul_SHVT = geomOutside(geomOutside(nfet_mul_SHVT RF) pi)

Executing: nfet_dev_SHVT_b = nfet_dev_SHVT_b = nfet_dev_SHVT_b = geomOutside(geomOutside...

Executing: nfet_dev_TG = geomOutside(geomOutside(nfet_dev_TG RF) pi)

Executing: nfet_mul_TG = geomOutside(geomOutside(nfet_mul_TG RF) pi)

Executing: pi_bottom_iso = geomSize(pi 1.0)

Executing: dn_bottom_iso = geomOr(dn)

Executing: pwell_pi = geomAndNot(pi geomOr(nw))

Executing: pfhv_n_implant = geomOr(nw sn)

Executing: pwell_dn = geomAndNot(geomAndNot(geomSize(dn -0.5) geomSize(rxhv 3.7)) geomOr...

Executing: pwell_sp = geomOverlap(geomOverlap(geomOr(sp BFCUS_hole) rxhv) dn)

Executing: pwell_dp = geomOverlap(geomOverlap(geomOr(dp) rxhv) dn)

Executing: pwell = geomOutside(geomOr(pwell_pi pwell_dn pwell_sp pwell_dp) geomOr(pjfet_...

Executing: pwell_diff = geomAnd(pwell geomOr(ESD_ndsx_plus geomAnd(rx geomOr(bp pd))))

Executing: pwell_diff = geomAndNot(pwell_diff geomStraddle(geomAnd(geomAnd(rx bp) pc) dp))

Executing: nfettw_all = geomOverlap(nfet_gate six_term)

Executing: nfet6_dn_dev_b = nfet6_dn_dev_b = nfet6_dn_dev_b = geomOverlap(nfet_dev_b geo...

Executing: nfeti_dn_dev_b = nfeti_dn_dev_b = nfeti_dn_dev_b = geomEmpty()

Executing: nfet6_dn_dev = nfet6_dn_dev = nfet6_dn_dev = geomOverlap(nfet_dev geomAnd(dn ...

Executing: nfeti_dn_dev = nfeti_dn_dev = nfeti_dn_dev = geomEmpty()

Executing: nfet6_dn_mul = geomOverlap(nfet_mul geomAnd(dn six_term))

Executing: nfeti_dn_mul = geomEmpty()

Executing: nfet6_dn_dev_HVT_b = nfet6_dn_dev_HVT_b = nfet6_dn_dev_HVT_b = geomOverlap(nf...

Executing: nfeti_dn_dev_HVT_b = nfeti_dn_dev_HVT_b = nfeti_dn_dev_HVT_b = geomEmpty()

Executing: nfet6_dn_dev_HVT = nfet6_dn_dev_HVT = nfet6_dn_dev_HVT = geomOverlap(nfet_dev...

Executing: nfeti_dn_dev_HVT = nfeti_dn_dev_HVT = nfeti_dn_dev_HVT = geomEmpty()

Executing: nfet6_dn_mul_HVT = geomOverlap(nfet_mul_HVT geomAnd(dn six_term))

Executing: nfeti_dn_mul_HVT = geomEmpty()

Executing: nfet6_dn_dev_TG = nfet6_dn_dev_TG = nfet6_dn_dev_TG = geomOverlap(nfet_dev_TG...

Executing: nfeti_dn_dev_TG = nfeti_dn_dev_TG = nfeti_dn_dev_TG = geomEmpty()

Executing: nfet6_dn_mul_TG = geomOverlap(nfet_mul_TG geomAnd(dn six_term))

Executing: nfeti_dn_mul_TG = geomEmpty()

Executing: nfRF6_dn_dev = geomOverlap(nfRF_dev geomAnd(dn six_term))

Executing: nfRFi_dn_dev = geomEmpty()

Executing: nfRF6_dn_mul = geomOverlap(nfRF_mul geomAnd(dn six_term))

Executing: nfRFi_dn_mul = geomEmpty()

Executing: nfet_dev_b = nfet_dev_b = nfet_dev_b = geomOutside(nfet_dev_b geomOr(nfet6_dn...

Executing: nfet_dev = nfet_dev = nfet_dev = geomOutside(nfet_dev geomOr(nfet6_dn_dev nfe...

Executing: nfet_mul = geomOutside(nfet_mul geomOr(nfet6_dn_mul nfeti_dn_mul))

Executing: nfet_dev_HVT_b = nfet_dev_HVT_b = nfet_dev_HVT_b = geomOutside(nfet_dev_HVT_b...

Executing: nfet_dev_HVT = nfet_dev_HVT = nfet_dev_HVT = geomOutside(nfet_dev_HVT geomOr(...

Executing: nfet_mul_HVT = geomOutside(nfet_mul_HVT geomOr(nfet6_dn_mul_HVT nfeti_dn_mul_...

Executing: nfet_dev_TG = nfet_dev_TG = nfet_dev_TG = geomOutside(nfet_dev_TG geomOr(nfet...

Executing: nfet_mul_TG = geomOutside(nfet_mul_TG geomOr(nfet6_dn_mul_TG nfeti_dn_mul_TG))

Executing: nfRF_dev = geomOutside(nfRF_dev geomOr(nfRF6_dn_dev nfRFi_dn_dev))

Executing: nfRF_mul = geomOutside(nfRF_mul geomOr(nfRF6_dn_mul nfRFi_dn_mul))

Executing: nfet6_dev = nfet6_dev = nfet6_dev = geomOr(nfeti_dev)

Executing: nfeti_dev = nfeti_dev = nfeti_dev = geomEmpty()

Executing: nfet6_mul = geomOr(nfeti_mul)

Executing: nfeti_mul = geomEmpty()

Executing: nfet6_dev_TG = nfet6_dev_TG = nfet6_dev_TG = geomOr(nfeti_dev_TG)

Executing: nfeti_dev_TG = nfeti_dev_TG = nfeti_dev_TG = geomEmpty()

Executing: nfet6_mul_TG = geomOr(nfeti_mul_TG)

Executing: nfeti_mul_TG = geomEmpty()

Executing: nfRF6_dev = geomOr(nfRFi_dev)

Executing: nfRFi_dev = geomEmpty()

Executing: nfRF6_mul = geomOr(nfRFi_mul)

Executing: nfRFi_mul = geomEmpty()

Executing: dual_poly_err = geomAnd(geomOutside(geomAndNot(geomStraddle(pc geomInside(geo...
	   errorLayer(dual_poly_err "Dual gate poly device without M1/CA connection")

Executing: dual_poly = geomInside(geomAnd(rx_input pc) dual_poly)

Executing: nfRF_drain = geomOverlap(geomAnd(nfet_sd RF) drain_filter)

Executing: nfRF_source = geomOutside(geomAnd(nfet_sd RF) drain_filter)

Executing: nfet_sd = geomOutside(nfet_sd RF)

Executing: RF_BULK = geomOverlap(RF nfet_gate)

Executing: nf_drain = geomInside(geomOverlap(nfet_sd drain_filter) multi)

Executing: nf_source = geomInside(geomOutside(nfet_sd drain_filter) multi)

Executing: nfet_sd = geomAndNot(nfet_sd geomOr(nf_drain nf_source))

Executing: nfet_hv_s = geomOutside(geomOverlap(hv_pc geomOverlap(sn rx)) dn)

Executing: nfet_hv_hs = geomOverlap(rxhv geomOverlap(geomOverlap(nfet_hv_s ng) geomAnd(s...

Executing: nfet_hv_mh = geomOverlap(rxhv geomAndNot(nfet_hv_s nfet_hv_hs))

Executing: hv_nfet_pc_hole = geomSize(geomStraddle(hv_pc_hole geomAndNot(rx bp)) 0.2)

Executing: nfeti_hv = geomOverlap(geomOverlap(hv_fet_pc geomAndNot(rx bp)) geomOr(sp dp ...

Executing: nfeti_hv = geomOverlap(nfeti_hv hv_nfet_pc_hole)

Executing: nfeti_hv = geomInside(geomOverlap(geomSize(sn_hole 0.3) nfeti_hv) dn)

Executing: nfeti_hv = geomOverlap(nfeti_hv rxhv)

Executing: nfet_hv = geomOr(nfet_hv_hs nfet_hv_mh nfeti_hv)

Executing: nfHV_sd = geomOverlap(geomOutside(geomOverlap(ndiff geomOr(sn)) pc) nfet_hv)

Executing: nfHV_drain = geomAnd(nfHV_sd geomOr(dn))

Executing: nfHV_sd = geomAndNot(nfHV_sd nfHV_drain)

Executing: nfHV_source = geomOverlap(geomOverlap(geomStraddle(ndiff geomOr(BFCUS_hole sp...

Executing: nfHV_mh_drain = geomOverlap(geomOutside(geomAnd(ndiff geomAnd(sn tg)) dn) nfe...

Executing: nfHV_mh_source = geomOverlap(geomOutside(geomAnd(ndiff geomAnd(sp tg)) dn) nf...

Executing: nfhv_p_implant = geomOr(BFCUS_hole geomAnd(sp tg) geomAndNot(geomAnd(dp ng) sn))

Executing: nfHV_gate_hs = geomOverlap(geomAnd(geomAnd(rx hv_pc) nfhv_p_implant) nfet_hv)

Executing: nfHV_gate = geomOverlap(geomAnd(geomAnd(ndiff pc) nfhv_p_implant) nfet_hv)

Executing: nfHV_edgel_hs = geomSize(geomGetEdge(nfHV_gate_hs coincident nfhv_p_implant) ...

Executing: nfHV_edgel = geomSize(geomGetEdge(nfHV_gate coincident nfhv_p_implant) 0.1)

Executing: nfet20hs_x5 = geomOr(drc(nfHV_sd nfHV_gate_hs ((1.0 < sep) < 1.8) opposite pa...

Executing: nfet50hs_x5 = geomOr(drc(nfHV_sd nfHV_gate_hs ((3.0 < sep) < 4.0) opposite pa...

Executing: nfet20hs_dev = geomOverlap(geomOverlap(nfet_hv_hs nfet20hs_x5) nfet20hs_rev)

Executing: nfet50hs_dev = geomOverlap(geomOverlap(nfet_hv_hs nfet50hs_x5) nfet50hs_rev)

Executing: nfet20mh_dev = geomOverlap(nfet_hv_mh nfet20mh_rev)

Executing: nfeti20_x7 = geomOr(drc(nfHV_source nfHV_drain ((0.4 < sep) < 0.8) opposite p...

Executing: nfeti25_x7 = geomOr(drc(nfHV_source nfHV_drain ((0.9 < sep) < 1.3) opposite p...

Executing: nfeti50_x7 = geomOr(drc(nfHV_source nfHV_drain ((3.0 < sep) < 5.2) opposite p...

Executing: nfeti20h_dev = geomOverlap(geomOverlap(nfeti_hv geomAnd(nfeti20_x7 ng)) nfeti...

Executing: nfeti20t_dev = geomOverlap(geomOverlap(nfeti_hv geomAndNot(nfeti20_x7 ng)) nf...

Executing: nfeti25m_dev = geomOverlap(geomOverlap(nfeti_hv geomAnd(nfeti25_x7 tg)) nfeti...

Executing: nfeti50h_dev = geomOverlap(geomOverlap(nfeti_hv geomAnd(nfeti50_x7 ng)) nfeti...

Executing: nfeti50m_dev = geomOverlap(geomOverlap(nfeti_hv geomAnd(nfeti50_x7 tg)) nfeti...

Executing: nfeti50t_dev = geomOverlap(geomOverlap(nfeti_hv geomAndNot(nfeti50_x7 geomOr(...

Executing: nfeti20_modeled = geomSize(geomOverlap(rxhv geomOr(nfeti20h_dev nfeti20t_dev ...

Executing: nfeti50h_modeled = geomSize(geomOverlap(rxhv nfeti50h_dev) 6.54)

Executing: nfeti50m_modeled = geomSize(geomOverlap(rxhv nfeti50m_dev) 6)

Executing: nfeti50t_modeled = geomSize(geomOverlap(rxhv nfeti50t_dev) 6.05)

Executing: diode_nfetHV_model = geomOr(nfeti20_modeled nfeti50h_modeled nfeti50m_modeled...

Executing: ndiff = geomAndNot(ndiff pc)

Executing: res6n_bar_all = geomOutside(geomStraddle(ndiff geomOr(op sblk)) geomOr(nfet_h...

Executing: res6n_bar = geomOutside(res6n_bar_all rxhv)

Executing: res6n_term = geomAndNot(geomOr(res6n_bar) geomOr(op sblk nfet_sd))

Executing: res6n_dev = geomAnd(res6n_bar op)

Executing: res6n_sblk = geomAnd(res6n_bar sblk)

Executing: res6n_err = geomAnd(geomOr(res6n_dev res6n_sblk) geomOr(ns nw nr pr))
	   errorLayer(res6n_err "N+ Diffused Resistor device touching ns,nw,nr,pr")

Executing: res6n_5_dev = geomOverlap(res6n_dev geomAnd(dn six_term))

Executing: res6n_3_dev = geomEmpty()

Executing: res6n_5_sblk = geomOverlap(res6n_sblk geomAnd(dn six_term))

Executing: res6n_3_sblk = geomEmpty()

Executing: res6n_dev = geomOutside(res6n_dev geomOr(res6n_5_dev res6n_3_dev))

Executing: res6n_dn_sblk = geomOr(res6n_5_sblk res6n_3_sblk)

Executing: res6n_sblk = geomOutside(res6n_sblk geomOr(res6n_5_sblk res6n_3_sblk))

Executing: ndiff_dc_fet = geomOr(nfet_sd)

Executing: ndiff = geomAndNot(ndiff ndiff_dc_fet)

Executing: nfet_sd = geomOr(nfet_sd geomAnd(res6n_term geomOverlap(res6n_bar sblk)))

Executing: res6n_term = geomAndNot(res6n_term geomAnd(res6n_term geomOverlap(res6n_bar s...

Executing: ndiff = geomAndNot(ndiff geomOr(res6n_bar hvnwres_dev))

Executing: ndiff_tie = geomAvoiding(geomAndNot(ndiff geomOr(SBD DI_diode DI_VPNP ESD_DEV...

Executing: diode_inside_ndiff = geomButting(diode geomAndNot(ndiff_tie diode))

Executing: ndiff_in_sp = geomInside(ndiff_tie sp)

Executing: ntie_in_sp = geomOutside(geomAnd(ndiff_in_sp diode) geomOr(diode_bipHV_model ...

Executing: ntie_in_sp_top = geomOr(ntie_in_sp)

Executing: ndiff_not_sp = geomOutside(ndiff_tie ndiff_in_sp)

Executing: ntie_device = geomOutside(geomAnd(ndiff_not_sp diode) geomOr(diode_bipHV_mode...

Executing: ntie_top = geomOr(ntie_device)

Executing: ndiff_tie = geomAndNot(ndiff_not_sp ntie_device)

Executing: ndiff_in_sp = geomAndNot(ndiff_in_sp ntie_in_sp)

Executing: nwell_diff = geomAnd(ndiff geomOr(sn nw rn))

Executing: pdiff = geomAndNot(geomAnd(rx bp) geomOr(rn))

Executing: pfet_gate = geomOutside(geomOutside(geomAnd(geomAnd(pc pdiff) nw) di) rxhv)

Executing: pfet_dev_polygon = geomGetPolygon(pfet_gate)

Executing: pfet_dev_b = geomOutside(geomOr(pfet_dev_polygon) geomOr(pr pe))

Executing: pfet_dev = geomAndNot(geomAndNot(pfet_gate pfet_dev_b) geomOr(dg dgv tg pr pe))

Executing: pfet_dev_TG = geomAndNot(geomAnd(geomAndNot(pfet_gate pfet_dev_b) tg) geomOr(...

Executing: pfet_dev_HVT = geomAndNot(geomAnd(geomAndNot(pfet_gate pfet_dev_polygon) pr) ...

Executing: pfet_dev_HVT_b = geomAndNot(geomAnd(pfet_dev_polygon pr) geomOr(dg dgv pe))

Executing: pfet_dev_SHVT = geomAndNot(geomAnd(geomAndNot(pfet_gate pfet_dev_polygon) pe)...

Executing: pfet_dev_SHVT_b = geomAndNot(geomAnd(pfet_dev_polygon pe) geomOr(dg dgv pr))

Executing: pfet_sd = geomButting(geomAndNot(geomAnd(pdiff nw) geomOr(pc op sblk)) pfet_g...

Executing: pfet_fingers = geomInside(pfet_dev multi)

Executing: pfet_fingers_TG = geomInside(pfet_dev_TG multi)

Executing: pfet_fingers_HVT = geomInside(pfet_dev_HVT multi)

Executing: pfet_fingers_SHVT = geomInside(pfet_dev_SHVT multi)

Executing: pfet_mul = geomStraddle(rx pfet_fingers)

Executing: pfet_mul_TG = geomStraddle(rx pfet_fingers_TG)

Executing: pfet_mul_HVT = geomStraddle(rx pfet_fingers_HVT)

Executing: pfet_mul_SHVT = geomStraddle(rx pfet_fingers_SHVT)

Executing: pfet_dev = geomOutside(pfet_dev multi)

Executing: pfet_dev_TG = geomOutside(pfet_dev_TG multi)

Executing: pfet_dev_HVT = geomOutside(pfet_dev_HVT multi)

Executing: pfet_dev_SHVT = geomOutside(pfet_dev_SHVT multi)

Executing: pfRF_dev = geomOverlap(rx geomOverlap(pfet_dev RF))

Executing: pfRF_mul = geomOverlap(rx geomOverlap(pfet_mul RF))

Executing: pfet_mul_TG = geomOutside(pfet_mul_TG RF)

Executing: pfet_dev_TG = geomOutside(pfet_dev_TG RF)

Executing: pfet_dev_b = geomOutside(pfet_dev_b psp_model)

Executing: pfet_dev = geomOutside(geomOutside(pfet_dev RF) psp_model)

Executing: pfet_mul = geomOutside(geomOutside(pfet_mul RF) psp_model)

Executing: pfet_dev_HVT = geomOutside(pfet_dev_HVT RF)

Executing: pfet_dev_HVT_b = geomOutside(pfet_dev_HVT_b RF)

Executing: pfet_mul_HVT = geomOutside(pfet_mul_HVT RF)

Executing: pfet_dev_SHVT = pfet_dev_SHVT = pfet_dev_SHVT = geomOutside(pfet_dev_SHVT RF)

Executing: pfet_dev_SHVT_b = pfet_dev_SHVT_b = pfet_dev_SHVT_b = geomOutside(pfet_dev_SH...

Executing: pfet_mul_SHVT = geomOutside(pfet_mul_SHVT RF)

Executing: pfet5_dn_dev_b = pfet5_dn_dev_b = pfet5_dn_dev_b = geomOverlap(pfet_dev_b geo...

Executing: pfeti_dn_dev_b = pfeti_dn_dev_b = pfeti_dn_dev_b = geomEmpty()

Executing: pfet5_dn_dev = pfet5_dn_dev = pfet5_dn_dev = geomOverlap(pfet_dev geomAnd(dn ...

Executing: pfeti_dn_dev = pfeti_dn_dev = pfeti_dn_dev = geomEmpty()

Executing: pfet5_dn_mul = geomOverlap(pfet_mul geomAnd(dn six_term))

Executing: pfeti_dn_mul = geomEmpty()

Executing: pfet5_dn_dev_HVT_b = pfet5_dn_dev_HVT_b = pfet5_dn_dev_HVT_b = geomOverlap(pf...

Executing: pfeti_dn_dev_HVT_b = pfeti_dn_dev_HVT_b = pfeti_dn_dev_HVT_b = geomEmpty()

Executing: pfet5_dn_dev_HVT = pfet5_dn_dev_HVT = pfet5_dn_dev_HVT = geomOverlap(pfet_dev...

Executing: pfeti_dn_dev_HVT = pfeti_dn_dev_HVT = pfeti_dn_dev_HVT = geomEmpty()

Executing: pfet5_dn_mul_HVT = geomOverlap(pfet_mul_HVT geomAnd(dn six_term))

Executing: pfeti_dn_mul_HVT = geomEmpty()

Executing: pfet5_dn_dev_TG = pfet5_dn_dev_TG = pfet5_dn_dev_TG = geomOverlap(pfet_dev_TG...

Executing: pfeti_dn_dev_TG = geomEmpty()

Executing: pfet5_dn_mul_TG = geomOverlap(pfet_mul_TG geomAnd(dn six_term))

Executing: pfeti_dn_mul_TG = geomEmpty()

Executing: pfRF5_dn_dev = geomOverlap(pfRF_dev geomAnd(dn six_term))

Executing: pfRFi_dn_dev = geomEmpty()

Executing: pfRF5_dn_mul = geomOverlap(pfRF_mul geomAnd(dn six_term))

Executing: pfRFi_dn_mul = geomEmpty()

Executing: pfet_dev_b = pfet_dev_b = pfet_dev_b = geomOutside(pfet_dev_b geomOr(pfet5_dn...

Executing: pfet_dev = pfet_dev = pfet_dev = geomOutside(pfet_dev geomOr(pfet5_dn_dev pfe...

Executing: pfet_mul = geomOutside(pfet_mul geomOr(pfet5_dn_mul pfeti_dn_mul))

Executing: pfet_dev_HVT_b = pfet_dev_HVT_b = pfet_dev_HVT_b = geomOutside(pfet_dev_HVT_b...

Executing: pfet_dev_HVT = pfet_dev_HVT = pfet_dev_HVT = geomOutside(pfet_dev_HVT geomOr(...

Executing: pfet_mul_HVT = geomOutside(pfet_mul_HVT geomOr(pfet5_dn_mul_HVT pfeti_dn_mul_...

Executing: pfet_dev_TG = pfet_dev_TG = pfet_dev_TG = geomOutside(pfet_dev_TG geomOr(pfet...

Executing: pfet_mul_TG = geomOutside(pfet_mul_TG geomOr(pfet5_dn_mul_TG pfeti_dn_mul_TG))

Executing: pfRF_dev = geomOutside(pfRF_dev geomOr(pfRF5_dn_dev pfRFi_dn_dev))

Executing: pfRF_mul = geomOutside(pfRF_mul geomOr(pfRF5_dn_mul pfRFi_dn_mul))

Executing: pfRF_drain = geomOverlap(geomAnd(pfet_sd RF) drain_filter)

Executing: pfRF_source = geomOutside(geomAnd(pfet_sd RF) drain_filter)

Executing: pfet_sd = geomOutside(pfet_sd RF)

Executing: pf_drain = geomInside(geomOverlap(pfet_sd drain_filter) multi)

Executing: pf_source = geomInside(geomOutside(pfet_sd drain_filter) multi)

Executing: pfet_sd = geomAndNot(pfet_sd geomOr(pf_drain pf_source))

Executing: FET_DEV = geomOr(nfet_gate pfet_gate)

Executing: FET_err = geomAnd(FET_DEV geomOr(ns jd rn bb rr rp pd op))
	   errorLayer(FET_err "FET device touching ns,jd,rn,bb,rr,rp,pd,op")

Executing: pfet_hv_pc = geomOutside(geomInside(geomOverlap(geomOverlap(hv_pc rx) dp) dn)...

Executing: pfet_hv_pc = geomStraddle(pfet_hv_pc geomOverlap(geomOr(sn nw) rx))

Executing: sn_pfet_hv = geomOr(sn_hole sn)

Executing: nw_pfet_hv = geomOr(nw_hole nw)

Executing: pfet_hv = geomOverlap(geomOr(sn_pfet_hv nw_pfet_hv) pfet_hv_pc)

Executing: pfet_hv = geomAnd(pfet_hv rxhv)

Executing: pfHV_sd_all = geomOverlap(geomOverlap(geomInside(pdiff geomOr(dp)) dn) pfet_hv)

Executing: pfHV_drain = geomOverlap(pfHV_sd_all pfet_hv (keep == 1))

Executing: pfHV_sd = geomAndNot(pfHV_sd_all geomOverlap(pfet_hv pfHV_sd_all (keep == 1)))

Executing: pfHV_source = geomInside(geomOverlap(geomStraddle(pdiff geomOr(sn nw)) dn) pf...

Executing: pfHV_gate = geomInside(geomAnd(geomAnd(pdiff pc) pfhv_n_implant) pfet_hv)

Executing: pfHV_s_gate = geomInside(geomAndNot(geomInside(geomAnd(rx pc) dn) dp) pfet_hv)

Executing: pfHV_edgel = geomSize(geomGetEdge(pfHV_gate coincident pfhv_n_implant) 0.1)

Executing: pfHV_s_edgel = geomSize(geomGetEdge(pfHV_s_gate butting dp) 0.1)

Executing: pfet20hs_x4 = geomOr(drc(pfHV_sd pfHV_s_gate ((0.7 < sep) < 1.0) opposite par...

Executing: pfet50hs_x4 = geomOr(drc(pfHV_sd pfHV_s_gate ((2.8 < sep) < 4.2) opposite par...

Executing: pfet20hs_dev = geomOverlap(geomOverlap(pfet_hv pfet20hs_x4) pfet20hs_rev)

Executing: pfet50hs_dev = geomOverlap(geomOverlap(pfet_hv pfet50hs_x4) pfet50hs_rev)

Executing: pfet20_x3 = geomOr(drc(pfHV_source pfHV_drain ((0.4 < sep) < 0.8) opposite pa...

Executing: pfet50_x3 = geomOr(drc(pfHV_source pfHV_drain ((2.5 < sep) < 4.0) opposite pa...

Executing: pfet20h_dev = geomOverlap(geomOverlap(pfet_hv geomAnd(pfet20_x3 ng)) pfet20h_...

Executing: pfet25m_dev = geomOverlap(geomOverlap(pfet_hv geomAnd(pfet20_x3 tg)) pfet25m_...

Executing: pfet20t_dev = geomOverlap(geomOverlap(pfet_hv geomAndNot(pfet20_x3 geomOr(ng ...

Executing: pfet50h_dev = geomOverlap(geomOverlap(pfet_hv geomAnd(pfet50_x3 ng)) pfet50h_...

Executing: pfet50m_dev = geomOverlap(geomOverlap(pfet_hv geomAnd(pfet50_x3 tg)) pfet50m_...

Executing: pfet50t_dev = geomOverlap(geomOverlap(pfet_hv geomAndNot(pfet50_x3 geomOr(ng ...

Executing: FET_HV_DEV = geomOr(nfet_hv pfet_hv)

Executing: NFET_HV_err = geomAnd(FET_HV_DEV geomOr(ns pi rn nr pr bb rr rp pd op))
	   errorLayer(NFET_HV_err "FET HV device touching  ns,pi,rn,nr,pr,bb,rr,rp,pd,op")

Executing: pfet_modeled = geomSize(geomOverlap(rxhv geomOr(pfet20h_dev pfet25m_dev pfet5...

Executing: pfet20t_modeled = geomSize(geomOverlap(rxhv geomOr(pfet20t_dev)) 2.91)

Executing: pfet_no_hs_modeled = geomOr(pfet_modeled pfet20t_modeled)

Executing: pfet_hs_modeled = geomSize(geomOverlap(rxhv geomOr(pfet20hs_dev pfet50hs_dev)...

Executing: diode_pfetHV_model = geomOr(pfet_no_hs_modeled pfet_hs_modeled)

Executing: pdiff = geomAndNot(pdiff pc)

Executing: res6p_bar_all = geomStraddle(pdiff geomOr(op sblk))

Executing: res6p_bar = geomOutside(res6p_bar_all rxhv)

Executing: res6p_term = geomAndNot(res6p_bar geomOr(op sblk pfet_sd))

Executing: res6p_dev = geomAnd(res6p_bar op)

Executing: res6p_sblk = geomAnd(res6p_bar sblk)

Executing: pdiff = geomAndNot(pdiff geomOr(res6p_bar))

Executing: res6p_4_dev = geomOverlap(res6p_dev geomAnd(dn six_term))

Executing: res6p_3_dev = geomEmpty()

Executing: res6p_4_sblk = geomOverlap(res6p_sblk geomAnd(dn six_term))

Executing: res6p_3_sblk = geomEmpty()

Executing: res6p_dev = geomOutside(res6p_dev geomOr(res6p_4_dev res6p_3_dev))

Executing: res6p_dn_sblk = geomOr(res6p_4_sblk res6p_3_sblk)

Executing: res6p_sblk = geomOutside(res6p_sblk geomOr(res6p_4_sblk res6p_3_sblk))

Executing: diff_RES_dev = geomOr(res6n_dev res6n_5_dev res6n_3_dev res6p_dev res6p_4_dev...

Executing: diff_RES_err = geomOutside(geomAnd(diff_RES_dev geomOr(bb dg pc)) ESD_DRC)
	   errorLayer(diff_RES_err "Diffused Resistor device touching bb,dg,pc")

Executing: pdiff_dc_fet = geomOr(pfet_sd)

Executing: pdiff = geomAndNot(pdiff pdiff_dc_fet)

Executing: pfet_sd = geomOr(pfet_sd geomAnd(res6p_term geomOverlap(res6p_bar sblk)))

Executing: res6p_term = geomAndNot(res6p_term geomAnd(res6p_term geomOverlap(res6p_bar s...

Executing: ESD_ALL = geomOr(ESD_DRC ESD_CDM)

Executing: nfetnsh_rev = geomGetTexted(ESD_ALL DEVICE_ID_TXT "ESDNSH_BASE-DEVICE")

Executing: esdnsh_nfet = geomOr(nfet_dev nfet_dev_TG)

Executing: esdnsh_dev = geomOverlap(geomOr(esdnsh_nfet geomButtOnly(nfet_sd nfet_gate) r...

Executing: nfetnsh_rev_dn = geomGetTexted(ESD_ALL DEVICE_ID_TXT "ESDNSH_BASE_DN-DEVICE")

Executing: esdnsh_nfet_dn = geomOr(nfet6_dn_dev nfeti_dn_dev nfet6_dn_dev_TG nfeti_dn_de...

Executing: esdnsh_dev_dn = geomOverlap(geomOr(esdnsh_nfet_dn geomButtOnly(nfet_sd nfet_g...

Executing: esdnsh_gate = geomOverlap(nfet_gate geomOr(esdnsh_dev esdnsh_dev_dn))

Executing: esdnsh_drain = geomButtOnly(geomOverlap(nfet_sd drain_filter) esdnsh_gate)

Executing: esdnsh_source = geomButtOnly(geomOutside(nfet_sd drain_filter) esdnsh_gate)

Executing: pfetpsh_rev = geomGetTexted(ESD_ALL DEVICE_ID_TXT "ESDPSH_BASE-DEVICE")

Executing: esdpsh_pfet = geomOr(pfet_dev pfet_dev_TG)

Executing: esdpsh_dev = geomOverlap(geomOr(esdpsh_pfet geomButtOnly(pfet_sd pfet_gate) r...

Executing: pfetpsh_rev_dn = geomGetTexted(ESD_ALL DEVICE_ID_TXT "ESDPSH_BASE_DN-DEVICE")

Executing: esdpsh_pfet_dn = geomOr(pfet5_dn_dev pfeti_dn_dev pfet5_dn_dev_TG pfeti_dn_de...

Executing: esdpsh_dev_dn = geomOverlap(geomOr(esdpsh_pfet_dn geomButtOnly(pfet_sd pfet_g...

Executing: esdpsh_gate = geomOverlap(pfet_gate geomOr(esdpsh_dev esdpsh_dev_dn))

Executing: esdpsh_drain = geomButtOnly(geomOverlap(pfet_sd drain_filter) esdpsh_gate)

Executing: esdpsh_source = geomButtOnly(geomOutside(pfet_sd drain_filter) esdpsh_gate)

Executing: esdnpsh_gate = geomOr(esdnsh_gate esdpsh_gate)

Executing: esdnpsh_drain = geomOr(esdnsh_drain esdpsh_drain)

Executing: esdnpsh_source = geomOr(esdnsh_source esdpsh_source)

Executing: esdnpsh_base = geomOr(esdnsh_dev esdpsh_dev esdnsh_dev_dn esdpsh_dev_dn)

Executing: esdnpsh_base50 = geomAnd(esdnpsh_base tg)

Executing: esdnpsh_base = geomAndNot(esdnpsh_base geomOr(esdnpsh_base50))

Executing: ind_bb_term = geomOutside(geomOverlap(geomOr(tline ind symIND0) bb) m1)

Executing: bond_bb_term = geomOverlap(bondPadFilter bb)

Executing: res6pc_bar = geomOutside(geomStraddle(pc op) rxhv)

Executing: res6pc_term = geomAndNot(res6pc_bar op)

Executing: res6pc_dev = geomInside(geomAnd(res6pc_bar op) geomOr(bp bb))

Executing: res6pc_dev_no_bp = geomOutside(geomAnd(res6pc_bar op) geomOr(bp bb))

Executing: resistor_m = geomOverlap(geomOr(res6pc_dev res6n_dev res6n_5_dev res6n_3_dev ...

Executing: resistor_bb = geomOverlap(res6pc_dev bb)

Executing: resistor_nw = geomOverlap(geomOr(res6pc_dev res6pc_dev_no_bp) nw)

Executing: resistor_sx = geomOutside(geomOr(res6pc_dev res6pc_dev_no_bp) geomOr(bb nw))

Executing: pc = geomAndNot(pc res6pc_bar)

Executing: poly_RES_err = geomAnd(res6pc_bar geomOr(rx rx_fill rn dg))
	   errorLayer(poly_RES_err "Polysilicon Resistor device touching rx,rn,dg")

Executing: poly_bp_err = geomAndNot(res6pc_dev geomOr(geomAndNot(bp bb) geomAnd(geomOr(r...
	   errorLayer(poly_bp_err "Polysilicon Resistor device not covered by P+ implant")

Executing: res6pc_err = geomAnd(res6pc_dev geomAnd(bb geomOr(pi ns nr pr dg)))
	   errorLayer(res6pc_err "Polysilicon Resistor device BB touching pi,ns,nr,pr,dg")

Executing: rnw6pc_dev_no_bp = geomOverlap(res6pc_dev_no_bp nw)

Executing: res6pc_dev_no_bp = geomOutside(res6pc_dev_no_bp nw)

Executing: rnw6pc_dev = geomOverlap(res6pc_dev nw)

Executing: res6pc_dev = geomOutside(res6pc_dev nw)

Executing: res6rr_dev = geomOverlap(res6pc_dev rr)

Executing: res6rp_dev = geomOverlap(res6pc_dev rp)

Executing: res6pc_dev = geomOutside(res6pc_dev geomOr(rr rp))

Executing: rnw6rr_dev = geomOverlap(rnw6pc_dev rr)

Executing: rnw6rp_dev = geomOverlap(rnw6pc_dev rp)

Executing: rnw6pc_dev = geomOutside(rnw6pc_dev geomOr(rr rp))

Executing: res6rr_err = geomAnd(geomAnd(bb geomOr(pi ns nw nr pr dg)) res6rr_dev)
	   errorLayer(res6rr_err "P Poly resistor RR BB touching pi,ns,nw,nr,pr,dg")

Executing: res6rp_err = geomAnd(geomAnd(bb geomOr(pi ns nw nr pr dg)) res6rp_dev)
	   errorLayer(res6rp_err "P Poly resistor RP BB touching pi,ns,nw,nr,pr,dg")

Executing: pdiff_tie = geomAvoiding(geomAnd(pdiff nw) pfet_gate)

Executing: diode_inside_pdiff = geomButting(diode geomAndNot(pdiff_tie diode))

Executing: ptie_device = geomOutside(geomAnd(pdiff_tie diode) geomOr(diode_bipHV_model d...

Executing: ptie_top = geomOr(ptie_device)

Executing: pdiff_tie = geomAndNot(pdiff_tie ptie_device)

Executing: nwsx_device = geomAndNot(geomAnd(nw diode) geomOr(diode_esdHV_model diode_bip...

Executing: diode_inside_nw = geomButting(diode geomAndNot(nw diode))

Executing: no_dnsx_device = geomOr(res6n_5_sblk res6p_4_sblk diode_esdHV_model pfet_gate...

Executing: dnsx_device = geomAndNot(geomAnd(dn_bottom_iso diode) no_dnsx_device)

Executing: diode_dnsx_modeled = geomButting(geomOr(no_dnsx_device) geomAndNot(dn geomOr(...

Executing: diode_in_dn = geomButting(diode geomAndNot(dn diode))

Executing: no_pwdn_device = geomOr(pcap50_dev pcap_dev ESD_ndsx_dn diode_esdHV_model pfe...

Executing: pwdn_device = geomAndNot(geomAnd(geomOverlap(pwell dn) diode) no_pwdn_device)

Executing: diode_pwdn_modeled = geomButting(no_pwdn_device geomAndNot(pwell no_pwdn_devi...

Executing: diode_in_dp = geomButting(diode geomAndNot(pwell diode))

Executing: ca = geomAnd(ca geomAnd(m1 geomOr(pc_input rx_input)))

Executing: sub_diff_top1 = geomOutside(geomOverlap(geomAndNot(pdiff geomOr(sn vnpn_dev n...

Executing: sub_diff_exclude = geomOr(RF VPNP)

Executing: sub_diff = geomAndNot(sub_diff_top1 sub_diff_exclude)

Executing: sub_diff_grlogic = geomEmpty()

Executing: sub_dev = geomOr(sub_diff)

Executing: sub_diff = geomOutside(sub_diff sub_dev)

Executing: sub_diff_top = geomOr(sub_dev)

Executing: sub_diff_grlogic = geomAnd(sub_diff_grlogic GRLOGIC)

Executing: substrate = geomOr(geomAndNot(bkgnd geomSize(SXCUT 0.002)) SXCUT)

Executing: substrate_ptap = geomOverlap(substrate sub_diff)

Executing: substrate_text = geomOutside(substrate sub_diff)

Executing: subvia = geomOr(subterm)

Executing: sub_m1 = geomOverlap(m1 sub_diff_top)

Executing: dummy_via = geomAnd(sub_m1 IND_AC_WIRE)

Executing: ind_ac_via = geomAnd(geomOr(ind_bb_term bond_bb_term) IND_AC_WIRE)

Executing: subs_sti = geomOr(substrate)

Executing: GateCon = geomOr(Gate)

Executing: corrPoint_devHV_PD = geomAnd(corrPoint geomOr(pfHV_sd pfHV_source pfHV_drain))

Executing: corrPoint_termHV_PD = geomOr(corrPoint_devHV_PD)

Executing: corrPoint = geomAndNot(corrPoint corrPoint_devHV_PD)

Executing: corrPoint_devHV_ND = geomAnd(corrPoint geomOr(nfHV_sd nfHV_source nfHV_drain ...

Executing: corrPoint_termHV_ND = geomOr(corrPoint_devHV_ND)

Executing: corrPoint = geomAndNot(corrPoint corrPoint_devHV_ND)

Executing: corrPoint_dev_PD = geomAnd(corrPoint geomOr(pfet_sd pf_source pf_drain pfRF_s...

Executing: corrPoint_term_PD = geomOr(corrPoint_dev_PD)

Executing: corrPoint = geomAndNot(corrPoint corrPoint_dev_PD)

Executing: corrPoint_dev_ND = geomAnd(corrPoint geomOr(nfet_sd nf_source nf_drain nfRF_s...

Executing: corrPoint_term_ND = geomOr(corrPoint_dev_ND)

Executing: corrPoint = geomAndNot(corrPoint corrPoint_dev_ND)

Executing: corrPoint_dev_PC = geomAnd(corrPoint pc)

Executing: corrPoint_term_PC = geomAnd(corrPoint pc)

Executing: corrPoint = geomAndNot(corrPoint corrPoint_dev_PC)

Executing: corrPoint_dev_M1 = geomAnd(corrPoint m1)

Executing: corrPoint_term_M1 = geomAnd(corrPoint m1)

Executing: corrPoint = geomAndNot(corrPoint corrPoint_dev_M1)

Executing: corrPoint_dev_M2 = geomAnd(corrPoint m2)

Executing: corrPoint_term_M2 = geomAnd(corrPoint m2)

Executing: errorLayer(geomAndNot(am_RES am) "(AM res) not covered by mask AM")

Executing: errorLayer(geomAndNot(mt_RES mt) "(MT res) not covered by mask MT")

Executing: errorLayer(geomAndNot(m4_RES m4) "(M4 res) not covered by mask M4")

Executing: errorLayer(geomAndNot(m3_RES m3) "(M3 res) not covered by mask M3")

Executing: errorLayer(geomAndNot(m2_RES m2) "(M2 res) not covered by mask M2")

Executing: errorLayer(geomAndNot(m1_RES m1) "(M1 res) not covered by mask M1")

Executing: Edges_m1_RES = geomGetEdge(m1_RES inside m1)

Executing: Edges_inside_m1_RES = geomSize(Edges_m1_RES -0.004)

Executing: Edges_outside_m1_RES = geomSize(Edges_m1_RES 0.004)

Executing: Edges_m1_RES_Size = geomOr(Edges_inside_m1_RES Edges_outside_m1_RES)

Executing: m1_RES_grow = geomGrow(m1_RES 0 0 0.004 0.004)

Executing: m1_RES_reduced = geomAnd(Edges_m1_RES_Size m1_RES_grow)

Executing: m1_RES_min = geomInside(m1_RES_reduced m1_RES)

Executing: m1 = geomAndNot(m1 m1_RES_min)

Executing: Edges_m2_RES = geomGetEdge(m2_RES inside m2)

Executing: Edges_inside_m2_RES = geomSize(Edges_m2_RES -0.004)

Executing: Edges_outside_m2_RES = geomSize(Edges_m2_RES 0.004)

Executing: Edges_m2_RES_Size = geomOr(Edges_inside_m2_RES Edges_outside_m2_RES)

Executing: m2_RES_grow = geomGrow(m2_RES 0 0 0.004 0.004)

Executing: m2_RES_reduced = geomAnd(Edges_m2_RES_Size m2_RES_grow)

Executing: m2_RES_min = geomInside(m2_RES_reduced m2_RES)

Executing: m2 = geomAndNot(m2 m2_RES_min)

Executing: Edges_m3_RES = geomGetEdge(m3_RES inside m3)

Executing: Edges_inside_m3_RES = geomSize(Edges_m3_RES -0.004)

Executing: Edges_outside_m3_RES = geomSize(Edges_m3_RES 0.004)

Executing: Edges_m3_RES_Size = geomOr(Edges_inside_m3_RES Edges_outside_m3_RES)

Executing: m3_RES_grow = geomGrow(m3_RES 0 0 0.004 0.004)

Executing: m3_RES_reduced = geomAnd(Edges_m3_RES_Size m3_RES_grow)

Executing: m3_RES_min = geomInside(m3_RES_reduced m3_RES)

Executing: m3 = geomAndNot(m3 m3_RES_min)

Executing: Edges_m4_RES = geomGetEdge(m4_RES inside m4)

Executing: Edges_inside_m4_RES = geomSize(Edges_m4_RES -0.004)

Executing: Edges_outside_m4_RES = geomSize(Edges_m4_RES 0.004)

Executing: Edges_m4_RES_Size = geomOr(Edges_inside_m4_RES Edges_outside_m4_RES)

Executing: m4_RES_grow = geomGrow(m4_RES 0 0 0.004 0.004)

Executing: m4_RES_reduced = geomAnd(Edges_m4_RES_Size m4_RES_grow)

Executing: m4_RES_min = geomInside(m4_RES_reduced m4_RES)

Executing: m4 = geomAndNot(m4 m4_RES_min)

Executing: Edges_mt_RES = geomGetEdge(mt_RES inside mt)

Executing: Edges_inside_mt_RES = geomSize(Edges_mt_RES -0.004)

Executing: Edges_outside_mt_RES = geomSize(Edges_mt_RES 0.004)

Executing: Edges_mt_RES_Size = geomOr(Edges_inside_mt_RES Edges_outside_mt_RES)

Executing: mt_RES_grow = geomGrow(mt_RES 0 0 0.004 0.004)

Executing: mt_RES_reduced = geomAnd(Edges_mt_RES_Size mt_RES_grow)

Executing: mt_RES_min = geomInside(mt_RES_reduced mt_RES)

Executing: mt = geomAndNot(mt mt_RES_min)

Executing: Edges_am_RES = geomGetEdge(am_RES inside am)

Executing: Edges_inside_am_RES = geomSize(Edges_am_RES -0.004)

Executing: Edges_outside_am_RES = geomSize(Edges_am_RES 0.004)

Executing: Edges_am_RES_Size = geomOr(Edges_inside_am_RES Edges_outside_am_RES)

Executing: am_RES_grow = geomGrow(am_RES 0 0 0.004 0.004)

Executing: am_RES_reduced = geomAnd(Edges_am_RES_Size am_RES_grow)

Executing: am_RES_min = geomInside(am_RES_reduced am_RES)

Executing: am = geomAndNot(am am_RES_min)

Executing: symIND = geomOverlap(ind symIND0)

Executing: ind = geomOutside(ind symIND)

Executing: tline = geomAndNot(tline geomOr(ind symIND))

Executing: am_trans = geomAnd(am tline)

Executing: errorLayer(geomAnd(am_trans amTerm) "Overlapping transmission lines - terminals must abut filters")

Executing: am_trans2 = geomAndNot(am_trans amTerm)

Executing: am_transmission = geomButting(am_trans2 amTerm (keep == 2))

Executing: am = geomAndNot(am am_transmission)

Executing: trans_in_am = geomGetTexted(amTerm am_text "in")

Executing: trans_out_am = geomGetTexted(amTerm am_text "out")

Executing: trans_in_mt = geomGetTexted(mtTerm mt_text "in")

Executing: trans_out_mt = geomGetTexted(mtTerm mt_text "out")

Executing: symind_in_am = geomGetTexted(amTerm am_text_symind "outpr")

Executing: symind_out_am = geomGetTexted(amTerm am_text_symind "outse")

Executing: symind_mid_m2 = geomGetTexted(m2Term m2_text "ct")

Executing: symind_mid_m4 = geomGetTexted(m4Term m4_text "ct")

Executing: symind_in = geomOr(symind_in_am)

Executing: symind_out = geomOr(symind_out_am)

Executing: All_in = geomOr(geomOr(trans_in_am trans_in_mt) symind_in)

Executing: All_out = geomOr(geomOr(trans_out_am trans_out_mt) symind_out)

Executing: symind_ct = geomOr(symind_mid_m2 symind_mid_m4)

Executing: ind_sym = geomOverlap(symIND symind_in)

Executing: dummy_ct = geomOutside(ind_sym symind_ct)

Executing: via_ct = geomOr(dummy_ct)

Executing: symind3 = geomAnd(geomAnd(geomOverlap(ind_sym symind_in (keep == 1)) geomOver...

Executing: symind2 = geomAnd(geomAnd(geomOverlap(ind_sym symind_in (keep == 1)) geomOver...

Executing: allSyminds = geomOr(symind3 symind2)

Executing: inductor2 = geomAnd(geomOverlap(ind All_in (keep == 1)) geomOverlap(ind All_o...

Executing: allInds = geomOr(inductor2 allSyminds)

Executing: ind_err1 = geomOutside(allInds bb)
	   errorLayer(ind_err1 "inductor device without bb")

Executing: ind_err2 = geomAnd(allInds geomOr(ns jd pi rn nw nr pr dg pc rr rp pd op))
	   errorLayer(ind_err2 "inductor device touching ns,jd,pi,rn,nw,nr,pr,dg,pc,rr,rp,pd,op")

Executing: amTRan = geomOverlap(amTerm allInds)

Executing: mtTRan = geomOverlap(mtTerm allInds)

Executing: allInd_Mt = geomAnd(allInds mt)

Executing: am_intern = geomAnd(am allInds)

Executing: am = geomOr(geomAndNot(am allInds) amTRan)

Executing: mt_intern = geomOverlap(geomAnd(mt allInds) mtTRan)

Executing: mt_intern2 = geomOr(geomOverlap(mt_intern_all symind_ct) geomGetNonRectangle(...

Executing: mt_ind = geomInside(mt allInds)

Executing: mt = geomOr(geomOr(geomAndNot(mt allInds) mt_ind) mtTRan)

Executing: ft_ind = geomInside(ft allInds)

Executing: ft_intern = geomAnd(ft allInds)

Executing: ft = geomAndNot(ft allInds)

Executing: allInd_Mt_45 = geomSize(geomGetNon90(allInd_Mt) 0.1)

Executing: mt_BentArea = geomButting(mt allInd_Mt_45)

Executing: mt_XArea = geomOutside(geomAnd(mt_BentArea am_intern) ft_ind)

Executing: m2TRan = geomOverlap(m2Term allInds)

Executing: m4TRan = geomOverlap(m4Term allInds)

Executing: allInd_M3 = geomAnd(allInds m3)

Executing: allInd_M4 = geomAnd(allInds m4)

Executing: m3_ind = geomInside(m3 allInds)

Executing: m3 = geomOr(geomAndNot(m3 allInds) m3_ind)

Executing: m4_ind = geomInside(m4 allInds)

Executing: m4 = geomOr(geomOr(geomAndNot(m4 allInds) m4_ind) m4TRan)

Executing: allInd_M3_45 = geomSize(geomGetNon90(allInd_M3) 0.1)

Executing: allInd_M4_45 = geomSize(geomGetNon90(allInd_M4) 0.1)

Executing: m3_BentArea = geomButting(m3 allInd_M3_45)

Executing: m3_XArea = geomOutside(geomAnd(m3_BentArea am_intern) ft_ind)

Executing: m4_BentArea = geomButting(m4 allInd_M4_45)

Executing: m4_XArea = geomOutside(geomAnd(m4_BentArea am_intern) ft_ind)

Executing: errorLayer(geomAnd(geomOr(geomXor(m3_XArea mt_XArea) geomXor(m4_XArea mt_XArea)) ind_xov) "M3 and M4 inside enhanced Inductor model must have the same dimension as MT")

Executing: errorLayer(geomAndNot(geomOr(geomAnd(m3_XArea mt_XArea) geomAnd(m4_XArea mt_XArea)) ind_xov) "M3/M4 inside standard inductor model is not allowed")

Executing: m2_intern = geomAnd(m2 allInds)

Executing: v2_intern = geomAnd(v2 allInds)

Executing: v2 = geomAndNot(v2 v2_intern)

Executing: m3_intern = geomAnd(m3 allInds)

Executing: v3_intern = geomAnd(v3 allInds)

Executing: v3 = geomAndNot(v3 v3_intern)

Executing: m4_intern = geomAnd(m4 allInds)

Executing: v4_intern = geomAnd(v4 allInds)

Executing: v4 = geomAndNot(v4 v4_intern)

Executing: m2_v2_m3_NotConn_symind = geomOutside(geomGetRectangle(geomAnd(m2_intern m3_i...

Executing: m3_v3_m4_NotConn_symind = geomOutside(geomOverlap(geomAnd(m3_intern m4_intern...

Executing: m4_v4_mt_NotConn_symind = geomOutside(geomOr(geomGetRectangle(geomAnd(m4_inte...

Executing: mt_ft_am_NotConn_ind = geomOutside(geomAnd(geomAndNot(mt_intern2 mtTerm) am_i...

Executing: mt_ft_am = geomOutside(geomAnd(mt_intern2 am_intern) ft_intern)

Executing: mt_ft_am_NotConn_symind = geomAndNot(mt_ft_am geomOr(geomGetRectangle(mt_ft_a...

Executing: m1_over_ind = geomAnd(m1 geomOr(symind3 symind2 inductor2))

Executing: m1_ind_groundplane = geomGetBBox(geomGetVertex(m1_over_ind (keep > 20)))

Executing: symind3_amam_m1 = geomOverlap(geomOverlap(geomOverlap(geomOverlap(symind3 sym...

Executing: symind3_amam_bb = geomOutside(geomOverlap(geomOverlap(geomOverlap(symind3 sym...

Executing: symind2_amam_m1 = geomOverlap(geomOverlap(geomOverlap(geomOverlap(symind2 sym...

Executing: symind2_amam_bb = geomOutside(geomOverlap(geomOverlap(geomOverlap(symind2 sym...

Executing: ind2_mtam_m1 = geomOverlap(geomOverlap(geomOverlap(inductor2 trans_in_mt) tra...

Executing: ind2_mtam_bb = geomOutside(geomOverlap(geomOverlap(inductor2 trans_in_mt) tra...

Executing: symind3_amam_err_2 = geomAnd(geomOr(symind3_amam_m1 symind3_amam_bb) m2_v2_m3...
	   errorLayer(symind3_amam_err_2 "Missing v2 vias on symind coils between m2 and m3")

Executing: symind3_amam_err_3 = geomAnd(geomOr(symind3_amam_m1 symind3_amam_bb) m3_v3_m4...
	   errorLayer(symind3_amam_err_3 "Missing v3 vias on symind coils between m3 and m4")

Executing: symind3_amam_err_4 = geomAnd(geomOr(symind3_amam_m1 symind3_amam_bb) m4_v4_mt...
	   errorLayer(symind3_amam_err_4 "Missing v4 vias on symind coils between m4 and mt")

Executing: symind2_amam_err_2 = geomAnd(geomOr(symind2_amam_m1 symind2_amam_bb) m2_v2_m3...
	   errorLayer(symind2_amam_err_2 "Missing v2 vias on symind coils between m2 and m3")

Executing: symind2_amam_err_3 = geomAnd(geomOr(symind2_amam_m1 symind2_amam_bb) m3_v3_m4...
	   errorLayer(symind2_amam_err_3 "Missing v3 vias on symind coils between m3 and m4")

Executing: symind2_amam_err_4 = geomAnd(geomOr(symind2_amam_m1 symind2_amam_bb) m4_v4_mt...
	   errorLayer(symind2_amam_err_4 "Missing v4 vias on symind coils between m4 and mt")

Executing: symind3_amam_err_T = geomAnd(geomOr(symind3_amam_m1 symind3_amam_bb) mt_ft_am...
	   errorLayer(symind3_amam_err_T "Missing ft vias on symind coils between mt and am")

Executing: symind2_amam_err_T = geomAnd(geomOr(symind2_amam_m1 symind2_amam_bb) mt_ft_am...
	   errorLayer(symind2_amam_err_T "Missing ft vias on symind coils between mt and am")

Executing: ind2_mtam_err_T = geomAnd(geomOr(ind2_mtam_m1 ind2_mtam_bb) mt_ft_am_NotConn_...
	   errorLayer(ind2_mtam_err_T "Missing ft vias on ind coils between mt and am")

Executing: ind_space = geomInside(geomOr(drc(trans_out_am am_intern (sep < 5.2) opposite...

Executing: symind_space_s = geomInside(geomOr(drc(symind_in geomOr(mt am_intern) (sep <=...

Executing: symind_space_no_s = geomButtOrCoin(symind_space_s symIND)

Executing: symind_space_s = geomAndNot(symind_space_s geomOr(am_intern symind_space_no_s))

Executing: am_am_intern = geomSize(geomGetEdge(am butting am_intern) 0.1)

Executing: am_sep_in_out = geomOr(drc(symind_in symind_out (sep <= 75) opposite parallel))

Executing: am_pin_err = geomAndNot(am_am_intern geomAnd(geomInside(am_sep_in_out symIND)...
	   errorLayer(am_pin_err "AM signal wire exiting symetrical inductor straddling metal coil outside the pin")

Executing: m2_butt_symind = geomSize(geomGetEdge(m2 butting symIND) 0.1)

Executing: ct_m2_pin_err = geomButtOrCoin(m2_butt_symind symind_ct)
	   errorLayer(ct_m2_pin_err "Center tap signal wire exiting symetrical inductor outside CT pin")

Executing: m4_butt_symind = geomSize(geomGetEdge(m4 butting symIND) 0.1)

Executing: ct_m4_pin_err = geomButtOrCoin(m4_butt_symind symind_ct)
	   errorLayer(ct_m4_pin_err "Center tap signal wire exiting symetrical inductor outside CT pin")

Executing: bondPbb = geomOverlap(bondPad bond_bb_term)

Executing: bondPpc = geomInside(geomOutside(bondPad bond_bb_term) pc)

Executing: bondPm1 = geomStraddle(geomOutside(bondPad geomOr(bond_bb_term bondPpc)) m1)

Executing: VNCAP = geomAnd(VNCAP geomOr(VNCAP_M1 VNCAP_M2 VNCAP_M3 VNCAP_M4 VNCAP_MT))

Executing: VNCAP_new = geomSize(VNCAP -0.4)

Executing: vncap_gap = geomOr(geomAndNot(VNCAP_M1 m1) geomAndNot(VNCAP_M2 m2) geomAndNot...

Executing: nw_vncap = geomInside(VNCAP nw)

Executing: bb_vncap = geomInside(VNCAP bb)

Executing: sub_vncap = geomAndNot(VNCAP geomOr(nw_vncap bb_vncap))

Executing: vncap_edge = geomAndNot(VNCAP geomSize(VNCAP -0.1))

Executing: vncap_sides = geomSize(geomGetEdge(VNCAP) 0.1)

Executing: vncap_edge2 = geomButting(vncap_sides geomSize(geomGetEdge(VNCAP coincident v...

Executing: vncap_L_edge = geomSize(geomGetEdge(VNCAP butting vncap_edge2) -0.1)

Executing: VNCAP = geomAndNot(VNCAP VNCAP_HV)

Executing: vncap_top1 = geomInside(geomOutside(VNCAP_M1 VNCAP_M2) VNCAP)

Executing: vncap_top1_hv = geomInside(geomOutside(VNCAP_M1 VNCAP_M2) VNCAP_HV)

Executing: vncap_topt = geomInside(geomOr(VNCAP_MT) VNCAP)

Executing: vncap_topt_hv = geomInside(geomOr(VNCAP_MT) VNCAP_HV)

Executing: vncap_top2 = geomInside(geomOutside(VNCAP_M2 VNCAP_M3) VNCAP)

Executing: vncap_top2_hv = geomInside(geomOutside(VNCAP_M2 VNCAP_M3) VNCAP_HV)

Executing: vncap_top3 = geomInside(geomOutside(VNCAP_M3 VNCAP_M4) VNCAP)

Executing: vncap_top3_hv = geomInside(geomOutside(VNCAP_M3 VNCAP_M4) VNCAP_HV)

Executing: vncap_top4 = geomInside(geomOutside(VNCAP_M4 VNCAP_MT) VNCAP)

Executing: vncap_top4_hv = geomInside(geomOutside(VNCAP_M4 VNCAP_MT) VNCAP_HV)

Executing: vncap_bot4 = geomOutside(VNCAP_M4 VNCAP_M3)

Executing: vncap_bot3 = geomOutside(VNCAP_M3 VNCAP_M2)

Executing: vncap_bot2 = geomOutside(VNCAP_M2 VNCAP_M1)

Executing: vncap_bott = geomOutside(VNCAP_MT VNCAP_M4)

Executing: vncap_bot1 = geomOr(VNCAP_M1)

Executing: vncap_termt = geomAnd(geomAnd(geomOr(vncap_topt vncap_topt_hv) mt) vncap_edge)

Executing: vncap_term1 = geomAnd(geomAnd(geomOr(vncap_top1 vncap_top1_hv) m1) vncap_edge)

Executing: vncap_term2 = geomAnd(geomAnd(geomOr(vncap_top2 vncap_top2_hv) m2) vncap_edge)

Executing: vncap_term3 = geomAnd(geomAnd(geomOr(vncap_top3 vncap_top3_hv) m3) vncap_edge)

Executing: vncap_term4 = geomAnd(geomAnd(geomOr(vncap_top4 vncap_top4_hv) m4) vncap_edge)

Executing: vncap_via1 = geomOr(vncap_term1)

Executing: vncap_viat = geomOr(vncap_termt)

Executing: vncap_via2 = geomOr(vncap_term2)

Executing: vncap_via3 = geomOr(vncap_term3)

Executing: vncap_via4 = geomOr(vncap_term4)

Executing: VNCAP = geomAndNot(VNCAP VNCAP_HV)

Executing: vncap_tnw1 = geomInside(geomInside(vncap_top1 nw) VNCAP)

Executing: vncap_top1 = geomInside(geomOutside(vncap_top1 vncap_tnw1) VNCAP)

Executing: vncap_tnwt = geomInside(vncap_topt nw)

Executing: vncap_topt = geomOutside(vncap_topt vncap_tnwt)

Executing: vncap_tnw1_hv = geomInside(geomInside(vncap_top1_hv nw) VNCAP_HV)

Executing: vncap_top1_hv = geomInside(geomOutside(vncap_top1_hv vncap_tnw1_hv) VNCAP_HV)

Executing: vncap_tnwt_hv = geomInside(vncap_topt_hv nw)

Executing: vncap_topt_hv = geomOutside(vncap_topt_hv vncap_tnwt_hv)

Executing: vncap_tnw2 = geomInside(vncap_top2 nw)

Executing: vncap_top2 = geomOutside(vncap_top2 vncap_tnw2)

Executing: vncap_tnw2_hv = geomInside(vncap_top2_hv nw)

Executing: vncap_top2_hv = geomOutside(vncap_top2_hv vncap_tnw2_hv)

Executing: vncap_tnw3 = geomInside(geomInside(vncap_top3 nw) VNCAP)

Executing: vncap_top3 = geomInside(geomOutside(vncap_top3 vncap_tnw3) VNCAP)

Executing: vncap_tnw3_hv = geomInside(geomInside(vncap_top3_hv nw) VNCAP_HV)

Executing: vncap_top3_hv = geomInside(geomOutside(vncap_top3_hv vncap_tnw3_hv) VNCAP_HV)

Executing: vncap_tnw4 = geomInside(geomInside(vncap_top4 nw) VNCAP)

Executing: vncap_top4 = geomInside(geomOutside(vncap_top4 vncap_tnw4) VNCAP)

Executing: vncap_tnw4_hv = geomInside(geomInside(vncap_top4_hv nw) VNCAP_HV)

Executing: vncap_top4_hv = geomInside(geomOutside(vncap_top4_hv vncap_tnw4_hv) VNCAP_HV)

Executing: transmission = geomAnd(transmission1 geomSize(drc(transmission1 ((0.28 < widt...

Executing: amTerm = geomOr(geomOutside(amTerm transmission) geomAnd(amTerm transmission))

Executing: mtTerm = geomOr(geomOutside(mtTerm transmission) geomAnd(mtTerm transmission))

Executing: m2Term = geomOr(geomOutside(m2Term transmission) geomAnd(m2Term transmission))

Executing: m3Term = geomOr(geomOutside(m3Term transmission) geomAnd(m3Term transmission))

Executing: m4Term = geomOr(geomOutside(m4Term transmission) geomAnd(m4Term transmission))

Executing: allPins = geomOr(geomOr(geomOr(geomOr(amTerm mtTerm) m4Term) m3Term) m2Term)

Executing: singleEnd2 = geomStraddle(transmission m2Term (keep == 2))

Executing: coupled2 = geomStraddle(transmission m2Term (keep == 4))

Executing: singleEnd3 = geomStraddle(transmission m3Term (keep == 2))

Executing: coupled3 = geomStraddle(transmission m3Term (keep == 4))

Executing: singleEnd4 = geomStraddle(transmission m4Term (keep == 2))

Executing: coupled4 = geomStraddle(transmission m4Term (keep == 4))

Executing: singleEndT = geomStraddle(transmission mtTerm (keep == 2))

Executing: coupledT = geomStraddle(transmission mtTerm (keep == 4))

Executing: singleEndA = geomStraddle(transmission amTerm (keep == 2))

Executing: coupledA = geomStraddle(transmission amTerm (keep == 4))

Executing: am_coupled = geomAnd(am coupledA)

Executing: am_single = geomAnd(am singleEndA)

Executing: am_shield = geomOverlap(geomAvoiding(geomOr(am_coupled am_single) amTerm) ft)

Executing: am_signal = geomOverlap(geomOr(am_coupled am_single) amTerm)

Executing: am = geomOr(geomAndNot(am am_signal) amTerm)

Executing: am_err = geomOr(geomCoincident(geomAndNot(am_signal amTerm) geomOr(coupledA s...
	   errorLayer(am_err "AM signal wire not exiting transmission line at port, shorted, or open")

Executing: trans_va_am = geomGetTexted(amTerm OUT_label "va")

Executing: trans_vb_am = geomGetTexted(amTerm OUT_label "vb")

Executing: trans_va1_am = geomGetTexted(amTerm OUT_label "va1")

Executing: trans_va2_am = geomGetTexted(amTerm OUT_label "va2")

Executing: trans_vb1_am = geomGetTexted(amTerm OUT_label "vb1")

Executing: trans_vb2_am = geomGetTexted(amTerm OUT_label "vb2")

Executing: m4_coupled = geomAnd(m4 coupled4)

Executing: m4_single = geomAnd(m4 singleEnd4)

Executing: m4_shield = geomOverlap(geomAvoiding(geomOr(m4_coupled m4_single) m4Term) v3)

Executing: m4_signal = geomOverlap(geomOr(m4_coupled m4_single) m4Term)

Executing: m4 = geomOr(geomAndNot(m4 m4_signal) m4Term)

Executing: m4_err = geomOr(geomCoincident(geomAndNot(m4_signal m4Term) geomOr(coupled4 s...
	   errorLayer(m4_err "M4 signal wire not exiting transmission line at port, shorted, or open")

Executing: trans_va_m4 = geomGetTexted(m4Term OUT_label "va")

Executing: trans_vb_m4 = geomGetTexted(m4Term OUT_label "vb")

Executing: trans_va1_m4 = geomGetTexted(m4Term OUT_label "va1")

Executing: trans_va2_m4 = geomGetTexted(m4Term OUT_label "va2")

Executing: trans_vb1_m4 = geomGetTexted(m4Term OUT_label "vb1")

Executing: trans_vb2_m4 = geomGetTexted(m4Term OUT_label "vb2")

Executing: mt_coupled = geomAnd(mt coupledT)

Executing: mt_single = geomAnd(mt singleEndT)

Executing: mt_signal = geomOverlap(geomOr(mt_coupled mt_single) mtTerm)

Executing: mt = geomOr(geomAndNot(mt mt_signal) mtTerm)

Executing: mt_err = geomOr(geomCoincident(geomAndNot(mt_signal mtTerm) geomOr(coupledT s...
	   errorLayer(mt_err "MT signal wire not exiting transmission line at port, shorted, or open")

Executing: mt_shield = geomOverlap(geomAvoiding(geomOr(mt_coupled mt_single) mtTerm) v4)

Executing: trans_va_mt = geomGetTexted(mtTerm OUT_label "va")

Executing: trans_vb_mt = geomGetTexted(mtTerm OUT_label "vb")

Executing: trans_va1_mt = geomGetTexted(mtTerm OUT_label "va1")

Executing: trans_va2_mt = geomGetTexted(mtTerm OUT_label "va2")

Executing: trans_vb1_mt = geomGetTexted(mtTerm OUT_label "vb1")

Executing: trans_vb2_mt = geomGetTexted(mtTerm OUT_label "vb2")

Executing: m3_coupled = geomAnd(m3 coupled3)

Executing: m3_single = geomAnd(m3 singleEnd3)

Executing: m3_shield = geomOverlap(geomAvoiding(geomOr(m3_coupled m3_single) m3Term) v2)

Executing: m3_signal = geomOverlap(geomOr(m3_coupled m3_single) m3Term)

Executing: m3 = geomOr(geomAndNot(m3 m3_signal) m3Term)

Executing: m3_err = geomOr(geomCoincident(geomAndNot(m3_signal m3Term) geomOr(coupled3 s...
	   errorLayer(m3_err "M3 signal wire not exiting transmission line at port, shorted, or open")

Executing: trans_va_m3 = geomGetTexted(m3Term OUT_label "va")

Executing: trans_vb_m3 = geomGetTexted(m3Term OUT_label "vb")

Executing: trans_va1_m3 = geomGetTexted(m3Term OUT_label "va1")

Executing: trans_va2_m3 = geomGetTexted(m3Term OUT_label "va2")

Executing: trans_vb1_m3 = geomGetTexted(m3Term OUT_label "vb1")

Executing: trans_vb2_m3 = geomGetTexted(m3Term OUT_label "vb2")

Executing: m2_coupled = geomAnd(m2 coupled2)

Executing: m2_single = geomAnd(m2 singleEnd2)

Executing: m2_shield = geomOverlap(geomAvoiding(geomOr(m2_coupled m2_single) m2Term) v1)

Executing: m2_signal = geomOverlap(geomOr(m2_coupled m2_single) m2Term)

Executing: m2 = geomOr(geomAndNot(m2 m2_signal) m2Term)

Executing: m2_err = geomOr(geomCoincident(geomAndNot(m2_signal m2Term) geomOr(coupled2 s...
	   errorLayer(m2_err "M2 signal wire not exiting transmission line at port, shorted, or open")

Executing: trans_va_m2 = geomGetTexted(m2Term OUT_label "va")

Executing: trans_vb_m2 = geomGetTexted(m2Term OUT_label "vb")

Executing: trans_va1_m2 = geomGetTexted(m2Term OUT_label "va1")

Executing: trans_va2_m2 = geomGetTexted(m2Term OUT_label "va2")

Executing: trans_vb1_m2 = geomGetTexted(m2Term OUT_label "vb1")

Executing: trans_vb2_m2 = geomGetTexted(m2Term OUT_label "vb2")

Executing: all_shield = geomOr(am_shield mt_shield m4_shield m3_shield m2_shield)

Executing: all_signal = geomOr(am_signal mt_signal m4_signal m3_signal m2_signal)

Executing: transmission_edges = geomSize(geomGetEdge(transmission over substrate) 0.01)

Executing: transmission_perim = geomAndNot(transmission geomSize(transmission -0.1))

Executing: coupledSpace = geomButting(geomGetRectangle(geomAndNot(geomAnd(transmission_p...

Executing: shieldSpace = geomButting(geomGetRectangle(geomAnd(transmission_perim drc(all...

Executing: signalWidth = geomAnd(transmission_perim allPins)

Executing: shield1 = geomButting(geomAnd(m1 transmission) transmission_edges (keep > 3))

Executing: trans_s1 = geomOr(shield1)

Executing: shield2 = geomButting(geomAnd(m2 transmission) transmission_edges (keep > 3))

Executing: trans_s2 = geomOr(shield2)

Executing: shield3 = geomButting(geomAnd(m3 transmission) transmission_edges (keep > 3))

Executing: trans_s3 = geomOr(shield3)

Executing: shield4 = geomButting(geomAnd(m4 transmission) transmission_edges (keep > 3))

Executing: trans_s4 = geomOr(shield4)

Executing: shieldT = geomButting(geomAnd(mt transmission) transmission_edges (keep > 3))

Executing: trans_sT = geomOr(shieldT)

Executing: amTran = geomOverlap(amTerm transmission)

Executing: mtTran = geomOverlap(mtTerm transmission)

Executing: m4Tran = geomOverlap(m4Term transmission)

Executing: m3Tran = geomOverlap(m3Term transmission)

Executing: m2Tran = geomOverlap(m2Term transmission)

Executing: MIM = geomOutside(qt ht)

Executing: mim_top = geomOverlap(geomAnd(geomOutside(qt ht) am) ft)

Executing: dualtop = geomOverlap(geomAnd(ht am) ft)

Executing: qtblk = geomOr(qt)

Executing: width_label_m_edge = geomSize(geomGetEdge(width_label coincident MIM) 0.1)

Executing: width_label_mim = geomButting(width_label width_label_m_edge (keep == 3))

Executing: MIMHK = geomOverlap(MIM MIMHK)

Executing: MIM = geomAndNot(MIM MIMHK)

Executing: cmim_rev = geomGetTexted(MIM DEVICE_ID_TXT "CMIM-DEVICE")

Executing: cmimhd_rev = geomGetTexted(MIM DEVICE_ID_TXT "CMIMHD-DEVICE")

Executing: MIMpi = geomInside(MIM pi)

Executing: MIMnw = geomInside(MIM nw)

Executing: MIMdn = geomOutside(geomInside(MIM dn) nw)

Executing: MIMsx = geomAndNot(MIM geomOr(MIMnw MIMpi MIMdn))

Executing: MIMhdpi = geomOverlap(geomOverlap(MIMpi mimhd) cmimhd_rev)

Executing: MIMpi = geomOverlap(geomOutside(MIMpi mimhd) cmim_rev)

Executing: MIMhddn = geomOverlap(geomOverlap(MIMdn mimhd) cmimhd_rev)

Executing: MIMdn = geomOverlap(geomOutside(MIMdn mimhd) cmim_rev)

Executing: MIMhdnw = geomOverlap(geomOverlap(MIMnw mimhd) cmimhd_rev)

Executing: MIMnw = geomOverlap(geomOutside(MIMnw mimhd) cmim_rev)

Executing: MIMhdsx = geomOverlap(geomOverlap(MIMsx mimhd) cmimhd_rev)

Executing: MIMsx = geomOverlap(geomOutside(MIMsx mimhd) cmim_rev)

Executing: DUALMIM = geomOr(ht)

Executing: dualcmim_rev = geomGetTexted(DUALMIM DEVICE_ID_TXT "DUALCMIM-DEVICE")

Executing: dualcmimhd_rev = geomGetTexted(DUALMIM DEVICE_ID_TXT "DUALCMIMHD-DEVICE")

Executing: width_label_d_edge = geomSize(geomGetEdge(width_label coincident DUALMIM) 0.1)

Executing: width_label_dmim = geomButting(width_label width_label_d_edge (keep == 3))

Executing: DUALMIMpi = geomInside(DUALMIM pi)

Executing: DUALMIMnw = geomInside(DUALMIM nw)

Executing: DUALMIMdn = geomOutside(geomInside(DUALMIM dn) nw)

Executing: DUALMIMsx = geomAndNot(DUALMIM geomOr(DUALMIMnw DUALMIMpi DUALMIMdn))

Executing: DUALMIMhdpi = geomOverlap(geomOverlap(DUALMIMpi mimhd) dualcmimhd_rev)

Executing: DUALMIMpi = geomOverlap(geomOutside(DUALMIMpi mimhd) dualcmim_rev)

Executing: DUALMIMhddn = geomOverlap(geomOverlap(DUALMIMdn mimhd) dualcmimhd_rev)

Executing: DUALMIMdn = geomOverlap(geomOutside(DUALMIMdn mimhd) dualcmim_rev)

Executing: DUALMIMhdnw = geomOverlap(geomOverlap(DUALMIMnw mimhd) dualcmimhd_rev)

Executing: DUALMIMnw = geomOverlap(geomOutside(DUALMIMnw mimhd) dualcmim_rev)

Executing: DUALMIMhdsx = geomOverlap(geomOverlap(DUALMIMsx mimhd) dualcmimhd_rev)

Executing: DUALMIMsx = geomOverlap(geomOutside(DUALMIMsx mimhd) dualcmim_rev)

Executing: bb_mim = geomAnd(geomOr(MIM MIMHK DUALMIM) bb)

Executing: sub_mim = geomAndNot(geomOr(MIM MIMHK DUALMIM) bb_mim)

Executing: dualmid = geomAnd(geomAndNot(qt ht) mt)

Executing: dualbot = geomAnd(qt mt)

Executing: mimVtop = geomAnd(mim_top ft)

Executing: mimVbot = geomAnd(mim_bot ft)

Executing: duaVtop = geomAnd(dualtop ft)

Executing: duaVmid = geomAnd(dualmid ft)

Executing: duaVbot = geomAnd(dualbot ft)

Executing: errorLayer(geomOutside(ht ft) "No FT via over HT")

Executing: errorLayer(geomOutside(qt ft) "No FT via over QT")

Executing: ft = geomAndNot(ft qt)

Executing: k1_via = geomSize(geomSize(geomAnd(v1 k1) 0.5) -0.5)

Executing: v1 = geomAndNot(v1 k1)

Executing: k1_term = geomOr(k1_via drc(k1 k1_via (enc < 1.6) opposite))

Executing: k1_dev = geomAndNot(k1 k1_term)

Executing: k1_dev = geomButting(k1_dev k1_via (keep > 1))

Executing: k1_dev_bb = geomInside(k1_dev bb)

Executing: k1_dev_sx = geomOutside(k1_dev bb)

Executing: k1_model = geomOverlap(k1 geomOr(m1 rx pc))
	   errorLayer(k1_model "MODEL concern - K1 resistor not totally over STI substrate")

Executing: k1_dev_err = geomAnd(k1_dev geomOr(rxhv sn dp sp))
	   errorLayer(k1_dev_err "K1 resistor device touching rxhv sn dp sp")

Executing: sub_diff_RF = geomAnd(geomOverlap(geomAndNot(pdiff nw) geomOr(ca butt_rxp)) RF)

Executing: RF_via = geomAnd(RF_BULK sub_diff_RF)

Executing: ca1 = geomAnd(ca geomOr(ntie_in_sp_top ntie_top ptie_top sub_diff))

Executing: ca2 = geomAnd(ca geomOr(nfRF_drain nfRF_source DI_anode DI_cathode DI_coll))

Executing: ca3 = geomAnd(ca geomOr(efuse_anod efuse_cath DIPI_anode DIPI_cathode DIPI_nw...

Executing: ca4 = geomAnd(ca geomOr(pc pfet_sd nfet_sd nf_drain nf_source pf_drain pf_sou...

Executing: ca41 = geomAnd(ca geomOr(pc esdnsh_drain esdnsh_source esdpsh_drain esdpsh_so...

Executing: ca5 = geomAnd(ca geomOr(res6pc_term pdiff_tie ndiff_tie res6n_term res6p_term))

Executing: ca6 = geomAnd(ca geomOr(nwell_diff sub_diff_top sub_diff_RF ESD_pdnw_subc SBD...

Executing: ca7 = geomAnd(ca geomOr(pwell_diff pfRF_drain pfRF_source SBD_C bb_ndiffs))

Executing: ca8 = geomAnd(ca geomOr(mosvar_pc mosvar_rx hvr_cath hvr_anod pcap_pc pcap_rx))

Executing: ca9 = geomAnd(ca geomOr(ncap_pc ncap_rx ncap_ndiff ESD_ndsx_minus))

Executing: ca10 = geomAnd(ca geomOr(nfHV_sd nfHV_drain nfHV_source pfHV_sd pfHV_drain pf...

Executing: ca11 = geomAnd(ca geomOr(vnpn_base vnpn_emit vnpn_coll vpnp_base vpnp_emit vp...

Executing: ca12 = geomAnd(ca geomOr(ndiff_in_sp esd_hv_cath esd_tdi_50_anod esd_tdi_anod...

Executing: ca13 = geomAnd(ca geomOr(nfHV_mh_drain nfHV_mh_source pjfet_sd pjfet_g))

Executing: nd_comx = geomAndNot(geomBkgnd() geomNot(nfet_sd))

Executing: pd_comx = geomAndNot(geomBkgnd() geomNot(pfet_sd))

Executing: nd_fet = geomButting(nd_comx nfet_gate)

Executing: pd_fet = geomButting(pd_comx pfet_gate)

Executing: nd_tie = geomSize(ndiff_tie -0.03)

Executing: nd_tie_via = geomOr(nd_tie)

Executing: nd_tie_sp = geomSize(ndiff_in_sp -0.03)

Executing: nd_tie_sp_via = geomOr(nd_tie_sp)

Executing: pd_tie = geomSize(pdiff_tie -0.03)

Executing: pd_tie_via = geomOr(pd_tie)

Executing: nd_comp = geomAndNot(geomBkgnd() geomNot(geomAnd(nd_comx geomOr(drc(geomSize(...

Executing: pd_comp = geomAndNot(geomBkgnd() geomNot(geomAnd(pd_comx geomOr(drc(geomSize(...

Executing: nd_via = geomAnd(nfet_sd nd_comp)

Executing: pd_via = geomAnd(pfet_sd pd_comp)

Executing: nd_scx = geomAndNot(geomBkgnd() geomNot(nf_source))

Executing: nd_drx = geomAndNot(geomBkgnd() geomNot(nf_drain))

Executing: nd_fet_sc = geomButting(nd_scx nfet_gate)

Executing: nd_fet_dr = geomButting(nd_drx nfet_gate)

Executing: nd_comp_sc = geomAndNot(geomBkgnd() geomNot(geomAnd(nd_scx geomOr(drc(geomSiz...

Executing: nd_comp_dr = geomAndNot(geomBkgnd() geomNot(geomAnd(nd_drx geomOr(drc(geomSiz...

Executing: nd_via_sc = geomAnd(nf_source nd_comp_sc)

Executing: nd_via_dr = geomAnd(nf_drain nd_comp_dr)

Executing: pd_scx = geomAndNot(geomBkgnd() geomNot(pf_source))

Executing: pd_drx = geomAndNot(geomBkgnd() geomNot(pf_drain))

Executing: pd_fet_sc = geomButting(pd_scx pfet_gate)

Executing: pd_fet_dr = geomButting(pd_drx pfet_gate)

Executing: pd_comp_sc = geomAndNot(geomBkgnd() geomNot(geomAnd(pd_scx geomOr(drc(geomSiz...

Executing: pd_comp_dr = geomAndNot(geomBkgnd() geomNot(geomAnd(pd_drx geomOr(drc(geomSiz...

Executing: pd_via_sc = geomAnd(pf_source pd_comp_sc)

Executing: pd_via_dr = geomAnd(pf_drain pd_comp_dr)

Executing: ndRF_scx = geomAndNot(geomBkgnd() geomNot(nfRF_source))

Executing: ndRF_drx = geomAndNot(geomBkgnd() geomNot(nfRF_drain))

Executing: ndRF_fet_sc = geomButting(ndRF_scx nfet_gate)

Executing: ndRF_fet_dr = geomButting(ndRF_drx nfet_gate)

Executing: ndRF_comp_sc = geomAndNot(geomBkgnd() geomNot(geomAnd(ndRF_scx geomOr(drc(geo...

Executing: ndRF_comp_dr = geomAndNot(geomBkgnd() geomNot(geomAnd(ndRF_drx geomOr(drc(geo...

Executing: ndRF_via_sc = geomAnd(nfRF_source ndRF_comp_sc)

Executing: ndRF_via_dr = geomAnd(nfRF_drain ndRF_comp_dr)

Executing: pdRF_scx = geomAndNot(geomBkgnd() geomNot(pfRF_source))

Executing: pdRF_drx = geomAndNot(geomBkgnd() geomNot(pfRF_drain))

Executing: pdRF_fet_sc = geomButting(pdRF_scx pfet_gate)

Executing: pdRF_fet_dr = geomButting(pdRF_drx pfet_gate)

Executing: pdRF_comp_sc = geomAndNot(geomBkgnd() geomNot(geomAnd(pdRF_scx geomOr(drc(geo...

Executing: pdRF_comp_dr = geomAndNot(geomBkgnd() geomNot(geomAnd(pdRF_drx geomOr(drc(geo...

Executing: pdRF_via_sc = geomAnd(pfRF_source pdRF_comp_sc)

Executing: pdRF_via_dr = geomAnd(pfRF_drain pdRF_comp_dr)

Executing: FET_mul_drain = geomOr(nd_comp_dr pd_comp_dr)

Executing: FET_mul_source = geomOr(nd_comp_sc pd_comp_sc)

Executing: FET_RF_drain = geomOr(ndRF_comp_dr pdRF_comp_dr)

Executing: FET_RF_source = geomOr(ndRF_comp_sc pdRF_comp_sc)

Executing: ALL_FET_SD = geomOr(FET_mul_drain FET_mul_source FET_RF_drain FET_RF_source)

Executing: m1LV = geomGetTexted(m1 LV_NET "low_voltage_net")

Executing: pcLV = geomGetTexted(pc LV_NET "low_voltage_net")

Executing: m1LVCon = geomOr(m1LV)

Executing: pcLVCon = geomOr(pcLV)

Executing: LVgate = geomAndNot(Gate geomOr(dg tg))

Executing: LVgateCon = geomOr(LVgate)

Executing: fetDiff = geomOr(ndRF_comp_sc ndRF_comp_dr pdRF_comp_dr pdRF_comp_sc nfet_sd ...

Executing: HVdiff = geomAnd(geomOr(fetDiff) geomOr(dg tg))

Executing: HVdiffCon = geomOr(HVdiff)

Executing: RXHVdiff = geomOr(nfHV_sd nfHV_drain nfHV_source nfHV_mh_drain nfHV_mh_source...

Executing: RXHVdiffCon = geomOr(RXHVdiff)

Executing: fet1v8_pc_model = geomSize(geomOr(nfet_dev nfet_dev_b nfet_mul nfeti_dev nfet...

Executing: fetshvt_pc_model = geomSize(geomOr(nfet_dev_SHVT nfet_mul_SHVT nfet_dev_SHVT_...

Executing: fet5v_pc_model = geomSize(geomOr(nfet_dev_TG nfet_mul_TG nfeti_dev_TG nfeti_d...

Executing: RfDevice_pc_model = geomAnd(geomButtOrOver(pc Gate) geomSize(RF 0.18))

Executing: rcxLayer(RfDevice_pc_model)

Executing: vncap_pc_model = geomOr(VNCAP_PC)

Executing: rcxLayer(vncap_pc_model)

Executing: bondpad_rect = geomOverlap(geomGetRectangle(PAD_DEV) geomOr(bondPpc bondPm1))

Executing: bondpad_poly = geomOverlap(geomGetBBox(geomAndNot(PAD_DEV bondpad_rect)) geom...

Executing: all_bondpad = geomSize(geomOr(bondpad_rect bondpad_poly) 5.18)

Executing: bondpad_pc_model = geomOverlap(all_bondpad bondPpc)

Executing: rcxLayer(bondpad_pc_model)

Executing: bondpad_m1_model = geomOr(geomOverlap(all_bondpad bondPm1) geomOverlap(geomAn...

Executing: rcxLayer(bondpad_m1_model)

Executing: RfDevice_m1_model = geomAnd(m1 geomSize(RF 0.18))

Executing: rcxLayer(RfDevice_m1_model)

Executing: wire_m1_model = geomSize(shield1 0.02)

Executing: vncap_m1_model = geomAnd(geomOr(vncap_tnw1 vncap_tnw1_hv vncap_top1 vncap_top...

Executing: rcxLayer(vncap_m1_model)

Executing: sbd_m1_model = geomAnd(m1 geomSize(SBD -1.02))

Executing: divpnp_m1_model = geomAnd(m1 DI_VPNP)

Executing: dindpw_m1_model = geomAnd(m1 geomSize(DIPI_diode 0.42))

Executing: pcdcap_m1_model = geomAnd(m1 geomSize(geomOr(pcdcapt_dev ncap_dev) 0.9))

Executing: mosvar_pcap_pc_model = geomOr(pcap_pc mosvar_pc)

Executing: mosvar_pcap_m1_model = geomAnd(m1 MOSvar)

Executing: nfet20hs_m1_model = geomSize(geomOverlap(rxhv nfet20hs_dev) 0.42)

Executing: nfet20mh_m1_model = geomSize(geomOverlap(rxhv nfet20mh_dev) 0.42)

Executing: nfet50hs_m1_model = geomSize(geomOverlap(rxhv nfet50hs_dev) 0.42)

Executing: pfet20hs_m1_model = geomSize(geomOverlap(rxhv pfet20hs_dev) 7.17)

Executing: pfet50hs_m1_model = geomSize(geomOverlap(rxhv pfet50hs_dev) 7.17)

Executing: nfeti20h_m1_model = geomSize(geomOverlap(rxhv nfeti20h_dev) 9.38)

Executing: nfeti20t_m1_model = geomSize(geomOverlap(rxhv nfeti20t_dev) 9.38)

Executing: nfeti25m_m1_model = geomSize(geomOverlap(rxhv nfeti25m_dev) 9.34)

Executing: nfeti50h_m1_model = geomSize(geomOverlap(rxhv nfeti50h_dev) 9.38)

Executing: nfeti50m_m1_model = geomSize(geomOverlap(rxhv nfeti50m_dev) 9.34)

Executing: nfeti50t_m1_model = geomSize(geomOverlap(rxhv nfeti50t_dev) 9.34)

Executing: pfet20h_m1_model = geomSize(geomOverlap(rxhv pfet20h_dev) 8.38)

Executing: pfet20t_m1_model = geomSize(geomOverlap(rxhv pfet20t_dev) 8.32)

Executing: pfet25m_m1_model = geomSize(geomOverlap(rxhv pfet25m_dev) 8.32)

Executing: pfet50h_m1_model = geomSize(geomOverlap(rxhv pfet50h_dev) 8.32)

Executing: pfet50m_m1_model = geomSize(geomOverlap(rxhv pfet50m_dev) 8.32)

Executing: pfet50t_m1_model = geomSize(geomOverlap(rxhv pfet50t_dev) 8.32)

Executing: HV_fet_m1_model = geomOr(nfet20hs_m1_model nfet20mh_m1_model nfet50hs_m1_mode...

Executing: rcxLayer(HV_fet_m1_model)

Executing: hvpwres_m1_model = geomSize(geomOverlap(rxhv hvpwres_dev) 6.85)

Executing: hvnwres_m1_model = geomSize(geomOverlap(rxhv hvnwres_dev) 0.42)

Executing: HV_res_m1_model = geomOr(hvpwres_m1_model hvnwres_m1_model)

Executing: rcxLayer(HV_res_m1_model)

Executing: vnpn_m1_model = geomSize(geomOverlap(rxhv vnpn_dev) 8.02)

Executing: vpnp_m1_model = geomSize(geomOverlap(rxhv vpnp_dev) 7.42)

Executing: HV_bipolar_m1_model = geomOr(vpnp_m1_model vnpn_m1_model)

Executing: rcxLayer(HV_bipolar_m1_model)

Executing: HV_esd_m1_model = geomOr(geomSize(geomOr(esdfdi25_dev esdfdi50_dev) 5.5) geom...

Executing: pjfet_m1_model = geomSize(geomOverlap(rxhv pjfet_dev) 1.8)

Executing: rcxLayer(pjfet_m1_model)

Executing: cmim_mt_model = geomOr(geomSize(qt 1.0) geomSize(geomOutside(mimhd ht) 0.4))

Executing: dualcmim_mt_model = geomOr(geomSize(ht 7.24) geomSize(geomOverlap(mimhd ht) 2...

Executing: dualcmim_am_model = geomAnd(geomOverlap(am geomAnd(dualcmim_mt_model ft)) geo...

Executing: rcxLayer(dualcmim_am_model)

Executing: RfDevice_m2_model = geomAnd(geomOverlap(m2 geomAnd(v1 RfDevice_m1_model)) geo...

Executing: rcxLayer(RfDevice_m2_model)

Executing: wire_m2_model = geomSize(geomOr(shield1 shield2) 0.02)

Executing: vncap_m2_model = geomAnd(geomOr(vncap_tnw2 vncap_tnw2_hv vncap_top2 vncap_top...

Executing: rcxLayer(vncap_m2_model)

Executing: vncap_m2m1_model = geomAnd(geomOr(vncap_tnw2 vncap_tnw2_hv vncap_top2 vncap_t...

Executing: rcxLayer(vncap_m2m1_model)

Executing: wire_m3_model = geomSize(geomOr(shield1 shield2 shield3) 0.02)

Executing: vncap_m3_model = geomAnd(geomOr(vncap_tnw3 vncap_tnw3_hv vncap_top3 vncap_top...

Executing: rcxLayer(vncap_m3_model)

Executing: vncap_m3m2_model = geomAnd(geomOr(vncap_tnw3 vncap_tnw3_hv vncap_top3 vncap_t...

Executing: rcxLayer(vncap_m3m2_model)

Executing: vncap_m3m1_model = geomAnd(geomOr(vncap_tnw3 vncap_tnw3_hv vncap_top3 vncap_t...

Executing: rcxLayer(vncap_m3m1_model)

Executing: wire_m4_model = geomSize(geomOr(shield1 shield2 shield3 shield4) 0.02)

Executing: vncap_m4_model = geomAnd(geomOr(vncap_tnw4 vncap_tnw4_hv vncap_top4 vncap_top...

Executing: rcxLayer(vncap_m4_model)

Executing: vncap_m4m3_model = geomAnd(geomOr(vncap_tnw4 vncap_tnw4_hv vncap_top4 vncap_t...

Executing: rcxLayer(vncap_m4m3_model)

Executing: vncap_m4m2_model = geomAnd(geomOr(vncap_tnw4 vncap_tnw4_hv vncap_top4 vncap_t...

Executing: rcxLayer(vncap_m4m2_model)

Executing: vncap_m4m1_model = geomAnd(geomOr(vncap_tnw4 vncap_tnw4_hv vncap_top4 vncap_t...

Executing: rcxLayer(vncap_m4m1_model)

Executing: wire_mt_model = geomSize(geomOr(shield1 shield2 shield3 shield4 shieldT) 0.02)

Executing: vncap_mt_model = geomAnd(geomOr(vncap_tnwt vncap_tnwt_hv vncap_topt vncap_top...

Executing: rcxLayer(vncap_mt_model)

Executing: vncap_mtm4_model = geomAnd(geomOr(vncap_tnwt vncap_tnwt_hv vncap_topt vncap_t...

Executing: rcxLayer(vncap_mtm4_model)

Executing: vncap_mtm3_model = geomAnd(geomOr(vncap_tnwt vncap_tnwt_hv vncap_topt vncap_t...

Executing: rcxLayer(vncap_mtm3_model)

Executing: vncap_mtm2_model = geomAnd(geomOr(vncap_tnwt vncap_tnwt_hv vncap_topt vncap_t...

Executing: rcxLayer(vncap_mtm2_model)

Executing: vncap_mtm1_model = geomAnd(geomOr(vncap_tnwt vncap_tnwt_hv vncap_topt vncap_t...

Executing: rcxLayer(vncap_mtm1_model)

Executing: pc_device_blockage = geomOr(fetshvt_pc_model mosvar_pcap_pc_model fet1v8_pc_m...

Executing: pc_model = geomAnd(pc pc_device_blockage)

Executing: pc_resistive = geomAndNot(pc pc_model)

Executing: m1_device_blockage = geomOr(pcdcap_m1_model dindpw_m1_model wire_m1_model m1_...

Executing: m1_model = geomAnd(m1 m1_device_blockage)

Executing: m1_resistive = geomAndNot(m1 m1_model)

Executing: m2_device_blockage = geomOr(RfDevice_m2_model k1_term VNCAP_M2 wire_m2_model)

Executing: m2_model = geomAnd(m2 m2_device_blockage)

Executing: m2_resistive = geomAndNot(m2 m2_model)

Executing: m3_device_blockage = geomOr(VNCAP_M3 wire_m3_model)

Executing: m3_model = geomAnd(m3 m3_device_blockage)

Executing: m3_resistive = geomAndNot(m3 m3_model)

Executing: m4_device_blockage = geomOr(VNCAP_M4 wire_m4_model)

Executing: m4_model = geomAnd(m4 m4_device_blockage)

Executing: m4_resistive = geomAndNot(m4 m4_model)

Executing: mt_device_blockage = geomOr(VNCAP_MT cmim_mt_model dualcmim_mt_model wire_mt_...

Executing: mt_model = geomAnd(mt mt_device_blockage)

Executing: mt_resistive = geomAndNot(mt mt_model)

Executing: pc_columbus = geomOr(pc_model)

Executing: m1_columbus = geomOr(m1_model)

Executing: mt_columbus = geomOr(mt_model)

Executing: m2_columbus = geomOr(m2_model)

Executing: m3_columbus = geomOr(m3_model)

Executing: m4_columbus = geomOr(m4_model)

Executing: geomConnect((via vncap_via1 m1_model m1_resistive vncap_term1) (via vncap_via...
 See the label report in "myrun.erc" file for details.


Executing: geomHoles(nw)

Executing: nw_ring = geomButting(nw nw_hole)

Executing: NWbias_device = geomOr(pfet20t_dev pfet50t_dev pfet_gate VPNPnw ESD_nw DI_dio...

Executing: TWbias_device = geomOr(ESD_ndsx_dn res6n_3_dev res6n_5_dev hvpwres_dev ntie_d...

Executing: nw_ring = geomAndNot(nw_ring geomButting(nw_ring geomOverlap(nw_hole TWbias_d...

Executing: nw_ring = geomAndNot(nw_ring geomOverlap(nw_ring NWbias_device))

Executing: nw_ring = geomCat(nw_ring)

Executing: geomStamp(nw_ring nwell_diff multConnect "nw_StampErrorConnect" majority)

Executing: nw_StampErrorFloat = geomOutside(nw_ring nwell_diff)
	   errorLayer(nw_StampErrorFloat "nw_StampErrorFloat")

Executing: nw_StampErrorMult = geomOverlap(nw_ring nw_StampErrorConnect)
	   errorLayer(nw_StampErrorMult "nw_StampErrorMult")

Executing: bb = geomCat(bb)

Executing: geomStamp(bb bb_ndiffs multConnect "bb_StampErrorConnect" majority)

Executing: bb_StampErrorMult = geomOverlap(bb bb_StampErrorConnect)
	   errorLayer(bb_StampErrorMult "bb_StampErrorMult")

Executing: nw = geomCat(nw)

Executing: geomStamp(nw nwell_diff multConnect "nw_StampErrorConnect" majority)

Executing: nw_StampErrorFloat = geomOutside(nw nwell_diff)
	   errorLayer(nw_StampErrorFloat "nw_StampErrorFloat")

Executing: nw_StampErrorMult = geomOverlap(nw nw_StampErrorConnect)
	   errorLayer(nw_StampErrorMult "nw_StampErrorMult")

Executing: sn = geomCat(sn)

Executing: geomStamp(sn nwell_diff multConnect "sn_StampErrorConnect" majority)

Executing: sn_StampErrorFloat = geomOutside(sn nwell_diff)
	   errorLayer(sn_StampErrorFloat "sn_StampErrorFloat")

Executing: sn_StampErrorMult = geomOverlap(sn sn_StampErrorConnect)
	   errorLayer(sn_StampErrorMult "sn_StampErrorMult")

Executing: rn = geomCat(rn)

Executing: geomStamp(rn nwell_diff multConnect "rn_StampErrorConnect" majority)

Executing: rn_StampErrorFloat = geomOutside(rn nwell_diff)
	   errorLayer(rn_StampErrorFloat "rn_StampErrorFloat")

Executing: rn_StampErrorMult = geomOverlap(rn rn_StampErrorConnect)
	   errorLayer(rn_StampErrorMult "rn_StampErrorMult")

Executing: ncap_nw = geomCat(ncap_nw)

Executing: geomStamp(ncap_nw ncap_ndiff multConnect "ncap_nw_StampErrorConnect" majority)

Executing: ncap_nw_StampErrorFloat = geomOutside(ncap_nw ncap_ndiff)
	   errorLayer(ncap_nw_StampErrorFloat "ncap_nw_StampErrorFloat")

Executing: ncap_nw_StampErrorMult = geomOverlap(ncap_nw ncap_nw_StampErrorConnect)
	   errorLayer(ncap_nw_StampErrorMult "ncap_nw_StampErrorMult")

Executing: DIPI_nw = geomCat(DIPI_nw)

Executing: geomStamp(DIPI_nw DIPI_nw_diff multConnect "DIPI_nw_StampErrorConnect" majority)

Executing: DIPI_nw_StampErrorFloat = geomOutside(DIPI_nw DIPI_nw_diff)
	   errorLayer(DIPI_nw_StampErrorFloat "DIPI_nw_StampErrorFloat")

Executing: DIPI_nw_StampErrorMult = geomOverlap(DIPI_nw DIPI_nw_StampErrorConnect)
	   errorLayer(DIPI_nw_StampErrorMult "DIPI_nw_StampErrorMult")

Executing: well = geomCat(sn nw rn)

Executing: geomStamp(well nwell_diff multConnect "well_StampErrorConnect" majority)

Executing: well_StampErrorFloat = geomOutside(well nwell_diff)
	   errorLayer(well_StampErrorFloat "well_StampErrorFloat")

Executing: well_StampErrorMult = geomOverlap(well well_StampErrorConnect)
	   errorLayer(well_StampErrorMult "well_StampErrorMult")

Executing: pi_bottom_iso = geomCat(pi_bottom_iso)

Executing: geomStamp(pi_bottom_iso nw multConnect "pi_StampErrorConnect" majority)

Executing: pi_StampErrorFloat = geomOutside(pi_bottom_iso nw)
	   errorLayer(pi_StampErrorFloat "pi_StampErrorFloat")

Executing: pi_StampErrorMult = geomOverlap(pi_bottom_iso pi_StampErrorConnect)
	   errorLayer(pi_StampErrorMult "pi_StampErrorMult")

Executing: dn_bottom_iso = geomCat(dn_bottom_iso)

Executing: geomStamp(dn_bottom_iso well multConnect "dn_StampErrorConnect" majority)

Executing: dn_StampErrorFloat = geomOutside(dn_bottom_iso geomOr(well DIPI_nw))
	   errorLayer(dn_StampErrorFloat "dn_StampErrorFloat")

Executing: dn_StampErrorMult = geomOverlap(dn_bottom_iso geomOr(dn_StampErrorConnect))
	   errorLayer(dn_StampErrorMult "dn_StampErrorMult")

Executing: sbdi_dn = geomCat(sbdi_dn)

Executing: geomStamp(sbdi_dn well multConnect "sbdi_dn_StampErrorConnect" majority)

Executing: sbdi_dn_StampErrorFloat = geomOutside(sbdi_dn well)
	   errorLayer(sbdi_dn_StampErrorFloat "sbdi_dn_StampErrorFloat")

Executing: sbdi_dn_StampErrorMult = geomOverlap(sbdi_dn geomOr(sbdi_dn_StampErrorConnect))
	   errorLayer(sbdi_dn_StampErrorMult "sbdi_dn_StampErrorMult")

Executing: pwell = geomCat(pwell)

Executing: geomStamp(pwell pwell_diff multConnect "pwell_StampErrorConnect" majority)

Executing: pwell_StampErrorFloat = geomOutside(pwell pwell_diff)
	   errorLayer(pwell_StampErrorFloat "pwell_StampErrorFloat")

Executing: pwell_StampErrorMult = geomOverlap(pwell pwell_StampErrorConnect)
	   errorLayer(pwell_StampErrorMult "pwell_StampErrorMult")

Executing: geomStamp(substrate_ptap sub_diff multConnect "substrate_ptap_StampErrorCon" majority)

Executing: geomStamp(substrate substrate_ptap multConnect "substrate_StampErrorCon" majority)

Executing: geomStamp(subs_sti substrate multConnect "sub_nti_StampErrorCon" majority)

Executing: mixed_voltage_net = geomNodeRelate(LVgate HVdiff conn)

Executing: mixed_voltage_OK_M1 = geomNodeRelate(LVgate m1LV conn)

Executing: mixed_voltage_OK_PC = geomNodeRelate(LVgate pcLV conn)

Executing: mixed_voltage_net_err = geomAndNot(mixed_voltage_net geomOr(mixed_voltage_OK_...
	   errorLayer(mixed_voltage_net_err "Mixed voltage net found : 3V3 or 5V diffusion is connected to 1.8V gate")

Executing: HVmixed_voltage_net = geomNodeRelate(Gate RXHVdiff conn)

Executing: HVmixed_voltage_OK_M1 = geomNodeRelate(Gate m1LV conn)

Executing: HVmixed_voltage_OK_PC = geomNodeRelate(Gate pcLV conn)

Executing: HVmixed_voltage_net_err = geomAndNot(HVmixed_voltage_net geomOr(HVmixed_volta...
	   errorLayer(HVmixed_voltage_net_err "Mixed voltage net found : High Voltage diffusion is connected to Low Voltage gate")

Executing: geomPathCheck((layer sub_diff sub_diff_top) pwr "ptap connected to POWER net found !")
WARNING (AVERC-10004): geomPathCheck command did not perform path check to the power because power nets specified in ercSetPwr/?ercSetPwr command were not found in the layout. At least one power net must exist. Empty output layer would be generated and it could lead to wrong results of other commands execution which use this output layer as input layer.

Executing: geomPathCheck((layer pwell_diff) pwr "pwtap connected to POWER net found !")
WARNING (AVERC-10004): geomPathCheck command did not perform path check to the power because power nets specified in ercSetPwr/?ercSetPwr command were not found in the layout. At least one power net must exist. Empty output layer would be generated and it could lead to wrong results of other commands execution which use this output layer as input layer.

Executing: geomPathCheck((layer nw) gnd "nw connected to ground ")

Executing: geomPathCheck((layer pdiff_tie ptie_top ntie_in_sp_top) pwr "ptie connected to power ")
WARNING (AVERC-10004): geomPathCheck command did not perform path check to the power because power nets specified in ercSetPwr/?ercSetPwr command were not found in the layout. At least one power net must exist. Empty output layer would be generated and it could lead to wrong results of other commands execution which use this output layer as input layer.

Executing: fwd_biased_ptie_err = geomOverlap(nw_to_ground ptie_to_power)
	   errorLayer(fwd_biased_ptie_err "forward biased ptie device found ! [tdpdnw/diodepnw] ")

Executing: geomPathCheck((layer pwell) pwr "pwell connected to power ")
WARNING (AVERC-10004): geomPathCheck command did not perform path check to the power because power nets specified in ercSetPwr/?ercSetPwr command were not found in the layout. At least one power net must exist. Empty output layer would be generated and it could lead to wrong results of other commands execution which use this output layer as input layer.

Executing: geomPathCheck((layer ndiff_tie ntie_top) gnd "ntie connected to ground ")

Executing: fwd_biased_ntie_err = geomOverlap(pwell_to_power ntie_to_ground)
	   errorLayer(fwd_biased_ntie_err "forward biased ntie device found ! [tdndsx,tdndpw/diodenx,diodendpw] ")

Executing: geomPathCheck((layer dn_bottom_iso) gnd "dn connected to ground ")

Executing: fwd_biased_ntie_err = geomOverlap(dn_to_ground pwell_to_power)
	   errorLayer(fwd_biased_ntie_err "forward biased pwdn device found ! [wdpwdn / diodepwdn] ")

Executing: geomPathCheck((layer nw_ring) noPwr "NW ring not connected to a power net found !")

Executing: extractDevice("vnpn" vnpn_dev (vnpn_emit "E") (vnpn_base "B") (vnpn_coll "C")...

Executing: extractDevice("vpnp" vpnp_dev (vpnp_emit "E") (vpnp_base "B") (vpnp_coll "C")...

Executing: extractDevice("nfet20hs" nfet20hs_dev (pc_model "G") (nfHV_sd "S" "D") (subst...

Executing: extractDevice("nfet50hs" nfet50hs_dev (pc_model "G") (nfHV_sd "S" "D") (subst...

Executing: extractDevice("nfet20mh" nfet20mh_dev (pc_model "G") (nfHV_mh_drain "D") (nfH...

Executing: extractDevice("nfeti20h" nfeti20h_dev (pc_model "G") (nfHV_drain "D") (nfHV_s...

Executing: extractDevice("nfeti20t" nfeti20t_dev (pc_model "G") (nfHV_drain "D") (nfHV_s...

Executing: extractDevice("nfeti25m" nfeti25m_dev (pc_model "G") (nfHV_drain "D") (nfHV_s...

Executing: extractDevice("nfeti50h" nfeti50h_dev (pc_model "G") (nfHV_drain "D") (nfHV_s...

Executing: extractDevice("nfeti50m" nfeti50m_dev (pc_model "G") (nfHV_drain "D") (nfHV_s...

Executing: extractDevice("nfeti50t" nfeti50t_dev (pc_model "G") (nfHV_drain "D") (nfHV_s...

Executing: extractDevice("pfet20hs" pfet20hs_dev (pc_model "G") (pfHV_sd "S" "D") (sn "B...

Executing: extractDevice("pfet50hs" pfet50hs_dev (pc_model "G") (pfHV_sd "S" "D") (sn "B...

Executing: extractDevice("pfet20h" pfet20h_dev (pc_model "G") (pfHV_drain "D") (pfHV_sou...

Executing: extractDevice("pfet20t" pfet20t_dev (pc_model "G") (pfHV_drain "D") (pfHV_sou...

Executing: extractDevice("pfet25m" pfet25m_dev (pc_model "G") (pfHV_drain "D") (pfHV_sou...

Executing: extractDevice("pfet50h" pfet50h_dev (pc_model "G") (pfHV_drain "D") (pfHV_sou...

Executing: extractDevice("pfet50m" pfet50m_dev (pc_model "G") (pfHV_drain "D") (pfHV_sou...

Executing: extractDevice("pfet50t" pfet50t_dev (pc_model "G") (pfHV_drain "D") (pfHV_sou...

Executing: MULTI = geomOverlap(dev_ID multi)

Executing: Area = measureParameter(area (dev_ID over emitter_shape) 1e-12)

Executing: nameParameter(Area "area")

Executing: multi1 = measureParameter(figCount (dev_ID enclosing MULTI))

Executing: mswitch = calculateParameter(((Area - Area) + multi1))

Executing: nameParameter(mswitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: MULTI = geomOverlap(dev_ID multi)

Executing: Area = measureParameter(area (dev_ID over emitter_shape) 1e-12)

Executing: nameParameter(Area "area")

Executing: multi1 = measureParameter(figCount (dev_ID enclosing MULTI))

Executing: mswitch = calculateParameter(((Area - Area) + multi1))

Executing: nameParameter(mswitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate_hs) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel_hs) 5e-07)

Executing: width = calculateParameter(((wx - 2e-07) / 2.0))

Executing: length = calculateParameter((lx - width))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate_hs) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel_hs) 5e-07)

Executing: width = calculateParameter(((wx - 2e-07) / 2.0))

Executing: length = calculateParameter((lx - width))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_s_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_s_edgel) 5e-07)

Executing: width = calculateParameter(((wx - 2e-07) / 2.0))

Executing: length = calculateParameter((lx - width))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_s_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_s_edgel) 5e-07)

Executing: width = calculateParameter(((wx - 2e-07) / 2.0))

Executing: length = calculateParameter((lx - width))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over nfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over nfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(lx "lx")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(lx "lx")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(lx "lx")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(lx "lx")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(lx "lx")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: FET_HV_mul = geomOverlap(dev_ID multi)

Executing: lx = measureParameter(perimeter (dev_ID over pfHV_gate) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over pfHV_edgel) 5e-07)

Executing: width = calculateParameter((wx - 2e-07))

Executing: length = calculateParameter(((lx - width) / 2.0))

Executing: nameParameter(length "l")

Executing: nameParameter(lx "lx")

Executing: nameParameter(width "w")

Executing: fet_hv_m = measureParameter(figCount (dev_ID enclosing FET_HV_mul))

Executing: fet_hv_mSwitch = calculateParameter((fet_hv_m + (length - length)))

Executing: nameParameter(fet_hv_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("nfeti4" nfeti_dn_dev_b (pc_model "G") (nfet_sd "S" "D") (pwell...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dn_dev_b "lstis" "0")

Executing: saveProperty(nfeti_dn_dev_b "floating" "1")

Executing: nfeti_bends = measureParameter(bends_all (nfeti_dn_dev_b coincident pc))

Executing: nameParameter(nfeti_bends "bentgate")

Executing: extractDevice("nfeti" nfet6_dn_dev_b (pc_model "G") (nfet_sd "S" "D") (pwell ...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfet6_dn_dev_b "lstis" "0")

Executing: nfeti_bends = measureParameter(bends_all (nfet6_dn_dev_b coincident pc))

Executing: nameParameter(nfeti_bends "bentgate")

Executing: extractDevice("nfeti4" nfeti_dn_dev (pc_model "G") (nfet_sd "S" "D") (pwell "...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: saveProperty(nfeti_dn_dev "floating" "1")

Executing: extractDevice("nfeti" nfet6_dn_dev (pc_model "G") (nfet_sd "S" "D") (pwell "B...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfetihvt4" nfeti_dn_dev_HVT_b (pc_model "G") (nfet_sd "S" "D")...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dn_dev_HVT_b "lstis" "0")

Executing: saveProperty(nfeti_dn_dev_HVT_b "floating" "1")

Executing: nfeti_bends = measureParameter(bends_all (nfeti_dn_dev_HVT_b coincident pc))

Executing: nameParameter(nfeti_bends "bentgate")

Executing: extractDevice("nfetihvt" nfet6_dn_dev_HVT_b (pc_model "G") (nfet_sd "S" "D") ...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfet6_dn_dev_HVT_b "lstis" "0")

Executing: nfeti_bends = measureParameter(bends_all (nfet6_dn_dev_HVT_b coincident pc))

Executing: nameParameter(nfeti_bends "bentgate")

Executing: extractDevice("nfetihvt4" nfeti_dn_dev_HVT (pc_model "G") (nfet_sd "S" "D") (...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: saveProperty(nfeti_dn_dev_HVT "floating" "1")

Executing: extractDevice("nfetihvt" nfet6_dn_dev_HVT (pc_model "G") (nfet_sd "S" "D") (p...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfetim4" nfeti_dn_dev_TG (pc_model "G") (nfet_sd "S" "D") (pwe...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dn_dev_TG "floating" "1")

Executing: extractDevice("nfetim" nfet6_dn_dev_TG (pc_model "G") (nfet_sd "S" "D") (pwel...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfeti4" nfeti_dn_mul (pc_model "G") (nd_comp_dr "D") (nd_comp_...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: ext_diff = geomButting(ALL_FET_SD Gate (keep == 1))

Executing: int_diff = geomButting(ALL_FET_SD Gate (keep == 2))

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfeti_dn_mul "floating" "1")

Executing: extractDevice("nfeti" nfet6_dn_mul (pc_model "G") (nd_comp_dr "D") (nd_comp_s...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfetihvt4" nfeti_dn_mul_HVT (pc_model "G") (nd_comp_dr "D") (n...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfeti_dn_mul_HVT "floating" "1")

Executing: extractDevice("nfetihvt" nfet6_dn_mul_HVT (pc_model "G") (nd_comp_dr "D") (nd...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfetim4" nfeti_dn_mul_TG (pc_model "G") (nd_comp_dr "D") (nd_c...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dn_mul_TG "floating" "1")

Executing: extractDevice("nfetim" nfet6_dn_mul_TG (pc_model "G") (nd_comp_dr "D") (nd_co...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfet" nfet_dev (pc_model "G") (nfet_sd "S" "D") (substrate "B"...
         1 'nfet' created in cell 'curr_mirror layout TUTORIAL'.

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfet" nfet_dev_b (pc_model "G") (nfet_sd "S" "D") (substrate "...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfet_dev_b "lstis" "0")

Executing: nfet_bends = measureParameter(bends_all (nfet_dev_b coincident pc))

Executing: nameParameter(nfet_bends "bentgate")

Executing: extractDevice("nfet" nfet_mul (pc_model "G") (nd_comp_dr "D") (nd_comp_sc "S"...
         2 'nfet' created in cell 'curr_mirror layout TUTORIAL'.

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfet" nfeti_dev (pc_model "G") (nfet_sd "S" "D") (pwell "B") f...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: saveProperty(nfeti_dev "tw" 1)

Executing: extractDevice("nfet" nfeti_dev_b (pc_model "G") (nfet_sd "S" "D") (pwell "B")...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dev_b "lstis" "0")

Executing: nfet_bends = measureParameter(bends_all (nfeti_dev_b coincident pc))

Executing: nameParameter(nfet_bends "bentgate")

Executing: extractDevice("nfet" nfeti_mul (pc_model "G") (nd_comp_dr "D") (nd_comp_sc "S...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfeti_mul "tw" 1)

Executing: extractDevice("nfet" nfet6_dev (pc_model "G") (nfet_sd "S" "D") (pwell "B") f...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfet" nfet6_mul (pc_model "G") (nd_comp_dr "D") (nd_comp_sc "S...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfetm" nfet_dev_TG (pc_model "G") (nfet_sd "S" "D") (substrate...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfetm" nfet_mul_TG (pc_model "G") (nd_comp_dr "D") (nd_comp_sc...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfetm" nfeti_dev_TG (pc_model "G") (nfet_sd "S" "D") (pwell "B...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dev_TG "tw" 1)

Executing: extractDevice("nfetm" nfeti_mul_TG (pc_model "G") (nd_comp_dr "D") (nd_comp_s...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_mul_TG "tw" 1)

Executing: extractDevice("nfetm" nfet6_dev_TG (pc_model "G") (nfet_sd "S" "D") (pwell "B...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfetm" nfet6_mul_TG (pc_model "G") (nd_comp_dr "D") (nd_comp_s...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfethvt" nfet_dev_HVT (pc_model "G") (nfet_sd "S" "D") (substr...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfethvt" nfet_mul_HVT (pc_model "G") (nd_comp_dr "D") (nd_comp...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfethvt" nfet_dev_HVT_b (pc_model "G") (nfet_sd "S" "D") (subs...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfet_dev_HVT_b "lstis" "0")

Executing: nfet_bends = measureParameter(bends_all (nfet_dev_HVT_b coincident pc))

Executing: nameParameter(nfet_bends "bentgate")

Executing: extractDevice("nfetshvt" nfet_dev_SHVT (pc_model "G") (nfet_sd "S" "D") (subs...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfetshvt" nfet_mul_SHVT (pc_model "G") (nd_comp_dr "D") (nd_co...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfetshvt" nfet_dev_SHVT_b (pc_model "G") (nfet_sd "S" "D") (su...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfet_dev_SHVT_b "lstis" "0")

Executing: nfet_bends = measureParameter(bends_all (nfet_dev_SHVT_b coincident pc))

Executing: nameParameter(nfet_bends "bentgate")

Executing: extractDevice("nfethvt" nfeti_dev_HVT (pc_model "G") (nfet_sd "S" "D") (pwell...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: measureSTI(dev_ID rx 3.0 (output areaSA areaSB) (calculateExp (sa * sw) (sb * sw)))

Executing: SA = calculateParameter(((areaSA / fet_width) * 1e-12))

Executing: SB = calculateParameter(((areaSB / fet_width) * 1e-12))

Executing: nameParameter(SA "sa")

Executing: nameParameter(SB "sb")

Executing: saveProperty(dev_ID "sd" 0)

Executing: extractDevice("nfethvt" nfeti_mul_HVT (pc_model "G") (nd_comp_dr "D") (nd_com...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfethvt" nfeti_dev_HVT_b (pc_model "G") (nfet_sd "S" "D") (pwe...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(nfeti_dev_HVT_b "lstis" "0")

Executing: nfet_bends = measureParameter(bends_all (nfeti_dev_HVT_b coincident pc))

Executing: nameParameter(nfet_bends "bentgate")

Executing: extractDevice("pfeti4" pfeti_dn_dev_b (pc_model "G") (pfet_sd "S" "D") (nw "B...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_dev_b "floating" "1")

Executing: pfeti_bends = measureParameter(bends_all (pfeti_dn_dev_b coincident pc))

Executing: nameParameter(pfeti_bends "bentgate")

Executing: extractDevice("pfeti" pfet5_dn_dev_b (pc_model "G") (pfet_sd "S" "D") (nw "B"...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: pfeti_bends = measureParameter(bends_all (pfet5_dn_dev_b coincident pc))

Executing: nameParameter(pfeti_bends "bentgate")

Executing: extractDevice("pfeti4" pfeti_dn_dev (pc_model "G") (pfet_sd "S" "D") (nw "B")...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_dev "floating" "1")

Executing: extractDevice("pfeti" pfet5_dn_dev (pc_model "G") (pfet_sd "S" "D") (nw "B") ...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfeti4" pfeti_dn_mul (pc_model "G") (pd_comp_dr "D") (pd_comp_...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_mul "floating" "1")

Executing: extractDevice("pfeti" pfet5_dn_mul (pc_model "G") (pd_comp_dr "D") (pd_comp_s...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetihvt4" pfeti_dn_dev_HVT_b (pc_model "G") (pfet_sd "S" "D")...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_dev_HVT_b "floating" "1")

Executing: pfeti_bends = measureParameter(bends_all (pfeti_dn_dev_HVT_b coincident pc))

Executing: nameParameter(pfeti_bends "bentgate")

Executing: extractDevice("pfetihvt" pfet5_dn_dev_HVT_b (pc_model "G") (pfet_sd "S" "D") ...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: pfeti_bends = measureParameter(bends_all (pfet5_dn_dev_HVT_b coincident pc))

Executing: nameParameter(pfeti_bends "bentgate")

Executing: extractDevice("pfetihvt4" pfeti_dn_dev_HVT (pc_model "G") (pfet_sd "S" "D") (...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_dev_HVT "floating" "1")

Executing: extractDevice("pfetihvt" pfet5_dn_dev_HVT (pc_model "G") (pfet_sd "S" "D") (n...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetihvt4" pfeti_dn_mul_HVT (pc_model "G") (pd_comp_dr "D") (p...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_mul_HVT "floating" "1")

Executing: extractDevice("pfetihvt" pfet5_dn_mul_HVT (pc_model "G") (pd_comp_dr "D") (pd...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetim4" pfeti_dn_dev_TG (pc_model "G") (pfet_sd "S" "D") (nw ...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_dev_TG "floating" "1")

Executing: extractDevice("pfetim" pfet5_dn_dev_TG (pc_model "G") (pfet_sd "S" "D") (nw "...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetim4" pfeti_dn_mul_TG (pc_model "G") (pd_comp_dr "D") (pd_c...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(pfeti_dn_mul_TG "floating" "1")

Executing: extractDevice("pfetim" pfet5_dn_mul_TG (pc_model "G") (pd_comp_dr "D") (pd_co...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfet" pfet_dev (pc_model "G") (pfet_sd "S" "D") (nw "B") flagM...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfet" pfet_dev_b (pc_model "G") (pfet_sd "S" "D") (nw "B") fla...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: pfet_bends = measureParameter(bends_all (pfet_dev_b coincident pc))

Executing: nameParameter(pfet_bends "bentgate")

Executing: extractDevice("pfet" pfet_mul (pc_model "G") (pd_comp_dr "D") (pd_comp_sc "S"...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetm" pfet_dev_TG (pc_model "G") (pfet_sd "S" "D") (nw "B") f...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetm" pfet_mul_TG (pc_model "G") (pd_comp_dr "D") (pd_comp_sc...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfethvt" pfet_dev_HVT (pc_model "G") (pfet_sd "S" "D") (nw "B"...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfethvt" pfet_dev_HVT_b (pc_model "G") (pfet_sd "S" "D") (nw "...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: pfet_bends = measureParameter(bends_all (pfet_dev_HVT_b coincident pc))

Executing: nameParameter(pfet_bends "bentgate")

Executing: extractDevice("pfethvt" pfet_mul_HVT (pc_model "G") (pd_comp_dr "D") (pd_comp...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetshvt" pfet_dev_SHVT (pc_model "G") (pfet_sd "S" "D") (nw "...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pfetshvt" pfet_dev_SHVT_b (pc_model "G") (pfet_sd "S" "D") (nw...

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: fet_width = measureParameter(length (dev_ID coincident pc) 5e-07)

Executing: nameParameter(fet_width "w")

Executing: nameParameter(fet_width "wt")

Executing: area = measureParameter(area (dev_ID over rx) 1e-12)

Executing: length = calculateParameter((area / fet_width))

Executing: nameParameter(length "l")

Executing: nc = measureParameter(figCount (dev_ID enclosing dual_poly))

Executing: gcon = calculateParameter((nc + 1.0 + (length - length)))

Executing: nameParameter(gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (length - length)))

Executing: nameParameter(psp "psp")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 0)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "nf" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: pfet_bends = measureParameter(bends_all (pfet_dev_SHVT_b coincident pc))

Executing: nameParameter(pfet_bends "bentgate")

Executing: extractDevice("pfetshvt" pfet_mul_SHVT (pc_model "G") (pd_comp_dr "D") (pd_co...

Executing: saveProperty(dev_ID "rf" 0)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: PSP_M = geomOverlap(dev_ID psp_model)

Executing: GNS_M = geomOverlap(dev_ID nfet_gate_gns)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: psp_shape = measureParameter(figCount (dev_ID enclosing PSP_M))

Executing: psp = calculateParameter((psp_shape + (lx - lx)))

Executing: nameParameter(psp "psp")

Executing: gns_shape = measureParameter(figCount (dev_ID enclosing GNS_M))

Executing: gns = calculateParameter((gns_shape + (length - length)))

Executing: nameParameter(gns "gns")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_mul_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_mul_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_mul_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_mul_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_mul_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_mul_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("nfeti4_rf" nfRFi_dn_dev (pc_model "G") (ndRF_comp_dr "D") (ndR...

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfRFi_dn_dev "floating" "1")

Executing: extractDevice("nfeti_rf" nfRF6_dn_dev (pc_model "G") (ndRF_comp_dr "D") (ndRF...

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfeti4_rf" nfRFi_dn_mul (pc_model "G") (ndRF_comp_dr "D") (ndR...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfRFi_dn_mul "floating" "1")

Executing: extractDevice("nfeti_rf" nfRF6_dn_mul (pc_model "G") (ndRF_comp_dr "D") (ndRF...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfet_rf" nfRFi_dev (pc_model "G") (ndRF_comp_dr "D") (ndRF_com...

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfRFi_dev "tw" 1)

Executing: extractDevice("nfet_rf" nfRF6_dev (pc_model "G") (ndRF_comp_dr "D") (ndRF_com...

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfet_rf" nfRF_dev (pc_model "G") (ndRF_comp_dr "D") (ndRF_comp...

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfet_rf" nfRFi_mul (pc_model "G") (ndRF_comp_dr "D") (ndRF_com...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: saveProperty(nfRFi_mul "tw" 1)

Executing: extractDevice("nfet_rf" nfRF6_mul (pc_model "G") (ndRF_comp_dr "D") (ndRF_com...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("nfet_rf" nfRF_mul (pc_model "G") (ndRF_comp_dr "D") (ndRF_comp...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: ext_area = measureParameter(area (dev_ID over ext_diff))

Executing: int_area = measureParameter(area (dev_ID over int_diff))

Executing: SA_SB = calculateParameter(((ext_area * 1e-12) / (fet_width * 2)))

Executing: SD = calculateParameter(((int_area * 1e-12) / (fet_width * max((fet_nf - 1) 1...

Executing: nameParameter(SD "sd")

Executing: nameParameter(SA_SB "sa")

Executing: nameParameter(SA_SB "sb")

Executing: extractDevice("pfeti4_rf" pfRFi_dn_dev (pc_model "G") (pdRF_comp_dr "D") (pdR...

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: saveProperty(pfRFi_dn_dev "floating" "1")

Executing: extractDevice("pfeti_rf" pfRF5_dn_dev (pc_model "G") (pdRF_comp_dr "D") (pdRF...

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: extractDevice("pfeti4_rf" pfRFi_dn_mul (pc_model "G") (pdRF_comp_dr "D") (pdR...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: saveProperty(pfRFi_dn_mul "floating" "1")

Executing: extractDevice("pfeti_rf" pfRF5_dn_mul (pc_model "G") (pdRF_comp_dr "D") (pdRF...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: extractDevice("pfet_rf" pfRF_dev (pc_model "G") (pdRF_comp_dr "D") (pdRF_comp...

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: saveProperty(dev_ID "rf" 1)

Executing: saveProperty(dev_ID "gcon" 2)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 0)

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: extractDevice("pfet_rf" pfRF_mul (pc_model "G") (pdRF_comp_dr "D") (pdRF_comp...

Executing: saveProperty(dev_ID "rf" 1)

Executing: DP = geomOverlap(dev_ID dual_poly)

Executing: wx = measureParameter(perimeter (dev_ID over Gate) 5e-07)

Executing: lx = measureParameter(length (dev_ID coincident Gate) 5e-07)

Executing: fet_nf = measureParameter(figCount (dev_ID enclosing Gate))

Executing: nameParameter(fet_nf "nf")

Executing: length = calculateParameter((lx / fet_nf))

Executing: nameParameter(length "l")

Executing: fet_width = calculateParameter(((wx - lx) / fet_nf))

Executing: nameParameter(fet_width "w")

Executing: fet_wt = calculateParameter((fet_width * fet_nf))

Executing: nameParameter(fet_wt "wt")

Executing: nrd = calculateParameter((2.6e-07 / (fet_width - 6e-08)))

Executing: nameParameter(nrd "nrd")

Executing: nameParameter(nrd "nrs")

Executing: nfet_nc = measureParameter(figCount (dev_ID enclosing DP))

Executing: nfet_gcon = calculateParameter((nfet_nc + 1.0 + (lx - lx)))

Executing: nameParameter(nfet_gcon "gcon")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "psp" 0)

Executing: saveProperty(dev_ID "mSwitch" 1)

Executing: s_fig = measureParameter(figCount (dev_ID enclosing FET_RF_source))

Executing: d_fig = measureParameter(figCount (dev_ID enclosing FET_RF_drain))

Executing: d_area = measureParameter(area (dev_ID over FET_RF_drain))

Executing: s_area = measureParameter(area (dev_ID over FET_RF_source))

Executing: d_peri = measureParameter(perimeter (dev_ID over FET_RF_drain))

Executing: s_peri = measureParameter(perimeter (dev_ID over FET_RF_source))

Executing: ad = calculateParameter(((d_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: as = calculateParameter(((s_area * 1e-12) / ((d_fig + s_fig) - 1)))

Executing: pd = calculateParameter(((d_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: ps = calculateParameter(((s_peri * 1e-06) / ((d_fig + s_fig) - 1)))

Executing: nameParameter(ad "ad")

Executing: nameParameter(as "as")

Executing: nameParameter(pd "pd")

Executing: nameParameter(ps "ps")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M2 sub")

Executing: saveProperty(dev_ID "blockParasiticsLPP" "OUTLINE rf")

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Area ("as" "S") ("ad" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: attachParameter(Perim ("ps" "S") ("pd" "D") dev_ID shared)

Executing: extractDevice("sbdi" SBD (SBD_C "C") (SBD_A "A") (substrate "BULK") flagMalfo...

Executing: saveProperty(SBD "m" 1)

Executing: sbd_mul = geomOverlap(SBD multi)

Executing: sbd_anodes = measureParameter(figCount (SBD enclosing SBD_A))

Executing: nameParameter(sbd_anodes "nf")

Executing: sbd_rxw = measureParameter(area (SBD over width_label_sbd) 1e-05)

Executing: sbd_rxw_width = calculateParameter((sbd_rxw / sbd_anodes))

Executing: nameParameter(sbd_rxw_width "w")

Executing: sbd_an_area = measureParameter(area (SBD over SBD_A not_over pd) 1e-12)

Executing: sbd_rxl = calculateParameter((sbd_an_area / sbd_anodes / sbd_rxw_width))

Executing: nameParameter(sbd_rxl "l")

Executing: sbd_M = measureParameter(figCount (SBD enclosing sbd_mul))

Executing: sbd_mSwitch = calculateParameter((sbd_M + (sbd_rxw - sbd_rxw)))

Executing: nameParameter(sbd_mSwitch "mSwitch")

Executing: saveProperty(SBD "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("dipdnw" DI_diode (DI_anode "PLUS") (DI_cathode "SUB") flagMalf...

Executing: extractDevice("dindpw" DIPI_diode (DIPI_nw_diff "dn") (DIPI_anode "pw") (DIPI...

Executing: extractDevice("divpnp" DI_VPNP (DI_coll "SUB") (DI_cathode "NW") (DI_anode "P...

Executing: saveProperty(DI_diode "m" 1)

Executing: saveProperty(DI_diode "par" 1)

Executing: di_mul = geomOverlap(DI_diode multi)

Executing: di_anodes = measureParameter(figCount (DI_diode enclosing DI_anode))

Executing: nameParameter(di_anodes "nf")

Executing: di_width = measureParameter(area (DI_diode over rx_label) 1e-05)

Executing: nameParameter(di_width "w")

Executing: di_area = measureParameter(area (DI_diode over DI_anode))

Executing: di_length = calculateParameter(((di_area * 1e-12) / di_anodes / di_width))

Executing: nameParameter(di_length "l")

Executing: di_M = measureParameter(figCount (DI_diode enclosing di_mul))

Executing: di_mSwitch = calculateParameter((di_M + (di_width - di_width)))

Executing: nameParameter(di_mSwitch "mSwitch")

Executing: saveProperty(DI_diode "blockParasiticsBetween" "PC sub")

Executing: dindpw_mul = geomOverlap(DIPI_diode multi)

Executing: dipi_num_cath = measureParameter(figCount (DIPI_diode enclosing DIPI_cathode))

Executing: nameParameter(dipi_num_cath "nf")

Executing: dipi_width = measureParameter(area (DIPI_diode over rx_label) 1e-05)

Executing: nameParameter(dipi_width "w")

Executing: dipi_area = measureParameter(area (DIPI_diode over DIPI_cathode))

Executing: dipi_length = calculateParameter(((dipi_area * 1e-12) / dipi_num_cath / dipi_...

Executing: nameParameter(dipi_length "l")

Executing: dindpw_M = measureParameter(figCount (DIPI_diode enclosing dindpw_mul))

Executing: dindpw_mSwitch = calculateParameter((dindpw_M + (dipi_width - dipi_width)))

Executing: nameParameter(dindpw_mSwitch "mSwitch")

Executing: saveProperty(DIPI_diode "m" 1)

Executing: saveProperty(DIPI_diode "par" 1)

Executing: saveProperty(DI_VPNP "m" 1)

Executing: saveProperty(DI_VPNP "par" 1)

Executing: di_mul = geomOverlap(DI_VPNP multi)

Executing: vpnp_emitters = measureParameter(figCount (DI_VPNP enclosing DI_anode))

Executing: nameParameter(vpnp_emitters "nf")

Executing: vpnp_width = measureParameter(area (DI_VPNP over rx_label) 1e-05)

Executing: nameParameter(vpnp_width "w")

Executing: vpnp_area = measureParameter(area (DI_VPNP over DI_anode))

Executing: vpnp_length = calculateParameter(((vpnp_area * 1e-12) / vpnp_emitters / vpnp_...

Executing: nameParameter(vpnp_length "l")

Executing: di_M = measureParameter(figCount (DI_VPNP enclosing di_mul))

Executing: di_mSwitch = calculateParameter((di_M + (vpnp_width - vpnp_width)))

Executing: nameParameter(di_mSwitch "mSwitch")

Executing: saveProperty(DI_VPNP "blockParasiticsBetween" "PC sub")

Executing: extractDevice("mosvart" mosvar_dev (mosvar_pc "G") (mosvar_rx "D") (substrate...

Executing: extractDevice("mosvarm" mosvar50_dev (mosvar_pc "G") (mosvar_rx "D") (substra...

Executing: extractDevice("pcdcapm" pcdcap50_dev (mosvar_pc "G") (mosvar_rx "D") (substra...

Executing: saveProperty(dev_ID "m" 1)

Executing: mos_multi = geomAnd(dev_ID multi)

Executing: mosvar_gate = measureParameter(figCount (dev_ID enclosing mosvar_gates))

Executing: nameParameter(mosvar_gate "gates")

Executing: mosvar_length1 = measureParameter(area (dev_ID over mosvar_pc_length) 1e-05)

Executing: mosvar_width1 = measureParameter(area (dev_ID over mosvar_rx_width) 1e-05)

Executing: mosvar_length = calculateParameter((mosvar_length1 / mosvar_gate))

Executing: mosvar_width = calculateParameter((mosvar_width1 / mosvar_gate))

Executing: nameParameter(mosvar_length "l")

Executing: nameParameter(mosvar_width "w")

Executing: mosvar_yrep = measureParameter(figCount (dev_ID enclosing mosvar_RX))

Executing: nameParameter(mosvar_yrep "yrep")

Executing: mosvar_xrep = calculateParameter((mosvar_gate / mosvar_yrep))

Executing: nameParameter(mosvar_xrep "xrep")

Executing: mos_M = measureParameter(figCount (dev_ID enclosing mos_multi))

Executing: mos_mSwitch = calculateParameter((mos_M + (mosvar_length - mosvar_length)))

Executing: nameParameter(mos_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: mos_multi = geomAnd(dev_ID multi)

Executing: mosvar_gate = measureParameter(figCount (dev_ID enclosing mosvar_gates))

Executing: nameParameter(mosvar_gate "gates")

Executing: mosvar_length1 = measureParameter(area (dev_ID over mosvar_pc_length) 1e-05)

Executing: mosvar_width1 = measureParameter(area (dev_ID over mosvar_rx_width) 1e-05)

Executing: mosvar_length = calculateParameter((mosvar_length1 / mosvar_gate))

Executing: mosvar_width = calculateParameter((mosvar_width1 / mosvar_gate))

Executing: nameParameter(mosvar_length "l")

Executing: nameParameter(mosvar_width "w")

Executing: mosvar_yrep = measureParameter(figCount (dev_ID enclosing mosvar_RX))

Executing: nameParameter(mosvar_yrep "yrep")

Executing: mosvar_xrep = calculateParameter((mosvar_gate / mosvar_yrep))

Executing: nameParameter(mosvar_xrep "xrep")

Executing: mos_M = measureParameter(figCount (dev_ID enclosing mos_multi))

Executing: mos_mSwitch = calculateParameter((mos_M + (mosvar_length - mosvar_length)))

Executing: nameParameter(mos_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: mos_multi = geomAnd(dev_ID multi)

Executing: mosvar_gate = measureParameter(figCount (dev_ID enclosing mosvar_gates))

Executing: nameParameter(mosvar_gate "gates")

Executing: mosvar_length1 = measureParameter(area (dev_ID over mosvar_pc_length) 1e-05)

Executing: mosvar_width1 = measureParameter(area (dev_ID over mosvar_rx_width) 1e-05)

Executing: mosvar_length = calculateParameter((mosvar_length1 / mosvar_gate))

Executing: mosvar_width = calculateParameter((mosvar_width1 / mosvar_gate))

Executing: nameParameter(mosvar_length "l")

Executing: nameParameter(mosvar_width "w")

Executing: mosvar_yrep = measureParameter(figCount (dev_ID enclosing mosvar_RX))

Executing: nameParameter(mosvar_yrep "yrep")

Executing: mosvar_xrep = calculateParameter((mosvar_gate / mosvar_yrep))

Executing: nameParameter(mosvar_xrep "xrep")

Executing: mos_M = measureParameter(figCount (dev_ID enclosing mos_multi))

Executing: mos_mSwitch = calculateParameter((mos_M + (mosvar_length - mosvar_length)))

Executing: nameParameter(mos_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pcdcap" ncap_dev (ncap_pc "G") (ncap_rx "D") (substrate "B") f...

Executing: saveProperty(dev_ID "m" 1)

Executing: ncap_gate = measureParameter(figCount (dev_ID enclosing ncap_gates))

Executing: nameParameter(ncap_gate "gates")

Executing: ncap_length1 = measureParameter(area (dev_ID over ncap_pc_length) 5e-06)

Executing: ncap_width1 = measureParameter(area (dev_ID over ncap_rx_width) 5e-06)

Executing: ncap_length = calculateParameter((ncap_length1 / ncap_gate))

Executing: ncap_width = calculateParameter((ncap_width1 / ncap_gate))

Executing: nameParameter(ncap_length "l")

Executing: nameParameter(ncap_width "w")

Executing: ncap_M = measureParameter(figCount (dev_ID enclosing ncap_mul))

Executing: ncap_mSwitch = calculateParameter((ncap_M + (ncap_length - ncap_length)))

Executing: nameParameter(ncap_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pcdcapt" pcdcapt_dev (ncap_pc "G") (ncap_rx "D") (substrate "B...

Executing: pcdcapt_gate = measureParameter(figCount (pcdcapt_dev enclosing ncap_gates))

Executing: nameParameter(pcdcapt_gate "xrep")

Executing: saveProperty(pcdcapt_dev "yrep" 1)

Executing: saveProperty(dev_ID "m" 1)

Executing: ncap_gate = measureParameter(figCount (dev_ID enclosing ncap_gates))

Executing: nameParameter(ncap_gate "gates")

Executing: ncap_length1 = measureParameter(area (dev_ID over ncap_pc_length) 5e-06)

Executing: ncap_width1 = measureParameter(area (dev_ID over ncap_rx_width) 5e-06)

Executing: ncap_length = calculateParameter((ncap_length1 / ncap_gate))

Executing: ncap_width = calculateParameter((ncap_width1 / ncap_gate))

Executing: nameParameter(ncap_length "l")

Executing: nameParameter(ncap_width "w")

Executing: ncap_M = measureParameter(figCount (dev_ID enclosing ncap_mul))

Executing: ncap_mSwitch = calculateParameter((ncap_M + (ncap_length - ncap_length)))

Executing: nameParameter(ncap_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pcapi" pcap_dev (pcap_pc "G") (pcap_rx "D") (dn_bottom_iso "TW...

Executing: extractDevice("pcapim" pcap50_dev (pcap_pc "G") (pcap_rx "D") (dn_bottom_iso ...

Executing: saveProperty(dev_ID "m" 1)

Executing: pcap_gate = measureParameter(figCount (dev_ID enclosing pcap_gates))

Executing: nameParameter(pcap_gate "gates")

Executing: pcap_length1 = measureParameter(area (dev_ID over pcap_pc_length) 1e-05)

Executing: pcap_width1 = measureParameter(area (dev_ID over pcap_rx_width) 1e-05)

Executing: pcap_length = calculateParameter((pcap_length1 / pcap_gate))

Executing: pcap_width = calculateParameter((pcap_width1 / pcap_gate))

Executing: nameParameter(pcap_length "l")

Executing: nameParameter(pcap_width "w")

Executing: pcap_yrep = measureParameter(figCount (dev_ID enclosing pcap_RX))

Executing: nameParameter(pcap_yrep "yrep")

Executing: pcap_xrep = calculateParameter((pcap_gate / pcap_yrep))

Executing: nameParameter(pcap_xrep "xrep")

Executing: mos_M = measureParameter(figCount (dev_ID enclosing pcap_mul))

Executing: mos_mSwitch = calculateParameter((mos_M + (pcap_length - pcap_length)))

Executing: nameParameter(mos_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: pcap_gate = measureParameter(figCount (dev_ID enclosing pcap_gates))

Executing: nameParameter(pcap_gate "gates")

Executing: pcap_length1 = measureParameter(area (dev_ID over pcap_pc_length) 1e-05)

Executing: pcap_width1 = measureParameter(area (dev_ID over pcap_rx_width) 1e-05)

Executing: pcap_length = calculateParameter((pcap_length1 / pcap_gate))

Executing: pcap_width = calculateParameter((pcap_width1 / pcap_gate))

Executing: nameParameter(pcap_length "l")

Executing: nameParameter(pcap_width "w")

Executing: pcap_yrep = measureParameter(figCount (dev_ID enclosing pcap_RX))

Executing: nameParameter(pcap_yrep "yrep")

Executing: pcap_xrep = calculateParameter((pcap_gate / pcap_yrep))

Executing: nameParameter(pcap_xrep "xrep")

Executing: mos_M = measureParameter(figCount (dev_ID enclosing pcap_mul))

Executing: mos_mSwitch = calculateParameter((mos_M + (pcap_length - pcap_length)))

Executing: nameParameter(mos_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "PC sub")

Executing: extractDevice("pjfet" pjfet_dev (pjfet_g "G") (pjfet_sd "S" "D") (substrate "...

Executing: pjfet_nd = measureParameter(figCount (dev_ID enclosing pjfet_sn_sh))

Executing: pjfet_length1 = measureParameter(length (dev_ID coincident pjfet_sn_sh) 5e-07)

Executing: pjfet_area = measureParameter(area (dev_ID over pjfet_sn_sh) 1e-12)

Executing: pjfet_length = calculateParameter((pjfet_length1 / pjfet_nd))

Executing: pjfet_width = calculateParameter((pjfet_area / pjfet_length1))

Executing: pjfet_M = measureParameter(figCount (dev_ID enclosing pjfet_mul))

Executing: pjfet_mSwitch = calculateParameter((pjfet_M + (pjfet_area - pjfet_area)))

Executing: nameParameter(pjfet_length "l")

Executing: nameParameter(pjfet_width "w")

Executing: nameParameter(pjfet_nd "nd")

Executing: nameParameter(pjfet_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("opnpcres" rnw6pc_dev_no_bp (res6pc_term "D" "S") (nw "G") phys...

Executing: res6pc_dev_no_bp_pwell = extractDevice("opnpcres" res6pc_dev_no_bp (res6pc_te...
           res6pc_dev_no_bp_subs = extractDevice("opnpcres" res6pc_dev_no_bp (res6pc_ter...

Executing: extractDevice("opppcres" rnw6pc_dev (res6pc_term "D" "S") (nw "G") physical f...

Executing: res6pc_dev_pwell = extractDevice("opppcres" res6pc_dev (res6pc_term "D" "S") ...
           res6pc_dev_subs = extractDevice("opppcres" res6pc_dev (res6pc_term "D" "S") (...

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6pc_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6pc_width "w")

Executing: res6pc_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6pc_length "l")

Executing: res6pc_res = calculateParameter((((2.0 * rend) + (rs * ((res6pc_length * 1000...

Executing: nameParameter(res6pc_res "r")

Executing: nameParameter(res6pc_res "reff")

Executing: res6pc_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6pc_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6pc_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6pc_bp = calculateParameter((res6pc_nw + res6pc_bb + res6pc_sx))

Executing: nameParameter(res6pc_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6pc_length - res6pc_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6pc_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6pc_width "w")

Executing: res6pc_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6pc_length "l")

Executing: res6pc_res = calculateParameter((((2.0 * rend) + (rs * ((res6pc_length * 1000...

Executing: nameParameter(res6pc_res "r")

Executing: nameParameter(res6pc_res "reff")

Executing: res6pc_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6pc_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6pc_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6pc_bp = calculateParameter((res6pc_nw + res6pc_bb + res6pc_sx))

Executing: nameParameter(res6pc_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6pc_length - res6pc_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6pc_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6pc_width "w")

Executing: res6pc_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6pc_length "l")

Executing: res6pc_res = calculateParameter((((2.0 * rend) + (rs * ((res6pc_length * 1000...

Executing: nameParameter(res6pc_res "r")

Executing: nameParameter(res6pc_res "reff")

Executing: res6pc_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6pc_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6pc_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6pc_bp = calculateParameter((res6pc_nw + res6pc_bb + res6pc_sx))

Executing: nameParameter(res6pc_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6pc_length - res6pc_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6pc_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6pc_width "w")

Executing: res6pc_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6pc_length "l")

Executing: res6pc_res = calculateParameter((((2.0 * rend) + (rs * ((res6pc_length * 1000...

Executing: nameParameter(res6pc_res "r")

Executing: nameParameter(res6pc_res "reff")

Executing: res6pc_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6pc_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6pc_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6pc_bp = calculateParameter((res6pc_nw + res6pc_bb + res6pc_sx))

Executing: nameParameter(res6pc_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6pc_length - res6pc_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("oprrpres" rnw6rr_dev (res6pc_term "D" "S") (nw "G") physical f...

Executing: res6rr_dev_pwell = extractDevice("oprrpres" res6rr_dev (res6pc_term "D" "S") ...
           res6rr_dev_subs = extractDevice("oprrpres" res6rr_dev (res6pc_term "D" "S") (...

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6rr_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6rr_width "w")

Executing: res6rr_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6rr_length "l")

Executing: res6rr_bb = calculateParameter((res6rr_width - res6rr_width))

Executing: nameParameter(res6rr_bb "bb")

Executing: res6rr_res = calculateParameter((((2.0 * rend) + (2.0 * rbn * lbn) + (rs * ((...

Executing: nameParameter(res6rr_res "r")

Executing: nameParameter(res6rr_res "reff")

Executing: res6rr_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6rr_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6rr_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6rr_bp = calculateParameter((res6rr_nw + res6rr_bb + res6rr_sx))

Executing: nameParameter(res6rr_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6rr_length - res6rr_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6rr_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6rr_width "w")

Executing: res6rr_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6rr_length "l")

Executing: res6rr_bb = calculateParameter((res6rr_width - res6rr_width))

Executing: nameParameter(res6rr_bb "bb")

Executing: res6rr_res = calculateParameter((((2.0 * rend) + (2.0 * rbn * lbn) + (rs * ((...

Executing: nameParameter(res6rr_res "r")

Executing: nameParameter(res6rr_res "reff")

Executing: res6rr_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6rr_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6rr_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6rr_bp = calculateParameter((res6rr_nw + res6rr_bb + res6rr_sx))

Executing: nameParameter(res6rr_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6rr_length - res6rr_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("oprppres" rnw6rp_dev (res6pc_term "D" "S") (nw "G") physical f...

Executing: res6rp_dev_pwell = extractDevice("oprppres" res6rp_dev (res6pc_term "D" "S") ...
           res6rp_dev_subs = extractDevice("oprppres" res6rp_dev (res6pc_term "D" "S") (...

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6rp_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6rp_width "w")

Executing: res6rp_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6rp_length "l")

Executing: res6rp_res = calculateParameter((((2.0 * rend) + (rs * ((res6rp_length * 1000...

Executing: nameParameter(res6rp_res "r")

Executing: nameParameter(res6rp_res "reff")

Executing: res6rp_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6rp_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6rp_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6rp_bp = calculateParameter((res6rp_nw + res6rp_bb + res6rp_sx))

Executing: nameParameter(res6rp_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6rp_length - res6rp_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6rp_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6rp_width "w")

Executing: res6rp_length = measureParameter(length (dev_ID coincident res6pc_bar) 5e-07)

Executing: nameParameter(res6rp_length "l")

Executing: res6rp_res = calculateParameter((((2.0 * rend) + (rs * ((res6rp_length * 1000...

Executing: nameParameter(res6rp_res "r")

Executing: nameParameter(res6rp_res "reff")

Executing: res6rp_nw = measureParameter(figCount (dev_ID enclosing resistor_nw) 1.0)

Executing: res6rp_bb = measureParameter(figCount (dev_ID enclosing resistor_bb) 2.0)

Executing: res6rp_sx = measureParameter(figCount (dev_ID enclosing resistor_sx) 3.0)

Executing: res6rp_bp = calculateParameter((res6rp_nw + res6rp_bb + res6rp_sx))

Executing: nameParameter(res6rp_bp "bp")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6rp_length - res6rp_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: hvnwres_dev_pwell = extractDevice("hvnwres" hvnwres_dev (hvnwres_term "D" "S"...
           hvnwres_dev_subs = extractDevice("hvnwres" hvnwres_dev (hvnwres_term "D" "S")...

Executing: extractDevice("hvpwres" hvpwres_dev (hvpwres_term "D" "S") (dn_bottom_iso "B"...

Executing: res6n_dev_pwell = extractDevice("opndres" res6n_dev (res6n_term "D" "S") (pwe...
           res6n_dev_subs = extractDevice("opndres" res6n_dev (res6n_term "D" "S") (subs...

Executing: extractDevice("opndres3" res6n_3_dev (res6n_term "D" "S") (pwell "G") physica...

Executing: extractDevice("opndires" res6n_5_dev (res6n_term "D" "S") (pwell "G") (dn_bot...

Executing: extractDevice("oppdres" res6p_dev (res6p_term "D" "S") (nw "G") physical flag...

Executing: extractDevice("oppdres3" res6p_3_dev (res6p_term "D" "S") (nw "G") physical f...

Executing: extractDevice("oppdires" res6p_4_dev (res6p_term "D" "S") (nw "G") (substrate...

Executing: res6n_sblk_pwell = extractDevice("sblkndres" res6n_sblk (nfet_sd "S" "D") (pw...
           res6n_sblk_subs = extractDevice("sblkndres" res6n_sblk (nfet_sd "S" "D") (sub...

Executing: extractDevice("sblkndres3" res6n_3_sblk (nfet_sd "S" "D") (pwell "G") physica...

Executing: extractDevice("sblkndires" res6n_5_sblk (nfet_sd "S" "D") (pwell "G") (dn_bot...

Executing: extractDevice("sblkpdres" res6p_sblk (pfet_sd "S" "D") (nw "G") physical flag...

Executing: extractDevice("sblkpdres3" res6p_3_sblk (pfet_sd "S" "D") (nw "G") physical f...

Executing: extractDevice("sblkpdires" res6p_4_sblk (pfet_sd "S" "D") (nw "G") (substrate...

Executing: lx = measureParameter(perimeter (dev_ID over res_area) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over res_w_edge) 5e-07)

Executing: width = calculateParameter(((wx - 2e-07) / 2.0))

Executing: length = calculateParameter((lx - width))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistorHV_m))

Executing: res_mSwitch = calculateParameter((res_M + (length - length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: lx = measureParameter(perimeter (dev_ID over res_area) 5e-07)

Executing: wx = measureParameter(perimeter (dev_ID over res_w_edge) 5e-07)

Executing: width = calculateParameter(((wx - 2e-07) / 2.0))

Executing: length = calculateParameter((lx - width))

Executing: nameParameter(length "l")

Executing: nameParameter(width "w")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistorHV_m))

Executing: res_mSwitch = calculateParameter((res_M + (length - length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6n_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6n_width "w")

Executing: res6n_length = measureParameter(length (dev_ID coincident res6n_bar) 5e-07)

Executing: nameParameter(res6n_length "l")

Executing: res6n_res = calculateParameter((((2.0 * rend) + (rs * ((res6n_length * 100000...

Executing: nameParameter(res6n_res "r")

Executing: nameParameter(res6n_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6n_length - res6n_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6n_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6n_width "w")

Executing: res6n_length = measureParameter(length (dev_ID coincident res6n_bar) 5e-07)

Executing: nameParameter(res6n_length "l")

Executing: res6n_res = calculateParameter((((2.0 * rend) + (rs * ((res6n_length * 100000...

Executing: nameParameter(res6n_res "r")

Executing: nameParameter(res6n_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6n_length - res6n_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6n_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6n_width "w")

Executing: res6n_length = measureParameter(length (dev_ID coincident res6n_bar) 5e-07)

Executing: nameParameter(res6n_length "l")

Executing: res6n_res = calculateParameter((((2.0 * rend) + (rs * ((res6n_length * 100000...

Executing: nameParameter(res6n_res "r")

Executing: nameParameter(res6n_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6n_length - res6n_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(res6n_3_dev "floating" "1")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6p_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6p_width "w")

Executing: res6p_length = measureParameter(length (dev_ID coincident res6p_bar) 5e-07)

Executing: nameParameter(res6p_length "l")

Executing: res6p_res = calculateParameter((((2.0 * rend) + (rs * ((res6p_length * 100000...

Executing: nameParameter(res6p_res "r")

Executing: nameParameter(res6p_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6p_length - res6p_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6p_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6p_width "w")

Executing: res6p_length = measureParameter(length (dev_ID coincident res6p_bar) 5e-07)

Executing: nameParameter(res6p_length "l")

Executing: res6p_res = calculateParameter((((2.0 * rend) + (rs * ((res6p_length * 100000...

Executing: nameParameter(res6p_res "r")

Executing: nameParameter(res6p_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6p_length - res6p_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: res6p_width = measureParameter(length (dev_ID coincident op) 5e-07)

Executing: nameParameter(res6p_width "w")

Executing: res6p_length = measureParameter(length (dev_ID coincident res6p_bar) 5e-07)

Executing: nameParameter(res6p_length "l")

Executing: res6p_res = calculateParameter((((2.0 * rend) + (rs * ((res6p_length * 100000...

Executing: nameParameter(res6p_res "r")

Executing: nameParameter(res6p_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing resistor_m))

Executing: res_mSwitch = calculateParameter((res_M + (res6p_length - res6p_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(res6p_3_dev "floating" "1")

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: sblk_M = geomOverlap(dev_ID multi)

Executing: res6n_width = measureParameter(length (dev_ID coincident sblk) 5e-07)

Executing: nameParameter(res6n_width "w")

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: res6n_length = measureParameter(length (dev_ID coincident res6n_bar) 5e-07)

Executing: length_sblk = calculateParameter((res6n_length + length_plus))

Executing: nameParameter(length_sblk "l")

Executing: res6n_res = calculateParameter((((1.0 * rend) + (rs * ((res6n_length * 100000...

Executing: nameParameter(res6n_res "r")

Executing: nameParameter(res6n_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing sblk_M))

Executing: res_mSwitch = calculateParameter((res_M + (res6n_length - res6n_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: sblk_M = geomOverlap(dev_ID multi)

Executing: res6n_width = measureParameter(length (dev_ID coincident sblk) 5e-07)

Executing: nameParameter(res6n_width "w")

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: res6n_length = measureParameter(length (dev_ID coincident res6n_bar) 5e-07)

Executing: length_sblk = calculateParameter((res6n_length + length_plus))

Executing: nameParameter(length_sblk "l")

Executing: res6n_res = calculateParameter((((1.0 * rend) + (rs * ((res6n_length * 100000...

Executing: nameParameter(res6n_res "r")

Executing: nameParameter(res6n_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing sblk_M))

Executing: res_mSwitch = calculateParameter((res_M + (res6n_length - res6n_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: sblk_M = geomOverlap(dev_ID multi)

Executing: res6n_width = measureParameter(length (dev_ID coincident sblk) 5e-07)

Executing: nameParameter(res6n_width "w")

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: res6n_length = measureParameter(length (dev_ID coincident res6n_bar) 5e-07)

Executing: length_sblk = calculateParameter((res6n_length + length_plus))

Executing: nameParameter(length_sblk "l")

Executing: res6n_res = calculateParameter((((1.0 * rend) + (rs * ((res6n_length * 100000...

Executing: nameParameter(res6n_res "r")

Executing: nameParameter(res6n_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing sblk_M))

Executing: res_mSwitch = calculateParameter((res_M + (res6n_length - res6n_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(res6n_3_sblk "floating" "1")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: sblk_M = geomOverlap(dev_ID multi)

Executing: res6p_width = measureParameter(length (dev_ID coincident sblk) 5e-07)

Executing: nameParameter(res6p_width "w")

Executing: res6p_length = measureParameter(length (dev_ID coincident res6p_bar) 5e-07)

Executing: nameParameter(res6p_length "l")

Executing: res6p_res = calculateParameter((((1.0 * rend) + (rs * ((res6p_length * 100000...

Executing: nameParameter(res6p_res "r")

Executing: nameParameter(res6p_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing sblk_M))

Executing: res_mSwitch = calculateParameter((res_M + (res6p_length - res6p_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: sblk_M = geomOverlap(dev_ID multi)

Executing: res6p_width = measureParameter(length (dev_ID coincident sblk) 5e-07)

Executing: nameParameter(res6p_width "w")

Executing: res6p_length = measureParameter(length (dev_ID coincident res6p_bar) 5e-07)

Executing: nameParameter(res6p_length "l")

Executing: res6p_res = calculateParameter((((1.0 * rend) + (rs * ((res6p_length * 100000...

Executing: nameParameter(res6p_res "r")

Executing: nameParameter(res6p_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing sblk_M))

Executing: res_mSwitch = calculateParameter((res_M + (res6p_length - res6p_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "pbar" 1)

Executing: sblk_M = geomOverlap(dev_ID multi)

Executing: res6p_width = measureParameter(length (dev_ID coincident sblk) 5e-07)

Executing: nameParameter(res6p_width "w")

Executing: res6p_length = measureParameter(length (dev_ID coincident res6p_bar) 5e-07)

Executing: nameParameter(res6p_length "l")

Executing: res6p_res = calculateParameter((((1.0 * rend) + (rs * ((res6p_length * 100000...

Executing: nameParameter(res6p_res "r")

Executing: nameParameter(res6p_res "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing sblk_M))

Executing: res_mSwitch = calculateParameter((res_M + (res6p_length - res6p_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: saveProperty(res6p_3_sblk "floating" "1")

Executing: extractDevice("k1res" k1_dev_bb (k1_term "D" "S") (substrate "G") physical fl...

Executing: k1_dev_sx_pwell = extractDevice("k1res" k1_dev_sx (k1_term "D" "S") (pwell "G...
           k1_dev_sx_subs = extractDevice("k1res" k1_dev_sx (k1_term "D" "S") (substrate...

Executing: saveProperty(dev_ID "pbar" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: k1_multi = geomOverlap(dev_ID multi)

Executing: resk1_width = measureParameter(length (dev_ID butting k1_term) 5e-07)

Executing: nameParameter(resk1_width "w")

Executing: resk1_length = measureParameter(length (dev_ID coincident k1) 5e-07)

Executing: nameParameter(resk1_length "l")

Executing: resk1_R = calculateParameter((((rho * ((resk1_length * 1000000.0) + dl)) + (r...

Executing: nameParameter(resk1_R "r")

Executing: nameParameter(resk1_R "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing k1_multi))

Executing: res_mSwitch = calculateParameter((res_M + (resk1_length - resk1_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "pbar" 1)

Executing: saveProperty(dev_ID "s" 1)

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: k1_multi = geomOverlap(dev_ID multi)

Executing: resk1_width = measureParameter(length (dev_ID butting k1_term) 5e-07)

Executing: nameParameter(resk1_width "w")

Executing: resk1_length = measureParameter(length (dev_ID coincident k1) 5e-07)

Executing: nameParameter(resk1_length "l")

Executing: resk1_R = calculateParameter((((rho * ((resk1_length * 1000000.0) + dl)) + (r...

Executing: nameParameter(resk1_R "r")

Executing: nameParameter(resk1_R "reff")

Executing: res_M = measureParameter(figCount (dev_ID enclosing k1_multi))

Executing: res_mSwitch = calculateParameter((res_M + (resk1_length - resk1_length)))

Executing: nameParameter(res_mSwitch "mSwitch")

Executing: extractDevice("esdnsh_base" esdnsh_dev (esdnsh_drain "de") (pc_model "ge") (e...

Executing: extractDevice("esdpsh_base" esdpsh_dev (esdpsh_drain "de") (pc_model "ge") (e...

Executing: extractDevice("esdnsh_base_dn" esdnsh_dev_dn (esdnsh_drain "de") (pc_model "g...

Executing: extractDevice("esdpsh_base_dn" esdpsh_dev_dn (esdpsh_drain "de") (pc_model "g...

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: op_drain = geomAnd(geomButtOnly(sblk esdnpsh_drain) dev_ID)

Executing: op_source = geomAnd(geomButtOnly(sblk esdnpsh_source) dev_ID)

Executing: esdnsh_gate_area = measureParameter(area (dev_ID over esdnpsh_gate) 1e-12)

Executing: pc_length_size = measureParameter(length (dev_ID coincident esdnpsh_gate) 5e-07)

Executing: pc_length = calculateParameter((pc_length_size * 1.0))

Executing: pc_width = calculateParameter((esdnsh_gate_area / pc_length))

Executing: nf = measureParameter(figCount (dev_ID enclosing esdnpsh_gate))

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: op_drain_measure = measureParameter(length (dev_ID coincident op_drain) 1e-06)

Executing: op_drain_length = calculateParameter((((op_drain_measure - pc_width) / 2) + l...

Executing: op_source_measure = measureParameter(length (dev_ID coincident op_source) 1e-06)

Executing: op_source_length = calculateParameter((((op_source_measure - pc_width) / 2) +...

Executing: esdnpsh_50 = measureParameter(figCount (dev_ID enclosing esdnpsh_base50) 4.0)

Executing: esdnpsh_18 = measureParameter(figCount (dev_ID enclosing esdnpsh_base) 1.0)

Executing: esdnpsh_oxide = calculateParameter((esdnpsh_18 + esdnpsh_50))

Executing: esdnpsh_gns = measureParameter(figCount (dev_ID enclosing sblk_plus))

Executing: gns_parm = calculateParameter((esdnpsh_gns + (nf - nf)))

Executing: nameParameter(pc_length "lesd")

Executing: nameParameter(pc_width "wesd")

Executing: nameParameter(nf "nf")

Executing: nameParameter(op_drain_length "ldop")

Executing: nameParameter(op_source_length "lsop")

Executing: nameParameter(esdnpsh_oxide "esdoxide")

Executing: nameParameter(gns_parm "gns")

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: op_drain = geomAnd(geomButtOnly(sblk esdnpsh_drain) dev_ID)

Executing: op_source = geomAnd(geomButtOnly(sblk esdnpsh_source) dev_ID)

Executing: esdnsh_gate_area = measureParameter(area (dev_ID over esdnpsh_gate) 1e-12)

Executing: pc_length_size = measureParameter(length (dev_ID coincident esdnpsh_gate) 5e-07)

Executing: pc_length = calculateParameter((pc_length_size * 1.0))

Executing: pc_width = calculateParameter((esdnsh_gate_area / pc_length))

Executing: nf = measureParameter(figCount (dev_ID enclosing esdnpsh_gate))

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: op_drain_measure = measureParameter(length (dev_ID coincident op_drain) 1e-06)

Executing: op_drain_length = calculateParameter((((op_drain_measure - pc_width) / 2) + l...

Executing: op_source_measure = measureParameter(length (dev_ID coincident op_source) 1e-06)

Executing: op_source_length = calculateParameter((((op_source_measure - pc_width) / 2) +...

Executing: esdnpsh_50 = measureParameter(figCount (dev_ID enclosing esdnpsh_base50) 4.0)

Executing: esdnpsh_18 = measureParameter(figCount (dev_ID enclosing esdnpsh_base) 1.0)

Executing: esdnpsh_oxide = calculateParameter((esdnpsh_18 + esdnpsh_50))

Executing: esdnpsh_gns = measureParameter(figCount (dev_ID enclosing sblk_plus))

Executing: gns_parm = calculateParameter((esdnpsh_gns + (nf - nf)))

Executing: nameParameter(pc_length "lesd")

Executing: nameParameter(pc_width "wesd")

Executing: nameParameter(nf "nf")

Executing: nameParameter(op_drain_length "ldop")

Executing: nameParameter(op_source_length "lsop")

Executing: nameParameter(esdnpsh_oxide "esdoxide")

Executing: nameParameter(gns_parm "gns")

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: op_drain = geomAnd(geomButtOnly(sblk esdnpsh_drain) dev_ID)

Executing: op_source = geomAnd(geomButtOnly(sblk esdnpsh_source) dev_ID)

Executing: esdnsh_gate_area = measureParameter(area (dev_ID over esdnpsh_gate) 1e-12)

Executing: pc_length_size = measureParameter(length (dev_ID coincident esdnpsh_gate) 5e-07)

Executing: pc_length = calculateParameter((pc_length_size * 1.0))

Executing: pc_width = calculateParameter((esdnsh_gate_area / pc_length))

Executing: nf = measureParameter(figCount (dev_ID enclosing esdnpsh_gate))

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: op_drain_measure = measureParameter(length (dev_ID coincident op_drain) 1e-06)

Executing: op_drain_length = calculateParameter((((op_drain_measure - pc_width) / 2) + l...

Executing: op_source_measure = measureParameter(length (dev_ID coincident op_source) 1e-06)

Executing: op_source_length = calculateParameter((((op_source_measure - pc_width) / 2) +...

Executing: esdnpsh_50 = measureParameter(figCount (dev_ID enclosing esdnpsh_base50) 4.0)

Executing: esdnpsh_18 = measureParameter(figCount (dev_ID enclosing esdnpsh_base) 1.0)

Executing: esdnpsh_oxide = calculateParameter((esdnpsh_18 + esdnpsh_50))

Executing: esdnpsh_gns = measureParameter(figCount (dev_ID enclosing sblk_plus))

Executing: gns_parm = calculateParameter((esdnpsh_gns + (nf - nf)))

Executing: nameParameter(pc_length "lesd")

Executing: nameParameter(pc_width "wesd")

Executing: nameParameter(nf "nf")

Executing: nameParameter(op_drain_length "ldop")

Executing: nameParameter(op_source_length "lsop")

Executing: nameParameter(esdnpsh_oxide "esdoxide")

Executing: nameParameter(gns_parm "gns")

Executing: sblk_plus = geomAnd(dev_ID sblk_over_pc)

Executing: op_drain = geomAnd(geomButtOnly(sblk esdnpsh_drain) dev_ID)

Executing: op_source = geomAnd(geomButtOnly(sblk esdnpsh_source) dev_ID)

Executing: esdnsh_gate_area = measureParameter(area (dev_ID over esdnpsh_gate) 1e-12)

Executing: pc_length_size = measureParameter(length (dev_ID coincident esdnpsh_gate) 5e-07)

Executing: pc_length = calculateParameter((pc_length_size * 1.0))

Executing: pc_width = calculateParameter((esdnsh_gate_area / pc_length))

Executing: nf = measureParameter(figCount (dev_ID enclosing esdnpsh_gate))

Executing: length_plus = measureParameter(figCount (dev_ID enclosing sblk_plus) 1e-08)

Executing: op_drain_measure = measureParameter(length (dev_ID coincident op_drain) 1e-06)

Executing: op_drain_length = calculateParameter((((op_drain_measure - pc_width) / 2) + l...

Executing: op_source_measure = measureParameter(length (dev_ID coincident op_source) 1e-06)

Executing: op_source_length = calculateParameter((((op_source_measure - pc_width) / 2) +...

Executing: esdnpsh_50 = measureParameter(figCount (dev_ID enclosing esdnpsh_base50) 4.0)

Executing: esdnpsh_18 = measureParameter(figCount (dev_ID enclosing esdnpsh_base) 1.0)

Executing: esdnpsh_oxide = calculateParameter((esdnpsh_18 + esdnpsh_50))

Executing: esdnpsh_gns = measureParameter(figCount (dev_ID enclosing sblk_plus))

Executing: gns_parm = calculateParameter((esdnpsh_gns + (nf - nf)))

Executing: nameParameter(pc_length "lesd")

Executing: nameParameter(pc_width "wesd")

Executing: nameParameter(nf "nf")

Executing: nameParameter(op_drain_length "ldop")

Executing: nameParameter(op_source_length "lsop")

Executing: nameParameter(esdnpsh_oxide "esdoxide")

Executing: nameParameter(gns_parm "gns")

Executing: extractDevice("subc" sub_dev (sub_diff_top "SUBCON") (substrate "sub") flagMa...
         1 'subc' created in cell 'curr_mirror layout TUTORIAL'.

Executing: subc_area = measureParameter(area (sub_dev) 1e-12)

Executing: nameParameter(subc_area "a")

Executing: subc_perimeter = measureParameter(perimeter (sub_dev) 1e-06)

Executing: nameParameter(subc_perimeter "p")

Executing: subc_area_4 = calculateParameter((subc_area * 4.0))

Executing: subc_perim_2 = calculateParameter((subc_perimeter / 2.0))

Executing: subc_length = calculateParameter(((subc_perim_2 + sqrt(abs(((subc_perim_2 * s...

Executing: nameParameter(subc_length "l")

Executing: subc_width = calculateParameter(((subc_perim_2 - sqrt(abs(((subc_perim_2 * su...

Executing: nameParameter(subc_width "w")

Executing: extractDevice("tdndpw" ntie_device (ntie_top "MINUS") (pwell "PLUS") flagMalf...
           extractDevice("tdndsx" ntie_device (ntie_top "MINUS") (substrate "PLUS") flag...

Executing: extractDevice("tdpdnw" ptie_device (ptie_top "PLUS") (nw "MINUS") flagMalform...

Executing: extractDevice("wdnwsx" nwsx_device (nw "MINUS") (substrate "PLUS") flagMalfor...

Executing: extractDevice("tdndpw" ntie_in_sp (ntie_in_sp_top "MINUS") (pwell "PLUS") phy...

Executing: extractDevice("wddnsx" dnsx_device (dn_bottom_iso "MINUS") (substrate "PLUS")...

Executing: extractDevice("wdpwdn" pwdn_device (dn_bottom_iso "MINUS") (pwell "PLUS") fla...

Executing: diode_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(diode_area "area")

Executing: All_perimeter = measureParameter(perimeter (dev_ID) 1e-06)

Executing: length_inside = measureParameter(length (dev_ID coincident diode_inside) 1e-06)

Executing: diode_perimeter = calculateParameter((All_perimeter - length_inside))

Executing: nameParameter(diode_perimeter "perim")

Executing: diode_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(diode_area "area")

Executing: All_perimeter = measureParameter(perimeter (dev_ID) 1e-06)

Executing: length_inside = measureParameter(length (dev_ID coincident diode_inside) 1e-06)

Executing: diode_perimeter = calculateParameter((All_perimeter - length_inside))

Executing: nameParameter(diode_perimeter "perim")

Executing: diode_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(diode_area "area")

Executing: All_perimeter = measureParameter(perimeter (dev_ID) 1e-06)

Executing: length_inside = measureParameter(length (dev_ID coincident diode_inside) 1e-06)

Executing: diode_perimeter = calculateParameter((All_perimeter - length_inside))

Executing: nameParameter(diode_perimeter "perim")

Executing: diode_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(diode_area "area")

Executing: All_perimeter = measureParameter(perimeter (dev_ID) 1e-06)

Executing: length_inside = measureParameter(length (dev_ID coincident diode_inside) 1e-06)

Executing: diode_perimeter = calculateParameter((All_perimeter - length_inside))

Executing: nameParameter(diode_perimeter "perim")

Executing: diode_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(diode_area "area")

Executing: All_perimeter = measureParameter(perimeter (dev_ID) 1e-06)

Executing: length_inside = measureParameter(length (dev_ID coincident diode_inside) 1e-06)

Executing: diode_excluded = measureParameter(length (dev_ID coincident diode_modeled) 1e...

Executing: diode_perimeter = calculateParameter((All_perimeter - length_inside - diode_e...

Executing: nameParameter(diode_perimeter "perim")

Executing: diode_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(diode_area "area")

Executing: All_perimeter = measureParameter(perimeter (dev_ID) 1e-06)

Executing: length_inside = measureParameter(length (dev_ID coincident diode_inside) 1e-06)

Executing: diode_excluded = measureParameter(length (dev_ID coincident diode_modeled) 1e...

Executing: diode_perimeter = calculateParameter((All_perimeter - length_inside - diode_e...

Executing: nameParameter(diode_perimeter "perim")

Executing: extractDevice("corrPoint" corrPoint_dev_M2 (corrPoint_term_M2 "cp") flagMalfo...

Executing: extractDevice("corrPoint" corrPoint_dev_PD (corrPoint_term_PD "cp") flagMalfo...

Executing: extractDevice("corrPoint" corrPoint_dev_ND (corrPoint_term_ND "cp") flagMalfo...

Executing: extractDevice("corrPoint" corrPoint_dev_PC (corrPoint_term_PC "cp") flagMalfo...

Executing: extractDevice("corrPoint" corrPoint_dev_M1 (corrPoint_term_M1 "cp") flagMalfo...

Executing: extractDevice("esdvpnpnw" ESD_pdnw_diode (ESD_pdnw_plus "pd") (ESD_pdnw_minus...

Executing: extractDevice("esdvpnpnw" ESD_pdnw_diode_GR (ESD_pdnw_plus "pd") (ESD_pdnw_mi...

Executing: extractDevice("esdpdidn" ESD_pdnw_dn (ESD_pdnw_plus "pd") (ESD_pdnw_minus "nw...

Executing: extractDevice("esdndsx" ESD_ndsx (ESD_ndsx_plus_term "sx") (ESD_ndsx_minus "n...

Executing: extractDevice("esdndsx" ESD_ndsx_GR (ESD_ndsx_plus_term "sx") (ESD_ndsx_minus...

Executing: extractDevice("esdndidn" ESD_ndsx_dn (ESD_ndsx_plus_term "pw") (ESD_ndsx_minu...

Executing: pdnw_fingers = measureParameter(figCount (dev_ID enclosing ESD_pdnw_plus))

Executing: nameParameter(pdnw_fingers "nanod")

Executing: pdnw_perim = measureParameter(perimeter (dev_ID over ESD_pdnw_plus) 1e-06)

Executing: nameParameter(pdnw_perim "perim")

Executing: pdnw_area = measureParameter(area (dev_ID over ESD_pdnw_plus) 1e-12)

Executing: nameParameter(pdnw_area "area")

Executing: ESD_space = geomInside(drc(ESD_pdnw_plus ESD_pdnw_minus (sep < 2.2) opposite ...

Executing: ESD_edge_space = geomSize(geomGetEdge(ESD_space outside geomOr(ESD_pdnw_plus ...

Executing: tempSPACE = measureParameter(area (dev_ID over ESD_edge_space) 1e-05)

Executing: Number = measureParameter(figCount (dev_ID enclosing ESD_edge_space))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: nameParameter(SPACE "acsp")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: pdnw_fingers = measureParameter(figCount (dev_ID enclosing ESD_pdnw_plus))

Executing: nameParameter(pdnw_fingers "nanod")

Executing: pdnw_perim = measureParameter(perimeter (dev_ID over ESD_pdnw_plus) 1e-06)

Executing: nameParameter(pdnw_perim "perim")

Executing: pdnw_area = measureParameter(area (dev_ID over ESD_pdnw_plus) 1e-12)

Executing: nameParameter(pdnw_area "area")

Executing: ESD_edge_space = geomSize(geomGetEdge(ESD_space outside geomOr(ESD_pdnw_plus ...

Executing: tempSPACE = measureParameter(area (dev_ID over ESD_edge_space) 1e-05)

Executing: Number = measureParameter(figCount (dev_ID enclosing ESD_edge_space))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: nameParameter(SPACE "acsp")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: pdnw_fingers = measureParameter(figCount (dev_ID enclosing ESD_pdnw_plus))

Executing: nameParameter(pdnw_fingers "nanod")

Executing: pdnw_perim = measureParameter(perimeter (dev_ID over ESD_pdnw_plus) 1e-06)

Executing: nameParameter(pdnw_perim "perim")

Executing: pdnw_area = measureParameter(area (dev_ID over ESD_pdnw_plus) 1e-12)

Executing: nameParameter(pdnw_area "area")

Executing: ESD_edge_space = geomSize(geomGetEdge(ESD_space outside geomOr(ESD_pdnw_plus ...

Executing: tempSPACE = measureParameter(area (dev_ID over ESD_edge_space) 1e-05)

Executing: Number = measureParameter(figCount (dev_ID enclosing ESD_edge_space))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: nameParameter(SPACE "acsp")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: ndsx_fingers = measureParameter(figCount (dev_ID enclosing ESD_ndsx_minus))

Executing: nameParameter(ndsx_fingers "ncath")

Executing: ndsx_perim = measureParameter(perimeter (dev_ID over ESD_ndsx_minus) 1e-06)

Executing: nameParameter(ndsx_perim "perim")

Executing: ndsx_area = measureParameter(area (dev_ID over ESD_ndsx_minus) 1e-12)

Executing: nameParameter(ndsx_area "area")

Executing: ESD_ndsx_plus = geomAnd(rx ESD_ndsx_plus_term)

Executing: ESD_space = geomInside(drc(ESD_ndsx_plus ESD_ndsx_minus (sep < 2.2) opposite ...

Executing: ESD_edge_space = geomSize(geomGetEdge(ESD_space outside geomOr(ESD_ndsx_plus ...

Executing: tempSPACE = measureParameter(area (dev_ID over ESD_edge_space) 1e-05)

Executing: Number = measureParameter(figCount (dev_ID enclosing ESD_edge_space))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: nameParameter(SPACE "acsp")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: ndsx_fingers = measureParameter(figCount (dev_ID enclosing ESD_ndsx_minus))

Executing: nameParameter(ndsx_fingers "ncath")

Executing: ndsx_perim = measureParameter(perimeter (dev_ID over ESD_ndsx_minus) 1e-06)

Executing: nameParameter(ndsx_perim "perim")

Executing: ndsx_area = measureParameter(area (dev_ID over ESD_ndsx_minus) 1e-12)

Executing: nameParameter(ndsx_area "area")

Executing: ESD_edge_space = geomSize(geomGetEdge(ESD_space outside geomOr(ESD_ndsx_plus ...

Executing: tempSPACE = measureParameter(area (dev_ID over ESD_edge_space) 1e-05)

Executing: Number = measureParameter(figCount (dev_ID enclosing ESD_edge_space))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: nameParameter(SPACE "acsp")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: ndsx_fingers = measureParameter(figCount (dev_ID enclosing ESD_ndsx_minus))

Executing: nameParameter(ndsx_fingers "ncath")

Executing: ndsx_perim = measureParameter(perimeter (dev_ID over ESD_ndsx_minus) 1e-06)

Executing: nameParameter(ndsx_perim "perim")

Executing: ndsx_area = measureParameter(area (dev_ID over ESD_ndsx_minus) 1e-12)

Executing: nameParameter(ndsx_area "area")

Executing: ESD_edge_space = geomSize(geomGetEdge(ESD_space outside geomOr(ESD_ndsx_plus ...

Executing: tempSPACE = measureParameter(area (dev_ID over ESD_edge_space) 1e-05)

Executing: Number = measureParameter(figCount (dev_ID enclosing ESD_edge_space))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: nameParameter(SPACE "acsp")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("esdfdi50" esdfdi50_dev (esd_fdi_anod "a") (esd_hv_cath "c") (s...

Executing: extractDevice("esdfdi25" esdfdi25_dev (esd_fdi_anod "a") (esd_hv_cath "c") (s...

Executing: extractDevice("esdtdi25" esdtdi25_dev (esd_tdi_anod "a") (esd_hv_cath "c") (s...

Executing: extractDevice("esdtdi20" esdtdi20_dev (esd_tdi_anod "a") (esd_hv_cath "c") (s...

Executing: extractDevice("esdtdi50" esdtdi50_dev (esd_tdi_50_anod "a") (esd_hv_cath "c")...

Executing: esd_perim = measureParameter(perimeter (dev_ID over esd_fdi_meas) 1e-06)

Executing: esd_area = measureParameter(area (dev_ID over esd_fdi_meas) 1e-12)

Executing: esd_width_tot = calculateParameter(((2.0 * esd_area) / esd_length))

Executing: esd_nd = measureParameter(figCount (dev_ID enclosing esd_fdi_meas))

Executing: esd_width = calculateParameter((esd_width_tot / esd_nd))

Executing: nameParameter(esd_perim "perim")

Executing: nameParameter(esd_area "area")

Executing: nameParameter(esd_width_tot "wt")

Executing: nameParameter(esd_nd "m")

Executing: nameParameter(esd_width "w")

Executing: saveProperty(dev_ID "l" esd_length)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: esd_perim = measureParameter(perimeter (dev_ID over esd_fdi_meas) 1e-06)

Executing: esd_area = measureParameter(area (dev_ID over esd_fdi_meas) 1e-12)

Executing: esd_width_tot = calculateParameter(((2.0 * esd_area) / esd_length))

Executing: esd_nd = measureParameter(figCount (dev_ID enclosing esd_fdi_meas))

Executing: esd_width = calculateParameter((esd_width_tot / esd_nd))

Executing: nameParameter(esd_perim "perim")

Executing: nameParameter(esd_area "area")

Executing: nameParameter(esd_width_tot "wt")

Executing: nameParameter(esd_nd "m")

Executing: nameParameter(esd_width "w")

Executing: saveProperty(dev_ID "l" esd_length)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: esd_perim = measureParameter(perimeter (dev_ID over esd_tdi_anod) 1e-06)

Executing: esd_area = measureParameter(area (dev_ID over esd_tdi_anod) 1e-12)

Executing: esd_width_tot = calculateParameter(((2.0 * esd_area) / esd_length))

Executing: esd_nd = measureParameter(figCount (dev_ID enclosing esd_tdi_anod))

Executing: esd_width = calculateParameter((esd_width_tot / esd_nd))

Executing: nameParameter(esd_perim "perim")

Executing: nameParameter(esd_area "area")

Executing: nameParameter(esd_width_tot "wt")

Executing: nameParameter(esd_nd "m")

Executing: nameParameter(esd_width "w")

Executing: saveProperty(dev_ID "l" esd_length)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: esd_perim = measureParameter(perimeter (dev_ID over esd_tdi_anod) 1e-06)

Executing: esd_area = measureParameter(area (dev_ID over esd_tdi_anod) 1e-12)

Executing: esd_width_tot = calculateParameter(((2.0 * esd_area) / esd_length))

Executing: esd_nd = measureParameter(figCount (dev_ID enclosing esd_tdi_anod))

Executing: esd_width = calculateParameter((esd_width_tot / esd_nd))

Executing: nameParameter(esd_perim "perim")

Executing: nameParameter(esd_area "area")

Executing: nameParameter(esd_width_tot "wt")

Executing: nameParameter(esd_nd "m")

Executing: nameParameter(esd_width "w")

Executing: saveProperty(dev_ID "l" esd_length)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: esd_perim = measureParameter(perimeter (dev_ID over esd_tdi_anod) 1e-06)

Executing: esd_area = measureParameter(area (dev_ID over esd_tdi_anod) 1e-12)

Executing: esd_width_tot = calculateParameter(((2.0 * esd_area) / esd_length))

Executing: esd_nd = measureParameter(figCount (dev_ID enclosing esd_tdi_anod))

Executing: esd_width = calculateParameter((esd_width_tot / esd_nd))

Executing: nameParameter(esd_perim "perim")

Executing: nameParameter(esd_area "area")

Executing: nameParameter(esd_width_tot "wt")

Executing: nameParameter(esd_nd "m")

Executing: nameParameter(esd_width "w")

Executing: saveProperty(dev_ID "l" esd_length)

Executing: saveProperty(dev_ID "blockParasiticsBetween" "M1 sub")

Executing: extractDevice("cmim" MIMpi (mim_top "D") (mim_bot "S") (pwell "G") flagMalfor...

Executing: extractDevice("cmim" MIMdn (mim_top "D") (mim_bot "S") (pwell "G") flagMalfor...

Executing: extractDevice("cmim" MIMnw (mim_top "D") (mim_bot "S") (nw "G") flagMalformed...

Executing: extractDevice("cmim" MIMsx (mim_top "D") (mim_bot "S") (substrate "G") flagMa...

Executing: extractDevice("cmimhd" MIMhdpi (mim_top "D") (mim_bot "S") (pwell "G") flagMa...

Executing: extractDevice("cmimhd" MIMhddn (mim_top "D") (mim_bot "S") (pwell "G") flagMa...

Executing: extractDevice("cmimhd" MIMhdnw (mim_top "D") (mim_bot "S") (nw "G") flagMalfo...

Executing: extractDevice("cmimhd" MIMhdsx (mim_top "D") (mim_bot "S") (substrate "G") fl...

Executing: extractDevice("dualcmim" DUALMIMpi (dualmid "D") (dualbot "S") (pwell "G") fl...

Executing: extractDevice("dualcmim" DUALMIMdn (dualmid "D") (dualbot "S") (pwell "G") fl...

Executing: extractDevice("dualcmim" DUALMIMnw (dualmid "D") (dualbot "S") (nw "G") flagM...

Executing: extractDevice("dualcmim" DUALMIMsx (dualmid "D") (dualbot "S") (substrate "G"...

Executing: extractDevice("dualcmimhd" DUALMIMhdpi (dualmid "D") (dualbot "S") (pwell "G"...

Executing: extractDevice("dualcmimhd" DUALMIMhddn (dualmid "D") (dualbot "S") (pwell "G"...

Executing: extractDevice("dualcmimhd" DUALMIMhdnw (dualmid "D") (dualbot "S") (nw "G") f...

Executing: extractDevice("dualcmimhd" DUALMIMhdsx (dualmid "D") (dualbot "S") (substrate...

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(MIMpi "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(MIMhdpi "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(MIMdn "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(MIMhddn "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(MIMnw "bp" 1)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(MIMhdnw "bp" 1)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: mim_bb = measureParameter(figCount (MIMsx enclosing bb_mim) 2.0)

Executing: mim_sub = measureParameter(figCount (MIMsx enclosing sub_mim) 3.0)

Executing: mim_bp = calculateParameter((mim_bb + mim_sub))

Executing: nameParameter(mim_bp "bp")

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_mim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mimCArea = calculateParameter(((mimCA * (1 - mim_hd)) + (mimCA_hd * mim_hd)))

Executing: mimCperim = calculateParameter(((mimCP * (1 - mim_hd)) + (mim_hd_correction *...

Executing: mim_c = calculateParameter(((mimCArea * (mim_dw * mim_dl)) + (2 * mimCperim *...

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: mim_bb = measureParameter(figCount (MIMhdsx enclosing bb_mim) 2.0)

Executing: mim_sub = measureParameter(figCount (MIMhdsx enclosing sub_mim) 3.0)

Executing: mim_bp = calculateParameter((mim_bb + mim_sub))

Executing: nameParameter(mim_bp "bp")

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(DUALMIMpi "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(DUALMIMhdpi "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(DUALMIMdn "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(DUALMIMhddn "bp" 3)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(DUALMIMnw "bp" 1)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: saveProperty(DUALMIMhdnw "bp" 1)

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: dualmim_bb = measureParameter(figCount (DUALMIMsx enclosing bb_mim) 2.0)

Executing: dualmim_sub = measureParameter(figCount (DUALMIMsx enclosing sub_mim) 3.0)

Executing: dualmim_bp = calculateParameter((dualmim_bb + dualmim_sub))

Executing: nameParameter(dualmim_bp "bp")

Executing: mim_hds = geomAnd(dev_ID mimhd)

Executing: mim_multi = geomAnd(dev_ID multi_MIM)

Executing: mim_area = measureParameter(area (dev_ID over ht) 1e-12)

Executing: nameParameter(mim_area "a")

Executing: mim_perim = measureParameter(perimeter (dev_ID over ht) 1e-06)

Executing: nameParameter(mim_perim "p")

Executing: mim_w = measureParameter(area (dev_ID over width_label_dmim) 1e-05)

Executing: nameParameter(mim_w "w")

Executing: mim_l = calculateParameter((mim_area / mim_w))

Executing: nameParameter(mim_l "l")

Executing: mim_hdm = measureParameter(figCount (dev_ID enclosing mim_hds))

Executing: mim_hd = calculateParameter((mim_hdm + (mim_l - mim_l)))

Executing: nameParameter(mim_hd "hd")

Executing: mim_dw = calculateParameter((mim_w + mimDW))

Executing: mim_dl = calculateParameter((mim_l + mimDL))

Executing: dmim_std_c = calculateParameter(((dmimCA * ((mim_dl * mim_dw) + ((mim_dw + dm...

Executing: dmim_hd_c = calculateParameter(((dmimCA_hd * ((mim_dl * mim_dw) + ((mim_dw + ...

Executing: mim_c = calculateParameter(((dmim_std_c * (1 - mim_hd)) + (dmim_hd_c * mim_hd)))

Executing: nameParameter(mim_c "c")

Executing: nameParameter(mim_c "ceff")

Executing: mim_m = measureParameter(figCount (dev_ID enclosing mim_multi))

Executing: mim_mSwitch = calculateParameter((mim_m + (mim_l - mim_l)))

Executing: nameParameter(mim_mSwitch "mSwitch")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: mimL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: mimL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: mimL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: mimL_ind = calculateParameter(((mimL_ind_num2 + ((mimL_ind_num1 - mimL_ind_nu...

Executing: nameParameter(mimL_ind "setind")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "AM MT")

Executing: saveProperty(dev_ID "nlev" "6")

Executing: dualmim_bb = measureParameter(figCount (DUALMIMhdsx enclosing bb_mim) 2.0)

Executing: dualmim_sub = measureParameter(figCount (DUALMIMhdsx enclosing sub_mim) 3.0)

Executing: dualmim_bp = calculateParameter((dualmim_bb + dualmim_sub))

Executing: nameParameter(dualmim_bp "bp")

Executing: saveProperty(MIMpi "lm" 1)

Executing: saveProperty(DUALMIMpi "lm" 1)

Executing: saveProperty(MIMnw "lm" 1)

Executing: saveProperty(DUALMIMnw "lm" 1)

Executing: saveProperty(MIMdn "lm" 1)

Executing: saveProperty(DUALMIMdn "lm" 1)

Executing: saveProperty(MIMsx "lm" 1)

Executing: saveProperty(DUALMIMsx "lm" 1)

Executing: saveProperty(MIMhdpi "lm" 1)

Executing: saveProperty(DUALMIMhdpi "lm" 1)

Executing: saveProperty(MIMhdnw "lm" 1)

Executing: saveProperty(DUALMIMhdnw "lm" 1)

Executing: saveProperty(MIMhddn "lm" 1)

Executing: saveProperty(DUALMIMhddn "lm" 1)

Executing: saveProperty(MIMhdsx "lm" 1)

Executing: saveProperty(DUALMIMhdsx "lm" 1)

Executing: vncap_top1_pwell = extractDevice("vncap" vncap_top1 (vncap_term1 "IN" "OUT") ...
           vncap_top1_subs = extractDevice("vncap" vncap_top1 (vncap_term1 "IN" "OUT") (...

Executing: extractDevice("vncap" vncap_tnw1 (vncap_term1 "IN" "OUT") (nw "SUB") flagMalf...

Executing: vncap_topt_pwell = extractDevice("vncap" vncap_topt (vncap_termt "IN" "OUT") ...
           vncap_topt_subs = extractDevice("vncap" vncap_topt (vncap_termt "IN" "OUT") (...

Executing: extractDevice("vncap" vncap_tnwt (vncap_termt "IN" "OUT") (nw "SUB") flagMalf...

Executing: vncap_top2_pwell = extractDevice("vncap" vncap_top2 (vncap_term2 "IN" "OUT") ...
           vncap_top2_subs = extractDevice("vncap" vncap_top2 (vncap_term2 "IN" "OUT") (...

Executing: extractDevice("vncap" vncap_tnw2 (vncap_term2 "IN" "OUT") (nw "SUB") flagMalf...

Executing: vncap_top3_pwell = extractDevice("vncap" vncap_top3 (vncap_term3 "IN" "OUT") ...
           vncap_top3_subs = extractDevice("vncap" vncap_top3 (vncap_term3 "IN" "OUT") (...

Executing: extractDevice("vncap" vncap_tnw3 (vncap_term3 "IN" "OUT") (nw "SUB") flagMalf...

Executing: vncap_top4_pwell = extractDevice("vncap" vncap_top4 (vncap_term4 "IN" "OUT") ...
           vncap_top4_subs = extractDevice("vncap" vncap_top4 (vncap_term4 "IN" "OUT") (...

Executing: extractDevice("vncap" vncap_tnw4 (vncap_term4 "IN" "OUT") (nw "SUB") flagMalf...

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_top1_hv_pwell = extractDevice("vncap_hv" vncap_top1_hv (vncap_term1 "IN...
           vncap_top1_hv_subs = extractDevice("vncap_hv" vncap_top1_hv (vncap_term1 "IN"...

Executing: extractDevice("vncap_hv" vncap_tnw1_hv (vncap_term1 "IN" "OUT") (nw "SUB") fl...

Executing: vncap_topt_hv_pwell = extractDevice("vncap_hv" vncap_topt_hv (vncap_termt "IN...
           vncap_topt_hv_subs = extractDevice("vncap_hv" vncap_topt_hv (vncap_termt "IN"...

Executing: extractDevice("vncap_hv" vncap_tnwt_hv (vncap_termt "IN" "OUT") (nw "SUB") fl...

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_top2_hv_pwell = extractDevice("vncap_hv" vncap_top2_hv (vncap_term2 "IN...
           vncap_top2_hv_subs = extractDevice("vncap_hv" vncap_top2_hv (vncap_term2 "IN"...

Executing: extractDevice("vncap_hv" vncap_tnw2_hv (vncap_term2 "IN" "OUT") (nw "SUB") fl...

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_top3_hv_pwell = extractDevice("vncap_hv" vncap_top3_hv (vncap_term3 "IN...
           vncap_top3_hv_subs = extractDevice("vncap_hv" vncap_top3_hv (vncap_term3 "IN"...

Executing: extractDevice("vncap_hv" vncap_tnw3_hv (vncap_term3 "IN" "OUT") (nw "SUB") fl...

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_top4_hv_pwell = extractDevice("vncap_hv" vncap_top4_hv (vncap_term4 "IN...
           vncap_top4_hv_subs = extractDevice("vncap_hv" vncap_top4_hv (vncap_term4 "IN"...

Executing: extractDevice("vncap_hv" vncap_tnw4_hv (vncap_term4 "IN" "OUT") (nw "SUB") fl...

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: vncap_multi1 = geomEnclose(multi dev_ID)

Executing: vncap_multi = geomAnd(dev_ID vncap_multi1)

Executing: saveProperty(dev_ID "lm" 1)

Executing: saveProperty(dev_ID "nlev" 6)

Executing: length = measureParameter(area (dev_ID over vncap_L_edge) 5e-06)

Executing: nameParameter(length "l")

Executing: area = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(area "area")

Executing: width = calculateParameter((area / length))

Executing: nameParameter(width "w")

Executing: vncapL_ind_num1 = measureParameter(perimeter (dev_ID over INDL_ind_num) 10.0)

Executing: vncapL_ind_num2 = measureParameter(length (dev_ID coincident INDL_ind_num) 20.0)

Executing: vncapL_ind_exp = measureParameter(length (dev_ID coincident INDL_ind_exp) 20.0)

Executing: vncapL_ind = calculateParameter(((vncapL_ind_num2 + ((vncapL_ind_num1 - vncap...

Executing: nameParameter(vncapL_ind "setind")

Executing: vncap_m = measureParameter(figCount (dev_ID enclosing vncap_multi))

Executing: vncap_mSwitch = calculateParameter((vncap_m + (length - length)))

Executing: nameParameter(vncap_mSwitch "mSwitch")

Executing: vncap_nw = measureParameter(figCount (dev_ID enclosing nw_vncap) 1.0)

Executing: vncap_bb = measureParameter(figCount (dev_ID enclosing bb_vncap) 2.0)

Executing: vncap_sub = measureParameter(figCount (dev_ID enclosing sub_vncap) 3.0)

Executing: vncap_bp = calculateParameter((vncap_nw + vncap_bb + vncap_sub))

Executing: nameParameter(vncap_bp "bp")

Executing: vncap_pc_param = measureParameter(figCount (dev_ID enclosing VNCAP_PC) 1.0)

Executing: pc_param = calculateParameter(((1 * vncap_pc_param) + (length - length)))

Executing: nameParameter(pc_param "pc")

Executing: BL1 = measureParameter(figCount (dev_ID enclosing VNCAP_parm))

Executing: bl1 = calculateParameter(((length - length) + BL1))

Executing: nameParameter(bl1 "botlev")

Executing: TL1 = measureParameter(figCount (dev_ID enclosing VNCAP_count))

Executing: tl1 = calculateParameter(floor(((TL1 + bl1) - 1.0)))

Executing: nameParameter(tl1 "toplev")

Executing: saveProperty(dev_ID "m" 1)

Executing: saveProperty(dev_ID "par" 1)

Executing: saveProperty(dev_ID "est" 0)

Executing: saveProperty(dev_ID "blockParasiticsBetween2" "toplev2 botlev2 toplev botlev")

Executing: extractDevice("indline" am_transmission (am "out" "in") (ind_bb_term "BULK") ...

Executing: trans_width = measureParameter(length (am_transmission butting amTerm) 5e-07)

Executing: nameParameter(trans_width "w")

Executing: trans_area = measureParameter(area (am_transmission) 1e-12)

Executing: trans_length = calculateParameter((trans_area / trans_width))

Executing: nameParameter(trans_length "l")

Executing: saveProperty(am_transmission "blockParasiticsBetween" "AM sub")

Executing: saveProperty(am_transmission "grnd" -1)

Executing: indL_ind_num = measureParameter(area (am_transmission over INDL_ind_num))

Executing: indL_ind_exp = measureParameter(area (am_transmission over INDL_ind_exp))

Executing: indL_ind = calculateParameter((indL_ind_num / (power 10.0 indL_ind_exp)))

Executing: nameParameter(indL_ind "ind")

Executing: saveProperty(am_transmission "nlev" 6)

Executing: extractDevice("ind" ind2_mtam_m1 (trans_in_mt "in") (trans_out_am "out") (m1_...

Executing: extractDevice("ind" ind2_mtam_bb (trans_in_mt "in") (trans_out_am "out") (ind...

Executing: extractDevice("symind" symind3_amam_bb (symind_in "outpr") (symind_out "outse...

Executing: extractDevice("symind" symind2_amam_bb (symind_in "outpr") (symind_out "outse...

Executing: extractDevice("symind" symind3_amam_m1 (symind_in "outpr") (symind_out "outse...

Executing: extractDevice("symind" symind2_amam_m1 (symind_in "outpr") (symind_out "outse...

Executing: UNITY_1 = geomOr(DEV)

Executing: IND_M1 = geomOverlap(DEV m1)

Executing: am_CUT = drc(geomAndNot(am_intern mtTerm) (area > 250.0))

Executing: am_Whole = geomGetVertex(am_CUT (keep > 19.0))

Executing: am_Part = geomSize(geomGetNon90(geomAndNot(am_CUT am_Whole)) -0.1)

Executing: width_DEV = measureParameter(length (DEV coincident PLUS) 1e-06)

Executing: WU = measureParameter(length (DEV coincident MINUS) 1e-06)

Executing: tempSPACE = measureParameter(area (DEV over ind_space) 1e-12)

Executing: SPACE = calculateParameter((tempSPACE / width_DEV))

Executing: PERIM = measureParameter(perimeter (DEV over ind_xy))

Executing: IND_X = calculateParameter((PERIM / 4000000.0))

Executing: UNITY = measureParameter(figCount (DEV enclosing UNITY_1))

Executing: GRND1 = measureParameter(figCount (DEV enclosing IND_M1))

Executing: GRND = calculateParameter(((UNITY * -1.0) - GRND1))

Executing: Whole = measureParameter(figCount (DEV enclosing am_Whole))

Executing: Partial = measureParameter(figCount (DEV enclosing am_Part))

Executing: TURNS = calculateParameter(((Partial / 8.0) + Whole))

Executing: nameParameter(TURNS "n")

Executing: nameParameter(width_DEV "w")

Executing: nameParameter(WU "wu")

Executing: nameParameter(SPACE "s")

Executing: nameParameter(IND_X "x")

Executing: nameParameter(GRND "grnd")

Executing: saveProperty(DEV "blockParasiticsBetween" "AM sub")

Executing: saveProperty(DEV "nlev" "6")

Executing: UNITY_1 = geomOr(DEV)

Executing: IND_M1 = geomOverlap(DEV m1)

Executing: am_Whole = geomGetVertex(am_CUT (keep > 19.0))

Executing: am_Part = geomSize(geomGetNon90(geomAndNot(am_CUT am_Whole)) -0.1)

Executing: width_DEV = measureParameter(length (DEV coincident PLUS) 1e-06)

Executing: WU = measureParameter(length (DEV coincident MINUS) 1e-06)

Executing: tempSPACE = measureParameter(area (DEV over ind_space) 1e-12)

Executing: SPACE = calculateParameter((tempSPACE / width_DEV))

Executing: PERIM = measureParameter(perimeter (DEV over ind_xy))

Executing: IND_X = calculateParameter((PERIM / 4000000.0))

Executing: UNITY = measureParameter(figCount (DEV enclosing UNITY_1))

Executing: GRND1 = measureParameter(figCount (DEV enclosing IND_M1))

Executing: GRND = calculateParameter(((UNITY * -1.0) - GRND1))

Executing: Whole = measureParameter(figCount (DEV enclosing am_Whole))

Executing: Partial = measureParameter(figCount (DEV enclosing am_Part))

Executing: TURNS = calculateParameter(((Partial / 8.0) + Whole))

Executing: nameParameter(TURNS "n")

Executing: nameParameter(width_DEV "w")

Executing: nameParameter(WU "wu")

Executing: nameParameter(SPACE "s")

Executing: nameParameter(IND_X "x")

Executing: nameParameter(GRND "grnd")

Executing: saveProperty(DEV "blockParasiticsBetween" "AM sub")

Executing: saveProperty(DEV "nlev" "6")

Executing: Symind_edge_space = geomGetEdge(symind_space_s outside geomOr(PLUS am_intern))

Executing: Symind_edge_space_1 = geomSize(Symind_edge_space 1)

Executing: UNITY_1 = geomOr(DEV)

Executing: m1_plate = geomSize(geomSize(geomAndNot(geomAnd(m1 allInds) MIDDLE) -0.01) 0.01)

Executing: IND_M1 = geomOverlap(DEV m1_plate)

Executing: symind_center = geomGetBBox(DEV outputCenterMarker 1.0)

Executing: alternate_ct = geomAnd(MIDDLE symind_center)

Executing: Number_AM_internal = measureParameter(figCount (DEV enclosing am_intern))

Executing: TURNS = calculateParameter((Number_AM_internal / 1.0))

Executing: AREA_p = measureParameter(area (DEV over PLUS) 1e-12)

Executing: WIDTH_p = measureParameter(length (DEV coincident PLUS) 1e-06)

Executing: WIDTH_DEV = calculateParameter((AREA_p / WIDTH_p))

Executing: WUnderpass = measureParameter(length (DEV coincident MIDDLE) 1e-06)

Executing: tempSPACE = measureParameter(area (DEV over Symind_edge_space_1) 1e-06)

Executing: Number = measureParameter(figCount (DEV enclosing Symind_edge_space_1))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: PERIM = measureParameter(perimeter (DEV over bb))

Executing: IND_X = calculateParameter((PERIM / 4000000.0))

Executing: UNITY = measureParameter(figCount (DEV enclosing UNITY_1))

Executing: GRND1 = measureParameter(figCount (DEV enclosing IND_M1))

Executing: GRND = calculateParameter(((UNITY * -1.0) - GRND1))

Executing: ind_enh = measureParameter(figCount (DEV enclosing ind_xov))

Executing: ind_enhanced = calculateParameter((ind_enh + (TURNS - TURNS)))

Executing: altct = measureParameter(figCount (DEV enclosing alternate_ct))

Executing: wu = calculateParameter(if(((TURNS == 1.0) && (altct == 1.0)) then (WUnderpas...

Executing: nameParameter(TURNS "n")

Executing: nameParameter(WIDTH_DEV "w")

Executing: nameParameter(wu "wu")

Executing: nameParameter(SPACE "s")

Executing: nameParameter(IND_X "x")

Executing: nameParameter(GRND "grnd")

Executing: nameParameter(ind_enhanced "xov")

Executing: nameParameter(altct "altct")

Executing: saveProperty(DEV "blockParasiticsBetween" "AM sub")

Executing: Symind_edge_space_1 = geomSize(Symind_edge_space 1)

Executing: UNITY_1 = geomOr(DEV)

Executing: IND_M1 = geomOverlap(DEV m1_plate)

Executing: symind_center = geomGetBBox(DEV outputCenterMarker 1.0)

Executing: alternate_ct = geomAnd(MIDDLE symind_center)

Executing: Number_AM_internal = measureParameter(figCount (DEV enclosing am_intern))

Executing: TURNS = calculateParameter((Number_AM_internal / 1.0))

Executing: AREA_p = measureParameter(area (DEV over PLUS) 1e-12)

Executing: WIDTH_p = measureParameter(length (DEV coincident PLUS) 1e-06)

Executing: WIDTH_DEV = calculateParameter((AREA_p / WIDTH_p))

Executing: WUnderpass = measureParameter(length (DEV coincident MIDDLE) 1e-06)

Executing: tempSPACE = measureParameter(area (DEV over Symind_edge_space_1) 1e-06)

Executing: Number = measureParameter(figCount (DEV enclosing Symind_edge_space_1))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: PERIM = measureParameter(perimeter (DEV over bb))

Executing: IND_X = calculateParameter((PERIM / 4000000.0))

Executing: UNITY = measureParameter(figCount (DEV enclosing UNITY_1))

Executing: GRND1 = measureParameter(figCount (DEV enclosing IND_M1))

Executing: GRND = calculateParameter(((UNITY * -1.0) - GRND1))

Executing: ind_enh = measureParameter(figCount (DEV enclosing ind_xov))

Executing: ind_enhanced = calculateParameter((ind_enh + (TURNS - TURNS)))

Executing: altct = measureParameter(figCount (DEV enclosing alternate_ct))

Executing: wu = calculateParameter(if(((TURNS == 1.0) && (altct == 1.0)) then (WUnderpas...

Executing: nameParameter(TURNS "n")

Executing: nameParameter(WIDTH_DEV "w")

Executing: nameParameter(wu "wu")

Executing: nameParameter(SPACE "s")

Executing: nameParameter(IND_X "x")

Executing: nameParameter(GRND "grnd")

Executing: nameParameter(ind_enhanced "xov")

Executing: nameParameter(altct "altct")

Executing: saveProperty(DEV "blockParasiticsBetween" "AM sub")

Executing: Symind_edge_space_1 = geomSize(Symind_edge_space 1)

Executing: UNITY_1 = geomOr(DEV)

Executing: IND_M1 = geomOverlap(DEV m1)

Executing: saveProperty(DEV "wu" "-1.0e-6")

Executing: Number_AM_internal = measureParameter(figCount (DEV enclosing am_intern))

Executing: TURNS = calculateParameter((Number_AM_internal / 1.0))

Executing: AREA_p = measureParameter(area (DEV over PLUS) 1e-12)

Executing: WIDTH_p = measureParameter(length (DEV coincident PLUS) 1e-06)

Executing: WIDTH_DEV = calculateParameter((AREA_p / WIDTH_p))

Executing: tempSPACE = measureParameter(area (DEV over Symind_edge_space_1) 1e-06)

Executing: Number = measureParameter(figCount (DEV enclosing Symind_edge_space_1))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: PERIM = measureParameter(perimeter (DEV over bb))

Executing: IND_X = calculateParameter((PERIM / 4000000.0))

Executing: UNITY = measureParameter(figCount (DEV enclosing UNITY_1))

Executing: GRND1 = measureParameter(figCount (DEV enclosing IND_M1))

Executing: GRND = calculateParameter(((UNITY * -1.0) - GRND1))

Executing: ind_enh = measureParameter(figCount (DEV enclosing ind_xov))

Executing: ind_enhanced = calculateParameter((ind_enh + (TURNS - TURNS)))

Executing: nameParameter(TURNS "n")

Executing: nameParameter(WIDTH_DEV "w")

Executing: nameParameter(SPACE "s")

Executing: nameParameter(IND_X "x")

Executing: nameParameter(GRND "grnd")

Executing: nameParameter(ind_enhanced "xov")

Executing: saveProperty(DEV "blockParasiticsBetween" "AM sub")

Executing: Symind_edge_space_1 = geomSize(Symind_edge_space 1)

Executing: UNITY_1 = geomOr(DEV)

Executing: IND_M1 = geomOverlap(DEV m1)

Executing: saveProperty(DEV "wu" "-1.0e-6")

Executing: Number_AM_internal = measureParameter(figCount (DEV enclosing am_intern))

Executing: TURNS = calculateParameter((Number_AM_internal / 1.0))

Executing: AREA_p = measureParameter(area (DEV over PLUS) 1e-12)

Executing: WIDTH_p = measureParameter(length (DEV coincident PLUS) 1e-06)

Executing: WIDTH_DEV = calculateParameter((AREA_p / WIDTH_p))

Executing: tempSPACE = measureParameter(area (DEV over Symind_edge_space_1) 1e-06)

Executing: Number = measureParameter(figCount (DEV enclosing Symind_edge_space_1))

Executing: SPACE = calculateParameter((tempSPACE / max(Number 1)))

Executing: PERIM = measureParameter(perimeter (DEV over bb))

Executing: IND_X = calculateParameter((PERIM / 4000000.0))

Executing: UNITY = measureParameter(figCount (DEV enclosing UNITY_1))

Executing: GRND1 = measureParameter(figCount (DEV enclosing IND_M1))

Executing: GRND = calculateParameter(((UNITY * -1.0) - GRND1))

Executing: ind_enh = measureParameter(figCount (DEV enclosing ind_xov))

Executing: ind_enhanced = calculateParameter((ind_enh + (TURNS - TURNS)))

Executing: nameParameter(TURNS "n")

Executing: nameParameter(WIDTH_DEV "w")

Executing: nameParameter(SPACE "s")

Executing: nameParameter(IND_X "x")

Executing: nameParameter(GRND "grnd")

Executing: nameParameter(ind_enhanced "xov")

Executing: saveProperty(DEV "blockParasiticsBetween" "AM sub")

Executing: saveProperty(symind3_amam_m1 "nlev" "6")

Executing: saveProperty(symind3_amam_bb "nlev" "6")

Executing: saveProperty(symind2_amam_m1 "nlev" "6")

Executing: saveProperty(symind2_amam_bb "nlev" "6")

Executing: extractDevice("devicepad" padOverDev (padOverDev_top "pad") flagMalformed (na...

Executing: saveProperty(padOverDev "c" 1e-15)

Executing: extractDevice("bondpad" bondPpc (bondPad_top "in") (pc_model "gp") (substrate...

Executing: extractDevice("bondpad" bondPm1 (bondPad_top "in") (m1_model "gp") (substrate...

Executing: extractDevice("bondpad" bondPbb (bondPad_top "in") (bond_bb_term "gp") (subst...

Executing: bondPad_a = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(bondPad_a "area")

Executing: bondPad_p = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(bondPad_p "perim")

Executing: bondPad_rect = geomGetRectangle(bondPad)

Executing: bondPad_poly = geomGetPolygon(bondPad)

Executing: bondPad_rect1 = measureParameter(figCount (dev_ID enclosing bondPad_rect))

Executing: bondPad_poly1 = measureParameter(figCount (dev_ID enclosing bondPad_poly))

Executing: bondPad_RorP = calculateParameter((bondPad_rect1 - bondPad_poly1))

Executing: nameParameter(bondPad_RorP "rect")

Executing: bondPad_a = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(bondPad_a "area")

Executing: bondPad_p = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(bondPad_p "perim")

Executing: bondPad_rect = geomGetRectangle(bondPad)

Executing: bondPad_poly = geomGetPolygon(bondPad)

Executing: bondPad_rect1 = measureParameter(figCount (dev_ID enclosing bondPad_rect))

Executing: bondPad_poly1 = measureParameter(figCount (dev_ID enclosing bondPad_poly))

Executing: bondPad_RorP = calculateParameter((bondPad_rect1 - bondPad_poly1))

Executing: nameParameter(bondPad_RorP "rect")

Executing: bondPad_a = measureParameter(area (dev_ID) 1e-12)

Executing: nameParameter(bondPad_a "area")

Executing: bondPad_p = measureParameter(perimeter (dev_ID) 1e-06)

Executing: nameParameter(bondPad_p "perim")

Executing: bondPad_rect = geomGetRectangle(bondPad)

Executing: bondPad_poly = geomGetPolygon(bondPad)

Executing: bondPad_rect1 = measureParameter(figCount (dev_ID enclosing bondPad_rect))

Executing: bondPad_poly1 = measureParameter(figCount (dev_ID enclosing bondPad_poly))

Executing: bondPad_RorP = calculateParameter((bondPad_rect1 - bondPad_poly1))

Executing: nameParameter(bondPad_RorP "rect")

Executing: saveProperty(bondPpc "bp" "7")

Executing: saveProperty(bondPm1 "bp" "8")

Executing: saveProperty(bondPbb "bp" "2")

Executing: saveProperty(bondPpc "blockParasiticsBetween" "AM sub")

Executing: saveProperty(bondPm1 "blockParasiticsBetween" "AM sub")

Executing: saveProperty(bondPbb "blockParasiticsBetween" "AM sub")

Executing: saveProperty(bondPpc "nlev" "6")

Executing: saveProperty(bondPm1 "nlev" "6")

Executing: saveProperty(bondPbb "nlev" "6")

Executing: extractDevice("efuse" efuse (efuse_anod "in") (efuse_cath "out") flagMalforme...

Executing: coupledA_shieldT = extractDevice("coupledwires" coupledA (trans_va1_am "va1")...
           coupledA_shield4 = extractDevice("coupledwires" coupledA (trans_va1_am "va1")...
           coupledA_shield3 = extractDevice("coupledwires" coupledA (trans_va1_am "va1")...
           coupledA_shield2 = extractDevice("coupledwires" coupledA (trans_va1_am "va1")...
           coupledA_shield1 = extractDevice("coupledwires" coupledA (trans_va1_am "va1")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 2.5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 5e-13)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: dist = measureParameter(area (dev_ID over coupledSpace) 5e-06)

Executing: nameParameter(dist "d")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal) 0.5)

Executing: SEVEN = calculateParameter((UNITY * 7.0))

Executing: nameParameter(SEVEN "layerads")

Executing: am_couple_shield_m1 = measureParameter(figCount (coupledA enclosing shield1) ...

Executing: am_couple_shield_mt = measureParameter(figCount (coupledA enclosing shieldT) ...

Executing: am_couple_shield_m2 = measureParameter(figCount (coupledA enclosing shield2) ...

Executing: am_couple_shield_m3 = measureParameter(figCount (coupledA enclosing shield3) ...

Executing: am_couple_shield_m4 = measureParameter(figCount (coupledA enclosing shield4) ...

Executing: am_couple_shield = calculateParameter((am_couple_shield_mt + am_couple_shield...

Executing: nameParameter(am_couple_shield "overads")

Executing: saveProperty(coupledA "nlev" "6")

Executing: singleEndA_shieldT = extractDevice("singlewire" singleEndA (trans_va_am "va")...
           singleEndA_shield4 = extractDevice("singlewire" singleEndA (trans_va_am "va")...
           singleEndA_shield3 = extractDevice("singlewire" singleEndA (trans_va_am "va")...
           singleEndA_shield2 = extractDevice("singlewire" singleEndA (trans_va_am "va")...
           singleEndA_shield1 = extractDevice("singlewire" singleEndA (trans_va_am "va")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 1e-12)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal))

Executing: SEVEN = calculateParameter((UNITY * 7.0))

Executing: nameParameter(SEVEN "layerads")

Executing: am_single_shield_m1 = measureParameter(figCount (singleEndA enclosing shield1...

Executing: am_single_shield_mt = measureParameter(figCount (singleEndA enclosing shieldT...

Executing: am_single_shield_m2 = measureParameter(figCount (singleEndA enclosing shield2...

Executing: am_single_shield_m3 = measureParameter(figCount (singleEndA enclosing shield3...

Executing: am_single_shield_m4 = measureParameter(figCount (singleEndA enclosing shield4...

Executing: am_single_shield = calculateParameter((am_single_shield_mt + am_single_shield...

Executing: nameParameter(am_single_shield "overads")

Executing: saveProperty(singleEndA "nlev" "6")

Executing: coupledT_shield4 = extractDevice("coupledwires" coupledT (trans_va1_mt "va1")...
           coupledT_shield3 = extractDevice("coupledwires" coupledT (trans_va1_mt "va1")...
           coupledT_shield2 = extractDevice("coupledwires" coupledT (trans_va1_mt "va1")...
           coupledT_shield1 = extractDevice("coupledwires" coupledT (trans_va1_mt "va1")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 2.5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 5e-13)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: dist = measureParameter(area (dev_ID over coupledSpace) 5e-06)

Executing: nameParameter(dist "d")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal) 0.5)

Executing: SIX = calculateParameter((UNITY * 6.0))

Executing: nameParameter(SIX "layerads")

Executing: mt_couple_shield_m1 = measureParameter(figCount (coupledT enclosing shield1) ...

Executing: mt_couple_shield_m2 = measureParameter(figCount (coupledT enclosing shield2) ...

Executing: mt_couple_shield_m3 = measureParameter(figCount (coupledT enclosing shield3) ...

Executing: mt_couple_shield_m4 = measureParameter(figCount (coupledT enclosing shield4) ...

Executing: mt_couple_shield = calculateParameter((mt_couple_shield_m4 + mt_couple_shield...

Executing: nameParameter(mt_couple_shield "overads")

Executing: saveProperty(coupledT "nlev" "6")

Executing: singleEndT_shield4 = extractDevice("singlewire" singleEndT (trans_va_mt "va")...
           singleEndT_shield3 = extractDevice("singlewire" singleEndT (trans_va_mt "va")...
           singleEndT_shield2 = extractDevice("singlewire" singleEndT (trans_va_mt "va")...
           singleEndT_shield1 = extractDevice("singlewire" singleEndT (trans_va_mt "va")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 1e-12)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal))

Executing: SIX = calculateParameter((UNITY * 6.0))

Executing: nameParameter(SIX "layerads")

Executing: mt_single_shield_m1 = measureParameter(figCount (singleEndT enclosing shield1...

Executing: mt_single_shield_m2 = measureParameter(figCount (singleEndT enclosing shield2...

Executing: mt_single_shield_m3 = measureParameter(figCount (singleEndT enclosing shield3...

Executing: mt_single_shield_m4 = measureParameter(figCount (singleEndT enclosing shield4...

Executing: mt_single_shield = calculateParameter((mt_single_shield_m4 + mt_single_shield...

Executing: nameParameter(mt_single_shield "overads")

Executing: saveProperty(singleEndT "nlev" "6")

Executing: coupled4_shield3 = extractDevice("coupledwires" coupled4 (trans_va1_m4 "va1")...
           coupled4_shield2 = extractDevice("coupledwires" coupled4 (trans_va1_m4 "va1")...
           coupled4_shield1 = extractDevice("coupledwires" coupled4 (trans_va1_m4 "va1")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 2.5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 5e-13)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: dist = measureParameter(area (dev_ID over coupledSpace) 5e-06)

Executing: nameParameter(dist "d")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal) 0.5)

Executing: FOUR = calculateParameter((UNITY * 4.0))

Executing: nameParameter(FOUR "layerads")

Executing: m4_couple_shield_m1 = measureParameter(figCount (coupled4 enclosing shield1) ...

Executing: m4_couple_shield_m2 = measureParameter(figCount (coupled4 enclosing shield2) ...

Executing: m4_couple_shield_m3 = measureParameter(figCount (coupled4 enclosing shield3) ...

Executing: m4_couple_shield = calculateParameter((m4_couple_shield_m3 + m4_couple_shield...

Executing: nameParameter(m4_couple_shield "overads")

Executing: saveProperty(coupled4 "nlev" "6")

Executing: singleEnd4_shield3 = extractDevice("singlewire" singleEnd4 (trans_va_m4 "va")...
           singleEnd4_shield2 = extractDevice("singlewire" singleEnd4 (trans_va_m4 "va")...
           singleEnd4_shield1 = extractDevice("singlewire" singleEnd4 (trans_va_m4 "va")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 1e-12)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal))

Executing: FOUR = calculateParameter((UNITY * 4.0))

Executing: nameParameter(FOUR "layerads")

Executing: m4_single_shield_m1 = measureParameter(figCount (singleEnd4 enclosing shield1...

Executing: m4_single_shield_m2 = measureParameter(figCount (singleEnd4 enclosing shield2...

Executing: m4_single_shield_m3 = measureParameter(figCount (singleEnd4 enclosing shield3...

Executing: m4_single_shield = calculateParameter((m4_single_shield_m3 + m4_single_shield...

Executing: nameParameter(m4_single_shield "overads")

Executing: saveProperty(singleEnd4 "nlev" "6")

Executing: coupled3_shield2 = extractDevice("coupledwires" coupled3 (trans_va1_m3 "va1")...
           coupled3_shield1 = extractDevice("coupledwires" coupled3 (trans_va1_m3 "va1")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 2.5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 5e-13)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: dist = measureParameter(area (dev_ID over coupledSpace) 5e-06)

Executing: nameParameter(dist "d")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal) 0.5)

Executing: THREE = calculateParameter((UNITY * 3.0))

Executing: nameParameter(THREE "layerads")

Executing: m3_couple_shield_m1 = measureParameter(figCount (coupled3 enclosing shield1) ...

Executing: m3_couple_shield_m2 = measureParameter(figCount (coupled3 enclosing shield2) ...

Executing: m3_couple_shield = calculateParameter((m3_couple_shield_m2 + m3_couple_shield...

Executing: nameParameter(m3_couple_shield "overads")

Executing: saveProperty(coupled3 "nlev" "6")

Executing: singleEnd3_shield2 = extractDevice("singlewire" singleEnd3 (trans_va_m3 "va")...
           singleEnd3_shield1 = extractDevice("singlewire" singleEnd3 (trans_va_m3 "va")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 1e-12)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal))

Executing: THREE = calculateParameter((UNITY * 3.0))

Executing: nameParameter(THREE "layerads")

Executing: m3_single_shield_m2 = measureParameter(figCount (singleEnd3 enclosing shield2...

Executing: m3_single_shield_m1 = measureParameter(figCount (singleEnd3 enclosing shield1...

Executing: m3_single_shield = calculateParameter((m3_single_shield_m2 + m3_single_shield...

Executing: nameParameter(m3_single_shield "overads")

Executing: saveProperty(singleEnd3 "nlev" "6")

Executing: coupled2_shield1 = extractDevice("coupledwires" coupled2 (trans_va1_m2 "va1")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 2.5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 5e-13)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: dist = measureParameter(area (dev_ID over coupledSpace) 5e-06)

Executing: nameParameter(dist "d")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal) 0.5)

Executing: TWO = calculateParameter((UNITY * 2.0))

Executing: nameParameter(TWO "layerads")

Executing: m2_couple_shield = measureParameter(figCount (coupled2 enclosing shield1) 1.0)

Executing: nameParameter(m2_couple_shield "overads")

Executing: saveProperty(coupled2 "nlev" "6")

Executing: singleEnd2_shield1 = extractDevice("singlewire" singleEnd2 (trans_va_m2 "va")...

Executing: width = measureParameter(area (dev_ID over signalWidth) 5e-06)

Executing: nameParameter(width "w")

Executing: area = measureParameter(area (dev_ID over signal) 1e-12)

Executing: length = calculateParameter(((area / width) + 4e-08))

Executing: nameParameter(length "l")

Executing: space1 = measureParameter(area (dev_ID over shieldSpace) 2.5e-06)

Executing: space = calculateParameter((space1 - (area - area)))

Executing: nameParameter(space "s")

Executing: Side = measureParameter(figCount (dev_ID enclosing shieldSpace) 0.25)

Executing: side = calculateParameter((Side - (area - area)))

Executing: nameParameter(side "shieldsads")

Executing: saveProperty(dev_ID "blockParasiticsBetween" "layerads overads")

Executing: UNITY = measureParameter(figCount (dev_ID enclosing signal))

Executing: TWO = calculateParameter((UNITY * 2.0))

Executing: nameParameter(TWO "layerads")

Executing: m2_single_shield = measureParameter(figCount (singleEnd2 enclosing shield1) 1.0)

Executing: nameParameter(m2_single_shield "overads")

Executing: saveProperty(singleEnd2 "nlev" "6")

Executing: extractDevice("lvsres" m1_RES_min (m1_model "MINUS" "PLUS") physical (namePre...
           extractDevice("lvsres" m1_RES_min (m1_resistive "MINUS" "PLUS") physical (nam...
           extractDevice("lvsres" m1_RES_min (m1_resistive "MINUS") (m1_model "PLUS") ph...

Executing: extractDevice("lvsres" mt_RES_min (mt_model "MINUS" "PLUS") physical (namePre...
           extractDevice("lvsres" mt_RES_min (mt_resistive "MINUS" "PLUS") physical (nam...
           extractDevice("lvsres" mt_RES_min (mt_resistive "MINUS") (mt_model "PLUS") ph...

Executing: extractDevice("lvsres" m2_RES_min (m2_model "MINUS" "PLUS") physical (namePre...
           extractDevice("lvsres" m2_RES_min (m2_resistive "MINUS" "PLUS") physical (nam...
           extractDevice("lvsres" m2_RES_min (m2_resistive "MINUS") (m2_model "PLUS") ph...

Executing: extractDevice("lvsres" m3_RES_min (m3_model "MINUS" "PLUS") physical (namePre...
           extractDevice("lvsres" m3_RES_min (m3_resistive "MINUS" "PLUS") physical (nam...
           extractDevice("lvsres" m3_RES_min (m3_resistive "MINUS") (m3_model "PLUS") ph...

Executing: extractDevice("lvsres" m4_RES_min (m4_model "MINUS" "PLUS") physical (namePre...
           extractDevice("lvsres" m4_RES_min (m4_resistive "MINUS" "PLUS") physical (nam...
           extractDevice("lvsres" m4_RES_min (m4_resistive "MINUS") (m4_model "PLUS") ph...

Executing: extractDevice("lvsres" am_RES_min (am "MINUS" "PLUS") physical (namePrefix "R...

Executing: saveDerived((RF ("OUTLINE" "rf") ext_view)

Executing: saveDerived((transmission1 ("OUTLINE" "TRANS") ext_view)

Executing: saveDerived((ind ("OUTLINE" "IND") ext_view)

Executing: saveRecognition(vncap_tnw1 "device")

Executing: saveRecognition(vncap_top1 "device")

Executing: saveRecognition(vncap_tnwt "device")

Executing: saveRecognition(vncap_topt "device")

Executing: saveRecognition(vncap_tnw1_hv "device")

Executing: saveRecognition(vncap_top1_hv "device")

Executing: saveRecognition(vncap_tnwt_hv "device")

Executing: saveRecognition(vncap_topt_hv "device")

Executing: saveRecognition(vncap_tnw2 "device")

Executing: saveRecognition(vncap_top2 "device")

Executing: saveRecognition(vncap_tnw2_hv "device")

Executing: saveRecognition(vncap_top2_hv "device")

Executing: saveRecognition(vncap_tnw3 "device")

Executing: saveRecognition(vncap_top3 "device")

Executing: saveRecognition(vncap_tnw3_hv "device")

Executing: saveRecognition(vncap_top3_hv "device")

Executing: saveRecognition(vncap_tnw4 "device")

Executing: saveRecognition(vncap_top4 "device")

Executing: saveRecognition(vncap_tnw4_hv "device")

Executing: saveRecognition(vncap_top4_hv "device")

Executing: saveRecognition(ntie_device "device")

Executing: saveRecognition(ptie_device "device")

Executing: saveRecognition(nwsx_device "device")

Executing: saveRecognition(ntie_in_sp "device")

Executing: saveRecognition(dnsx_device "device")

Executing: saveRecognition(pwdn_device "device")

Executing: saveRecognition(nfet20mh_dev "device")

Executing: saveRecognition(nfet20hs_dev "device")

Executing: saveRecognition(nfet50hs_dev "device")

Executing: saveRecognition(nfeti20h_dev "device")

Executing: saveRecognition(nfeti20t_dev "device")

Executing: saveRecognition(nfeti25m_dev "device")

Executing: saveRecognition(nfeti50h_dev "device")

Executing: saveRecognition(nfeti50m_dev "device")

Executing: saveRecognition(nfeti50t_dev "device")

Executing: saveRecognition(pfet20h_dev "device")

Executing: saveRecognition(pfet20t_dev "device")

Executing: saveRecognition(pfet20hs_dev "device")

Executing: saveRecognition(pfet25m_dev "device")

Executing: saveRecognition(pfet50h_dev "device")

Executing: saveRecognition(pfet50hs_dev "device")

Executing: saveRecognition(pfet50m_dev "device")

Executing: saveRecognition(pfet50t_dev "device")

Executing: saveRecognition(pjfet_dev "device")

Executing: saveRecognition(vnpn_dev "device")

Executing: saveRecognition(vpnp_dev "device")

Executing: saveRecognition(nfeti_dev "device")

Executing: saveRecognition(nfet6_dn_dev_b "device")

Executing: saveRecognition(nfeti_dn_dev_b "device")

Executing: saveRecognition(nfet6_dn_dev "device")

Executing: saveRecognition(nfeti_dn_dev "device")

Executing: saveRecognition(nfeti_dev_TG "device")

Executing: saveRecognition(nfeti_dev_HVT "device")

Executing: saveRecognition(nfet6_dev "device")

Executing: saveRecognition(nfet6_dev_TG "device")

Executing: saveRecognition(nfRF6_dn_dev "device")

Executing: saveRecognition(nfRFi_dn_dev "device")

Executing: saveRecognition(nfRF6_dn_mul "device")

Executing: saveRecognition(nfRFi_dn_mul "device")

Executing: saveRecognition(nfRF_dev "device")

Executing: saveRecognition(nfRF_mul "device")

Executing: saveRecognition(nfRFi_mul "device")

Executing: saveRecognition(nfRFi_dev "device")

Executing: saveRecognition(nfRF6_mul "device")

Executing: saveRecognition(nfRF6_dev "device")

Executing: saveRecognition(nfet_dev "device")

Executing: saveRecognition(nfet_dev_TG "device")

Executing: saveRecognition(nfet_dev_HVT "device")

Executing: saveRecognition(nfet_dev_HVT_b "device")

Executing: saveRecognition(nfet_dev_SHVT "device")

Executing: saveRecognition(nfet_dev_SHVT_b "device")

Executing: saveRecognition(nfet_dev_b "device")

Executing: saveRecognition(nfeti_dev_b "device")

Executing: saveRecognition(nfeti_dev_HVT_b "device")

Executing: saveRecognition(nfet_mul "device")

Executing: saveRecognition(nfet_mul_TG "device")

Executing: saveRecognition(nfet_mul_HVT "device")

Executing: saveRecognition(nfet_mul_SHVT "device")

Executing: saveRecognition(nfet6_mul "device")

Executing: saveRecognition(nfeti_mul "device")

Executing: saveRecognition(nfet6_dn_mul "device")

Executing: saveRecognition(nfeti_dn_mul "device")

Executing: saveRecognition(nfet6_mul_TG "device")

Executing: saveRecognition(nfeti_mul_TG "device")

Executing: saveRecognition(nfet6_dn_dev_TG "device")

Executing: saveRecognition(nfeti_dn_dev_TG "device")

Executing: saveRecognition(nfet6_dn_mul_TG "device")

Executing: saveRecognition(nfeti_dn_mul_TG "device")

Executing: saveRecognition(nfet6_dn_dev_HVT_b "device")

Executing: saveRecognition(nfeti_dn_dev_HVT_b "device")

Executing: saveRecognition(nfet6_dn_dev_HVT "device")

Executing: saveRecognition(nfeti_dn_dev_HVT "device")

Executing: saveRecognition(nfet6_dn_mul_HVT "device")

Executing: saveRecognition(nfeti_dn_mul_HVT "device")

Executing: saveRecognition(nfeti_mul_HVT "device")

Executing: saveRecognition(pfRF_dev "device")

Executing: saveRecognition(pfRF5_dn_dev "device")

Executing: saveRecognition(pfRFi_dn_dev "device")

Executing: saveRecognition(pfRF_mul "device")

Executing: saveRecognition(pfRF5_dn_mul "device")

Executing: saveRecognition(pfRFi_dn_mul "device")

Executing: saveRecognition(pfet_dev "device")

Executing: saveRecognition(pfet5_dn_dev_b "device")

Executing: saveRecognition(pfeti_dn_dev_b "device")

Executing: saveRecognition(pfet5_dn_dev "device")

Executing: saveRecognition(pfeti_dn_dev "device")

Executing: saveRecognition(pfet5_dn_dev_HVT_b "device")

Executing: saveRecognition(pfeti_dn_dev_HVT_b "device")

Executing: saveRecognition(pfet5_dn_dev_HVT "device")

Executing: saveRecognition(pfeti_dn_dev_HVT "device")

Executing: saveRecognition(pfet_dev_TG "device")

Executing: saveRecognition(pfet5_dn_dev_TG "device")

Executing: saveRecognition(pfeti_dn_dev_TG "device")

Executing: saveRecognition(pfet_mul_TG "device")

Executing: saveRecognition(pfet5_dn_mul_TG "device")

Executing: saveRecognition(pfeti_dn_mul_TG "device")

Executing: saveRecognition(pfet_dev_HVT "device")

Executing: saveRecognition(pfet_dev_HVT_b "device")

Executing: saveRecognition(pfet_dev_SHVT "device")

Executing: saveRecognition(pfet_dev_SHVT_b "device")

Executing: saveRecognition(pfet_dev_b "device")

Executing: saveRecognition(pfet_mul "device")

Executing: saveRecognition(pfet5_dn_mul "device")

Executing: saveRecognition(pfeti_dn_mul "device")

Executing: saveRecognition(pfet5_dn_mul_HVT "device")

Executing: saveRecognition(pfeti_dn_mul_HVT "device")

Executing: saveRecognition(pfet_mul_HVT "device")

Executing: saveRecognition(pfet_mul_SHVT "device")

Executing: saveRecognition(efuse "device")

Executing: saveRecognition(DI_diode "device")

Executing: saveRecognition(DIPI_diode "device")

Executing: saveRecognition(DI_VPNP "device")

Executing: saveRecognition(ntie_device "device")

Executing: saveRecognition(ptie_device "device")

Executing: saveRecognition(mosvar_dev "device")

Executing: saveRecognition(mosvar50_dev "device")

Executing: saveRecognition(pcdcap50_dev "device")

Executing: saveRecognition(pcap_dev "device")

Executing: saveRecognition(pcap50_dev "device")

Executing: saveRecognition(ncap_dev "device")

Executing: saveRecognition(pcdcapt_dev "device")

Executing: saveRecognition(ESD_pdnw_diode "device")

Executing: saveRecognition(ESD_pdnw_diode_GR "device")

Executing: saveRecognition(ESD_ndsx "device")

Executing: saveRecognition(ESD_ndsx_GR "device")

Executing: saveRecognition(ESD_ndsx_dn "device")

Executing: saveRecognition(ESD_pdnw_dn "device")

Executing: saveRecognition(SBD "device")

Executing: saveRecognition(rnw6pc_dev "device")

Executing: saveRecognition(rnw6pc_dev_no_bp "device")

Executing: saveRecognition(res6pc_dev "device")

Executing: saveRecognition(res6pc_dev_no_bp "device")

Executing: saveRecognition(rnw6rr_dev "device")

Executing: saveRecognition(res6rr_dev "device")

Executing: saveRecognition(rnw6rp_dev "device")

Executing: saveRecognition(res6rp_dev "device")

Executing: saveRecognition(hvnwres_dev "device")

Executing: saveRecognition(hvpwres_dev "device")

Executing: saveRecognition(res6n_dev "device")

Executing: saveRecognition(res6n_5_dev "device")

Executing: saveRecognition(res6n_3_dev "device")

Executing: saveRecognition(res6p_dev "device")

Executing: saveRecognition(res6p_4_dev "device")

Executing: saveRecognition(res6p_3_dev "device")

Executing: saveRecognition(res6n_sblk "device")

Executing: saveRecognition(res6n_5_sblk "device")

Executing: saveRecognition(res6n_3_sblk "device")

Executing: saveRecognition(res6p_sblk "device")

Executing: saveRecognition(res6p_4_sblk "device")

Executing: saveRecognition(res6p_3_sblk "device")

Executing: saveRecognition(k1_dev_bb "device")

Executing: saveRecognition(k1_dev_sx "device")

Executing: saveRecognition(esdnsh_dev "device")

Executing: saveRecognition(esdnsh_dev_dn "device")

Executing: saveRecognition(esdpsh_dev "device")

Executing: saveRecognition(esdpsh_dev_dn "device")

Executing: saveRecognition(am_transmission "device")

Executing: saveRecognition(ind2_mtam_m1 "device")

Executing: saveRecognition(ind2_mtam_bb "device")

Executing: saveRecognition(symind3_amam_m1 "device")

Executing: saveRecognition(symind3_amam_bb "device")

Executing: saveRecognition(symind2_amam_m1 "device")

Executing: saveRecognition(symind2_amam_bb "device")

Executing: saveRecognition(coupledA "device")

Executing: saveRecognition(singleEndA "device")

Executing: saveRecognition(coupledT "device")

Executing: saveRecognition(singleEndT "device")

Executing: saveRecognition(coupled4 "device")

Executing: saveRecognition(singleEnd4 "device")

Executing: saveRecognition(coupled3 "device")

Executing: saveRecognition(singleEnd3 "device")

Executing: saveRecognition(coupled2 "device")

Executing: saveRecognition(singleEnd2 "device")

Executing: saveRecognition(MIMpi "device")

Executing: saveRecognition(MIMdn "device")

Executing: saveRecognition(MIMnw "device")

Executing: saveRecognition(MIMsx "device")

Executing: saveRecognition(DUALMIMpi "device")

Executing: saveRecognition(DUALMIMdn "device")

Executing: saveRecognition(DUALMIMnw "device")

Executing: saveRecognition(DUALMIMsx "device")

Executing: saveRecognition(MIMhdpi "device")

Executing: saveRecognition(MIMhddn "device")

Executing: saveRecognition(MIMhdnw "device")

Executing: saveRecognition(MIMhdsx "device")

Executing: saveRecognition(DUALMIMhdpi "device")

Executing: saveRecognition(DUALMIMhddn "device")

Executing: saveRecognition(DUALMIMhdnw "device")

Executing: saveRecognition(DUALMIMhdsx "device")

Executing: saveRecognition(bondPpc "device")

Executing: saveRecognition(bondPm1 "device")

Executing: saveRecognition(bondPbb "device")

Executing: saveRecognition(padOverDev "device")

Executing: saveRecognition(sub_dev "device")

Executing: saveRecognition(corrPoint_dev_PD "device")

Executing: saveRecognition(corrPoint_dev_ND "device")

Executing: saveRecognition(corrPoint_dev_PC "device")

Executing: saveRecognition(corrPoint_dev_M1 "device")

Executing: saveRecognition(esdfdi25_dev "device")

Executing: saveRecognition(esdfdi50_dev "device")

Executing: saveRecognition(esdtdi20_dev "device")

Executing: saveRecognition(esdtdi25_dev "device")

Executing: saveRecognition(esdtdi50_dev "device")

Executing: saveRecognition(corrPoint_dev_M2 "device")

Executing: saveRecognition(m1_RES_min "device")

Executing: saveRecognition(m2_RES_min "device")

Executing: saveRecognition(m3_RES_min "device")

Executing: saveRecognition(m4_RES_min "device")

Executing: saveRecognition(mt_RES_min "device")

Executing: saveRecognition(am_RES_min "device")

Executing: errorLayer(geomOverlap(bkgnd chipedge) "###### SIX levels of metal M1-M2-M3-M4-MT-AM #####")

Executing: (saveInterconnect (k1_term "M2") (padOverDev_top "AM") (ntie_in_sp_top "RX") ...

Finished running rules. Task processor time in main process:
cpu: 1.43  elap: 2  pf: 0  in: 0  out: 0  virt: 182M  phys: 864M

No output post-processing: This is not a DRC run

Finished building the persistent database.
cpu: 0.01  elap: 0  pf: 0  in: 0  out: 0  virt: 187M  phys: 864M


*****  aveng terminated normally  *****


Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/aveng

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avrpt /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf
Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets
@(#)$CDS: avrpt_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:22 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113

run on localhost.localdomain from /pkg/Cadence/installs/ASSURA41/tools.lnx86/assura/bin/64bit/avrpt on Sat Dec 12 22:17:52 2015


   Creating Error Database 'myrun'...

   Reading VDB ...
--------------------------------------------------------------------------------
Rule      Message                                    FlatCount     RealCount
--------------------------------------------------------------------------------
(    1)  dataAuditErrors                                     0            0
(    2)  GRESDTDI20_REV: ESDTDI20 Revision must b            0            0
(    3)  GRESDTDI25_REV: ESDTDI25 Revision must b            0            0
(    4)  GRESDFDI25_REV: ESDFDI25 Revision must b            0            0
(    5)  GRESDFDI50_REV: ESDFDI50 Revision must b            0            0
(    6)  GRESDTDI50_REV: ESDTDI50 Revision must b            0            0
(    7)  SBLK without OP                                     0            0
(    8)  ESDPDIDN device touching ns pi rn nr pr             0            0
(    9)  ESDVPNPNW device touching ns pi rn nr pr            0            0
(   10)  ESDNDIDN device touching ns pi rn nw nr             0            0
(   11)  ESDNDSX device touching ns pi rn nw nr p            0            0
(   12)  esdtdi50 anod wiring not allowed through            0            0
(   13)  esdfdi25/50 anod wiring not allowed thro            0            0
(   14)  ESDFDI device touching ns pi rn nr pr bb            0            0
(   15)  ESDTDI device touching ns pi rn nw nr pr            0            0
(   16)  efuse device without bp                             0            0
(   17)  efuse device touching ns rx pi rn nw nr             0            0
(   18)  VPNP/VNPN device touching ns pi rn nw nr            0            0
(   19)  High Voltage Resistor device (hvnwres) t            0            0
(   20)  High Voltage Resistor device (hvpwres) t            0            0
(   21)  High Voltage Resistor device touching ns            0            0
(   22)  HAVAR device touching pi,nw,nr,pr,dg,pc,            0            0
(   23)  HAVAR device outside ns or bb                       0            0
(   24)  SBD device must be covered by DN                    0            0
(   25)  SBDI device touching ns pi nw nr pr tg n            0            0
(   26)  DI Diode device without bp                          0            0
(   27)  DI Diode device touching ns pi rn nr pr             0            0
(   28)  DIVPNP device touching ns pi rn nr pr bb            0            0
(   29)  DIPI Diode device touching ns pi rn nr p            0            0
(   30)  DIPI Diode device touching nw,bp                    0            0
(   31)  pcapi or pcapim devices touching ns pi r            0            0
(   32)  mosvar, mosvarm or pcdcapm devices touch            0            0
(   33)  P+ diffusion in ncap nwell found                    0            0
(   34)  pcdcap devices touching ns pi rn nr pr n            0            0
(   35)  Dual gate poly device without M1/CA conn            0            0
(   36)  N+ Diffused Resistor device touching ns,            0            0
(   37)  FET device touching ns,jd,rn,bb,rr,rp,pd            0            0
(   38)  FET HV device touching  ns,pi,rn,nr,pr,b            0            0
(   39)  Diffused Resistor device touching bb,dg,            0            0
(   40)  Polysilicon Resistor device touching rx,            0            0
(   41)  Polysilicon Resistor device not covered             0            0
(   42)  Polysilicon Resistor device BB touching             0            0
(   43)  P Poly resistor RR BB touching pi,ns,nw,            0            0
(   44)  P Poly resistor RP BB touching pi,ns,nw,            0            0
(   45)  (AM res) not covered by mask AM                     0            0
(   46)  (MT res) not covered by mask MT                     0            0
(   47)  (M4 res) not covered by mask M4                     0            0
(   48)  (M3 res) not covered by mask M3                     0            0
(   49)  (M2 res) not covered by mask M2                     0            0
(   50)  (M1 res) not covered by mask M1                     0            0
(   51)  Overlapping transmission lines - termina            0            0
(   52)  inductor device without bb                          0            0
(   53)  inductor device touching ns,jd,pi,rn,nw,            0            0
(   54)  M3 and M4 inside enhanced Inductor model            0            0
(   55)  M3/M4 inside standard inductor model is             0            0
(   56)  Missing v2 vias on symind coils between             0            0
(   57)  Missing v3 vias on symind coils between             0            0
(   58)  Missing v4 vias on symind coils between             0            0
(   59)  Missing v2 vias on symind coils between             0            0
(   60)  Missing v3 vias on symind coils between             0            0
(   61)  Missing v4 vias on symind coils between             0            0
(   62)  Missing ft vias on symind coils between             0            0
(   63)  Missing ft vias on symind coils between             0            0
(   64)  Missing ft vias on ind coils between mt             0            0
(   65)  AM signal wire exiting symetrical induct            0            0
(   66)  Center tap signal wire exiting symetrica            0            0
(   67)  Center tap signal wire exiting symetrica            0            0
(   68)  AM signal wire not exiting transmission             0            0
(   69)  M4 signal wire not exiting transmission             0            0
(   70)  MT signal wire not exiting transmission             0            0
(   71)  M3 signal wire not exiting transmission             0            0
(   72)  M2 signal wire not exiting transmission             0            0
(   73)  No FT via over HT                                   0            0
(   74)  No FT via over QT                                   0            0
(   75)  MODEL concern - K1 resistor not totally             0            0
(   76)  K1 resistor device touching rxhv sn dp s            0            0
(   77)  nw_StampErrorConnect                                0            0
(   78)  nw_StampErrorFloat                                  0            0
(   79)  nw_StampErrorMult                                   0            0
(   80)  bb_StampErrorConnect                                0            0
(   81)  bb_StampErrorMult                                   0            0
(   82)  nw_StampErrorConnect                                0            0
(   83)  nw_StampErrorFloat                                  0            0
(   84)  nw_StampErrorMult                                   0            0
(   85)  sn_StampErrorConnect                                0            0
(   86)  sn_StampErrorFloat                                  0            0
(   87)  sn_StampErrorMult                                   0            0
(   88)  rn_StampErrorConnect                                0            0
(   89)  rn_StampErrorFloat                                  0            0
(   90)  rn_StampErrorMult                                   0            0
(   91)  ncap_nw_StampErrorConnect                           0            0
(   92)  ncap_nw_StampErrorFloat                             0            0
(   93)  ncap_nw_StampErrorMult                              0            0
(   94)  DIPI_nw_StampErrorConnect                           0            0
(   95)  DIPI_nw_StampErrorFloat                             0            0
(   96)  DIPI_nw_StampErrorMult                              0            0
(   97)  well_StampErrorConnect                              0            0
(   98)  well_StampErrorFloat                                0            0
(   99)  well_StampErrorMult                                 0            0
(  100)  pi_StampErrorConnect                                0            0
(  101)  pi_StampErrorFloat                                  0            0
(  102)  pi_StampErrorMult                                   0            0
(  103)  dn_StampErrorConnect                                0            0
(  104)  dn_StampErrorFloat                                  0            0
(  105)  dn_StampErrorMult                                   0            0
(  106)  sbdi_dn_StampErrorConnect                           0            0
(  107)  sbdi_dn_StampErrorFloat                             0            0
(  108)  sbdi_dn_StampErrorMult                              0            0
(  109)  pwell_StampErrorConnect                             0            0
(  110)  pwell_StampErrorFloat                               0            0
(  111)  pwell_StampErrorMult                                0            0
(  112)  substrate_ptap_StampErrorCon                        0            0
(  113)  substrate_StampErrorCon                             0            0
(  114)  sub_nti_StampErrorCon                               0            0
(  115)  Mixed voltage net found : 3V3 or 5V diff            0            0
(  116)  Mixed voltage net found : High Voltage d            0            0
(  117)  ptap connected to POWER net found !                 0            0
(  118)  pwtap connected to POWER net found !                0            0
(  119)  forward biased ptie device found ! [tdpd            0            0
(  120)  forward biased ntie device found ! [tdnd            0            0
(  121)  forward biased pwdn device found ! [wdpw            0            0
(  122)  NW ring not connected to a power net fou            0            0
(  123)  ###### SIX levels of metal M1-M2-M3-M4-M            0            0
(  124)  malformed device vnpn_dev                           0            0
(  125)  malformed device vpnp_dev                           0            0
(  126)  malformed device nfet20hs_dev                       0            0
(  127)  malformed device nfet50hs_dev                       0            0
(  128)  malformed device nfet20mh_dev                       0            0
(  129)  malformed device nfeti20h_dev                       0            0
(  130)  malformed device nfeti20t_dev                       0            0
(  131)  malformed device nfeti25m_dev                       0            0
(  132)  malformed device nfeti50h_dev                       0            0
(  133)  malformed device nfeti50m_dev                       0            0
(  134)  malformed device nfeti50t_dev                       0            0
(  135)  malformed device pfet20hs_dev                       0            0
(  136)  malformed device pfet50hs_dev                       0            0
(  137)  malformed device pfet20h_dev                        0            0
(  138)  malformed device pfet20t_dev                        0            0
(  139)  malformed device pfet25m_dev                        0            0
(  140)  malformed device pfet50h_dev                        0            0
(  141)  malformed device pfet50m_dev                        0            0
(  142)  malformed device pfet50t_dev                        0            0
(  143)  malformed device nfeti_dn_dev_b                     0            0
(  144)  malformed device nfet6_dn_dev_b                     0            0
(  145)  malformed device nfeti_dn_dev                       0            0
(  146)  malformed device nfet6_dn_dev                       0            0
(  147)  malformed device nfeti_dn_dev_HVT_b                 0            0
(  148)  malformed device nfet6_dn_dev_HVT_b                 0            0
(  149)  malformed device nfeti_dn_dev_HVT                   0            0
(  150)  malformed device nfet6_dn_dev_HVT                   0            0
(  151)  malformed device nfeti_dn_dev_TG                    0            0
(  152)  malformed device nfet6_dn_dev_TG                    0            0
(  153)  malformed device nfeti_dn_mul                       0            0
(  154)  malformed device nfet6_dn_mul                       0            0
(  155)  malformed device nfeti_dn_mul_HVT                   0            0
(  156)  malformed device nfet6_dn_mul_HVT                   0            0
(  157)  malformed device nfeti_dn_mul_TG                    0            0
(  158)  malformed device nfet6_dn_mul_TG                    0            0
(  159)  malformed device nfet_dev                           0            0
(  160)  malformed device nfet_dev_b                         0            0
(  161)  malformed device nfet_mul                           0            0
(  162)  malformed device nfeti_dev                          0            0
(  163)  malformed device nfeti_dev_b                        0            0
(  164)  malformed device nfeti_mul                          0            0
(  165)  malformed device nfet6_dev                          0            0
(  166)  malformed device nfet6_mul                          0            0
(  167)  malformed device nfet_dev_TG                        0            0
(  168)  malformed device nfet_mul_TG                        0            0
(  169)  malformed device nfeti_dev_TG                       0            0
(  170)  malformed device nfeti_mul_TG                       0            0
(  171)  malformed device nfet6_dev_TG                       0            0
(  172)  malformed device nfet6_mul_TG                       0            0
(  173)  malformed device nfet_dev_HVT                       0            0
(  174)  malformed device nfet_mul_HVT                       0            0
(  175)  malformed device nfet_dev_HVT_b                     0            0
(  176)  malformed device nfet_dev_SHVT                      0            0
(  177)  malformed device nfet_mul_SHVT                      0            0
(  178)  malformed device nfet_dev_SHVT_b                    0            0
(  179)  malformed device nfeti_dev_HVT                      0            0
(  180)  malformed device nfeti_mul_HVT                      0            0
(  181)  malformed device nfeti_dev_HVT_b                    0            0
(  182)  malformed device pfeti_dn_dev_b                     0            0
(  183)  malformed device pfet5_dn_dev_b                     0            0
(  184)  malformed device pfeti_dn_dev                       0            0
(  185)  malformed device pfet5_dn_dev                       0            0
(  186)  malformed device pfeti_dn_mul                       0            0
(  187)  malformed device pfet5_dn_mul                       0            0
(  188)  malformed device pfeti_dn_dev_HVT_b                 0            0
(  189)  malformed device pfet5_dn_dev_HVT_b                 0            0
(  190)  malformed device pfeti_dn_dev_HVT                   0            0
(  191)  malformed device pfet5_dn_dev_HVT                   0            0
(  192)  malformed device pfeti_dn_mul_HVT                   0            0
(  193)  malformed device pfet5_dn_mul_HVT                   0            0
(  194)  malformed device pfeti_dn_dev_TG                    0            0
(  195)  malformed device pfet5_dn_dev_TG                    0            0
(  196)  malformed device pfeti_dn_mul_TG                    0            0
(  197)  malformed device pfet5_dn_mul_TG                    0            0
(  198)  malformed device pfet_dev                           0            0
(  199)  malformed device pfet_dev_b                         0            0
(  200)  malformed device pfet_mul                           0            0
(  201)  malformed device pfet_dev_TG                        0            0
(  202)  malformed device pfet_mul_TG                        0            0
(  203)  malformed device pfet_dev_HVT                       0            0
(  204)  malformed device pfet_dev_HVT_b                     0            0
(  205)  malformed device pfet_mul_HVT                       0            0
(  206)  malformed device pfet_dev_SHVT                      0            0
(  207)  malformed device pfet_dev_SHVT_b                    0            0
(  208)  malformed device pfet_mul_SHVT                      0            0
(  209)  malformed device nfRFi_dn_dev                       0            0
(  210)  malformed device nfRF6_dn_dev                       0            0
(  211)  malformed device nfRFi_dn_mul                       0            0
(  212)  malformed device nfRF6_dn_mul                       0            0
(  213)  malformed device nfRFi_dev                          0            0
(  214)  malformed device nfRF6_dev                          0            0
(  215)  malformed device nfRF_dev                           0            0
(  216)  malformed device nfRFi_mul                          0            0
(  217)  malformed device nfRF6_mul                          0            0
(  218)  malformed device nfRF_mul                           0            0
(  219)  malformed device pfRFi_dn_dev                       0            0
(  220)  malformed device pfRF5_dn_dev                       0            0
(  221)  malformed device pfRFi_dn_mul                       0            0
(  222)  malformed device pfRF5_dn_mul                       0            0
(  223)  malformed device pfRF_dev                           0            0
(  224)  malformed device pfRF_mul                           0            0
(  225)  malformed device SBD                                0            0
(  226)  malformed device DI_diode                           0            0
(  227)  malformed device DIPI_diode                         0            0
(  228)  malformed device DI_VPNP                            0            0
(  229)  malformed device mosvar_dev                         0            0
(  230)  malformed device mosvar50_dev                       0            0
(  231)  malformed device pcdcap50_dev                       0            0
(  232)  malformed device ncap_dev                           0            0
(  233)  malformed device pcdcapt_dev                        0            0
(  234)  malformed device pjfet_dev                          0            0
(  235)  malformed device rnw6pc_dev_no_bp                   0            0
(  236)  malformed device res6pc_dev_no_bp                   0            0
(  237)  malformed device rnw6pc_dev                         0            0
(  238)  malformed device res6pc_dev                         0            0
(  239)  malformed device rnw6rr_dev                         0            0
(  240)  malformed device res6rr_dev                         0            0
(  241)  malformed device rnw6rp_dev                         0            0
(  242)  malformed device res6rp_dev                         0            0
(  243)  malformed device hvnwres_dev                        0            0
(  244)  malformed device hvpwres_dev                        0            0
(  245)  malformed device res6n_dev                          0            0
(  246)  malformed device res6n_3_dev                        0            0
(  247)  malformed device res6n_5_dev                        0            0
(  248)  malformed device res6p_dev                          0            0
(  249)  malformed device res6p_3_dev                        0            0
(  250)  malformed device res6p_4_dev                        0            0
(  251)  malformed device res6n_sblk                         0            0
(  252)  malformed device res6n_3_sblk                       0            0
(  253)  malformed device res6n_5_sblk                       0            0
(  254)  malformed device res6p_sblk                         0            0
(  255)  malformed device res6p_3_sblk                       0            0
(  256)  malformed device res6p_4_sblk                       0            0
(  257)  malformed device k1_dev_bb                          0            0
(  258)  malformed device k1_dev_sx                          0            0
(  259)  malformed device esdnsh_dev                         0            0
(  260)  malformed device esdpsh_dev                         0            0
(  261)  malformed device esdnsh_dev_dn                      0            0
(  262)  malformed device esdpsh_dev_dn                      0            0
(  263)  malformed device sub_dev                            0            0
(  264)  malformed device ntie_device                        0            0
(  265)  malformed device ptie_device                        0            0
(  266)  malformed device nwsx_device                        0            0
(  267)  malformed device ntie_in_sp                         0            0
(  268)  malformed device dnsx_device                        0            0
(  269)  malformed device pwdn_device                        0            0
(  270)  malformed device corrPoint_dev_M2                   0            0
(  271)  malformed device corrPoint_dev_PD                   0            0
(  272)  malformed device corrPoint_dev_ND                   0            0
(  273)  malformed device corrPoint_dev_PC                   0            0
(  274)  malformed device corrPoint_dev_M1                   0            0
(  275)  malformed device ESD_pdnw_diode                     0            0
(  276)  malformed device ESD_pdnw_diode_GR                  0            0
(  277)  malformed device ESD_ndsx                           0            0
(  278)  malformed device ESD_ndsx_GR                        0            0
(  279)  malformed device esdfdi50_dev                       0            0
(  280)  malformed device esdfdi25_dev                       0            0
(  281)  malformed device esdtdi25_dev                       0            0
(  282)  malformed device esdtdi20_dev                       0            0
(  283)  malformed device esdtdi50_dev                       0            0
(  284)  malformed device MIMpi                              0            0
(  285)  malformed device MIMdn                              0            0
(  286)  malformed device MIMnw                              0            0
(  287)  malformed device MIMsx                              0            0
(  288)  malformed device MIMhdpi                            0            0
(  289)  malformed device MIMhddn                            0            0
(  290)  malformed device MIMhdnw                            0            0
(  291)  malformed device MIMhdsx                            0            0
(  292)  malformed device DUALMIMpi                          0            0
(  293)  malformed device DUALMIMdn                          0            0
(  294)  malformed device DUALMIMnw                          0            0
(  295)  malformed device DUALMIMsx                          0            0
(  296)  malformed device DUALMIMhdpi                        0            0
(  297)  malformed device DUALMIMhddn                        0            0
(  298)  malformed device DUALMIMhdnw                        0            0
(  299)  malformed device DUALMIMhdsx                        0            0
(  300)  malformed device vncap_top1                         0            0
(  301)  malformed device vncap_tnw1                         0            0
(  302)  malformed device vncap_topt                         0            0
(  303)  malformed device vncap_tnwt                         0            0
(  304)  malformed device vncap_top2                         0            0
(  305)  malformed device vncap_tnw2                         0            0
(  306)  malformed device vncap_top3                         0            0
(  307)  malformed device vncap_tnw3                         0            0
(  308)  malformed device vncap_top4                         0            0
(  309)  malformed device vncap_tnw4                         0            0
(  310)  malformed device vncap_top1_hv                      0            0
(  311)  malformed device vncap_tnw1_hv                      0            0
(  312)  malformed device vncap_topt_hv                      0            0
(  313)  malformed device vncap_tnwt_hv                      0            0
(  314)  malformed device vncap_top2_hv                      0            0
(  315)  malformed device vncap_tnw2_hv                      0            0
(  316)  malformed device vncap_top3_hv                      0            0
(  317)  malformed device vncap_tnw3_hv                      0            0
(  318)  malformed device vncap_top4_hv                      0            0
(  319)  malformed device vncap_tnw4_hv                      0            0
(  320)  malformed device am_transmission                    0            0
(  321)  malformed device ind2_mtam_m1                       0            0
(  322)  malformed device ind2_mtam_bb                       0            0
(  323)  malformed device symind3_amam_bb                    0            0
(  324)  malformed device symind2_amam_bb                    0            0
(  325)  malformed device symind3_amam_m1                    0            0
(  326)  malformed device symind2_amam_m1                    0            0
(  327)  malformed device padOverDev                         0            0
(  328)  malformed device bondPpc                            0            0
(  329)  malformed device bondPm1                            0            0
(  330)  malformed device bondPbb                            0            0
(  331)  malformed device efuse                              0            0
(  332)  malformed device coupledA                           0            0
(  333)  malformed device singleEndA                         0            0
(  334)  malformed device coupledT                           0            0
(  335)  malformed device singleEndT                         0            0
(  336)  malformed device coupled4                           0            0
(  337)  malformed device singleEnd4                         0            0
(  338)  malformed device coupled3                           0            0
(  339)  malformed device singleEnd3                         0            0
(  340)  malformed device coupled2                           0            0
(  341)  malformed device singleEnd2                         0            0
(  342)  unstable device for am_RES_min_Device_27            0            0
(  344)  unstable device for m4_RES_min_Device_27            0            0
(  346)  unstable device for m4_RES_min_Device_27            0            0
(  348)  unstable device for m3_RES_min_Device_27            0            0
(  350)  unstable device for m3_RES_min_Device_27            0            0
(  352)  unstable device for m2_RES_min_Device_27            0            0
(  354)  unstable device for m2_RES_min_Device_26            0            0
(  356)  unstable device for mt_RES_min_Device_26            0            0
(  358)  unstable device for mt_RES_min_Device_26            0            0
(  360)  unstable device for m1_RES_min_Device_26            0            0
(  362)  unstable device for m1_RES_min_Device_26            0            0
(  364)  unstable device for singleEnd2_shield1              0            0
(  366)  unstable device for coupled2_shield1                0            0
(  368)  unstable device for singleEnd3_shield2              0            0
(  370)  unstable device for singleEnd3_shield1              0            0
(  372)  unstable device for coupled3_shield2                0            0
(  374)  unstable device for coupled3_shield1                0            0
(  376)  unstable device for singleEnd4_shield3              0            0
(  378)  unstable device for singleEnd4_shield2              0            0
(  380)  unstable device for singleEnd4_shield1              0            0
(  382)  unstable device for coupled4_shield3                0            0
(  384)  unstable device for coupled4_shield2                0            0
(  386)  unstable device for coupled4_shield1                0            0
(  388)  unstable device for singleEndT_shield4              0            0
(  390)  unstable device for singleEndT_shield3              0            0
(  392)  unstable device for singleEndT_shield2              0            0
(  394)  unstable device for singleEndT_shield1              0            0
(  396)  unstable device for coupledT_shield4                0            0
(  398)  unstable device for coupledT_shield3                0            0
(  400)  unstable device for coupledT_shield2                0            0
(  402)  unstable device for coupledT_shield1                0            0
(  404)  unstable device for singleEndA_shieldT              0            0
(  406)  unstable device for singleEndA_shield4              0            0
(  408)  unstable device for singleEndA_shield3              0            0
(  410)  unstable device for singleEndA_shield2              0            0
(  412)  unstable device for singleEndA_shield1              0            0
(  414)  unstable device for coupledA_shieldT                0            0
(  416)  unstable device for coupledA_shield4                0            0
(  418)  unstable device for coupledA_shield3                0            0
(  420)  unstable device for coupledA_shield2                0            0
(  422)  unstable device for coupledA_shield1                0            0
(  424)  unstable device for efuse_Device_231                0            0
(  426)  unstable device for bondPbb_Device_230              0            0
(  428)  unstable device for bondPm1_Device_229              0            0
(  430)  unstable device for bondPpc_Device_228              0            0
(  432)  unstable device for padOverDev_Device_22            0            0
(  434)  unstable device for symind2_amam_m1_Devi            0            0
(  436)  unstable device for symind3_amam_m1_Devi            0            0
(  438)  unstable device for symind2_amam_bb_Devi            0            0
(  440)  unstable device for symind3_amam_bb_Devi            0            0
(  442)  unstable device for ind2_mtam_bb_Device_            0            0
(  444)  unstable device for ind2_mtam_m1_Device_            0            0
(  446)  unstable device for am_transmission_Devi            0            0
(  448)  unstable device for vncap_tnw4_hv_Device            0            0
(  450)  unstable device for vncap_top4_hv_pwell             0            0
(  452)  unstable device for vncap_top4_hv_subs              0            0
(  454)  unstable device for vncap_tnw3_hv_Device            0            0
(  456)  unstable device for vncap_top3_hv_pwell             0            0
(  458)  unstable device for vncap_top3_hv_subs              0            0
(  460)  unstable device for vncap_tnw2_hv_Device            0            0
(  462)  unstable device for vncap_top2_hv_pwell             0            0
(  464)  unstable device for vncap_top2_hv_subs              0            0
(  466)  unstable device for vncap_tnwt_hv_Device            0            0
(  468)  unstable device for vncap_topt_hv_pwell             0            0
(  470)  unstable device for vncap_topt_hv_subs              0            0
(  472)  unstable device for vncap_tnw1_hv_Device            0            0
(  474)  unstable device for vncap_top1_hv_pwell             0            0
(  476)  unstable device for vncap_top1_hv_subs              0            0
(  478)  unstable device for vncap_tnw4_Device_20            0            0
(  480)  unstable device for vncap_top4_pwell                0            0
(  482)  unstable device for vncap_top4_subs                 0            0
(  484)  unstable device for vncap_tnw3_Device_20            0            0
(  486)  unstable device for vncap_top3_pwell                0            0
(  488)  unstable device for vncap_top3_subs                 0            0
(  490)  unstable device for vncap_tnw2_Device_19            0            0
(  492)  unstable device for vncap_top2_pwell                0            0
(  494)  unstable device for vncap_top2_subs                 0            0
(  496)  unstable device for vncap_tnwt_Device_19            0            0
(  498)  unstable device for vncap_topt_pwell                0            0
(  500)  unstable device for vncap_topt_subs                 0            0
(  502)  unstable device for vncap_tnw1_Device_19            0            0
(  504)  unstable device for vncap_top1_pwell                0            0
(  506)  unstable device for vncap_top1_subs                 0            0
(  508)  unstable device for DUALMIMhdsx_Device_1            0            0
(  510)  unstable device for DUALMIMhdnw_Device_1            0            0
(  512)  unstable device for DUALMIMhddn_Device_1            0            0
(  514)  unstable device for DUALMIMhdpi_Device_1            0            0
(  516)  unstable device for DUALMIMsx_Device_185            0            0
(  518)  unstable device for DUALMIMnw_Device_184            0            0
(  520)  unstable device for DUALMIMdn_Device_183            0            0
(  522)  unstable device for DUALMIMpi_Device_182            0            0
(  524)  unstable device for MIMhdsx_Device_181              0            0
(  526)  unstable device for MIMhdnw_Device_180              0            0
(  528)  unstable device for MIMhddn_Device_179              0            0
(  530)  unstable device for MIMhdpi_Device_178              0            0
(  532)  unstable device for MIMsx_Device_177                0            0
(  534)  unstable device for MIMnw_Device_176                0            0
(  536)  unstable device for MIMdn_Device_175                0            0
(  538)  unstable device for MIMpi_Device_174                0            0
(  540)  unstable device for esdtdi50_dev_Device_            0            0
(  542)  unstable device for esdtdi20_dev_Device_            0            0
(  544)  unstable device for esdtdi25_dev_Device_            0            0
(  546)  unstable device for esdfdi25_dev_Device_            0            0
(  548)  unstable device for esdfdi50_dev_Device_            0            0
(  550)  unstable device for ESD_ndsx_dn_Device_1            0            0
(  552)  unstable device for ESD_ndsx_GR_Device_1            0            0
(  554)  unstable device for ESD_ndsx_Device_166             0            0
(  556)  unstable device for ESD_pdnw_dn_Device_1            0            0
(  558)  unstable device for ESD_pdnw_diode_GR_De            0            0
(  560)  unstable device for ESD_pdnw_diode_Devic            0            0
(  562)  unstable device for corrPoint_dev_M1_Dev            0            0
(  564)  unstable device for corrPoint_dev_PC_Dev            0            0
(  566)  unstable device for corrPoint_dev_ND_Dev            0            0
(  568)  unstable device for corrPoint_dev_PD_Dev            0            0
(  570)  unstable device for corrPoint_dev_M2_Dev            0            0
(  572)  unstable device for pwdn_device_Device_1            0            0
(  574)  unstable device for dnsx_device_Device_1            0            0
(  576)  unstable device for ntie_in_sp_Device_15            0            0
(  578)  unstable device for nwsx_device_Device_1            0            0
(  580)  unstable device for ptie_device_Device_1            0            0
(  582)  unstable device for ntie_device_Device_1            0            0
(  584)  unstable device for ntie_device_Device_1            0            0
(  586)  unstable device for sub_dev_Device_150              0            0
(  588)  unstable device for esdpsh_dev_dn_Device            0            0
(  590)  unstable device for esdnsh_dev_dn_Device            0            0
(  592)  unstable device for esdpsh_dev_Device_14            0            0
(  594)  unstable device for esdnsh_dev_Device_14            0            0
(  596)  unstable device for k1_dev_sx_pwell                 0            0
(  598)  unstable device for k1_dev_sx_subs                  0            0
(  600)  unstable device for k1_dev_bb_Device_143            0            0
(  602)  unstable device for res6p_4_sblk_Device_            0            0
(  604)  unstable device for res6p_3_sblk_Device_            0            0
(  606)  unstable device for res6p_sblk_Device_14            0            0
(  608)  unstable device for res6n_5_sblk_Device_            0            0
(  610)  unstable device for res6n_3_sblk_Device_            0            0
(  612)  unstable device for res6n_sblk_pwell                0            0
(  614)  unstable device for res6n_sblk_subs                 0            0
(  616)  unstable device for res6p_4_dev_Device_1            0            0
(  618)  unstable device for res6p_3_dev_Device_1            0            0
(  620)  unstable device for res6p_dev_Device_133            0            0
(  622)  unstable device for res6n_5_dev_Device_1            0            0
(  624)  unstable device for res6n_3_dev_Device_1            0            0
(  626)  unstable device for res6n_dev_pwell                 0            0
(  628)  unstable device for res6n_dev_subs                  0            0
(  630)  unstable device for hvpwres_dev_Device_1            0            0
(  632)  unstable device for hvnwres_dev_pwell               0            0
(  634)  unstable device for hvnwres_dev_subs                0            0
(  636)  unstable device for res6rp_dev_pwell                0            0
(  638)  unstable device for res6rp_dev_subs                 0            0
(  640)  unstable device for rnw6rp_dev_Device_12            0            0
(  642)  unstable device for res6rr_dev_pwell                0            0
(  644)  unstable device for res6rr_dev_subs                 0            0
(  646)  unstable device for rnw6rr_dev_Device_12            0            0
(  648)  unstable device for res6pc_dev_pwell                0            0
(  650)  unstable device for res6pc_dev_subs                 0            0
(  652)  unstable device for rnw6pc_dev_Device_11            0            0
(  654)  unstable device for res6pc_dev_no_bp_pwe            0            0
(  656)  unstable device for res6pc_dev_no_bp_sub            0            0
(  658)  unstable device for rnw6pc_dev_no_bp_Dev            0            0
(  660)  unstable device for pjfet_dev_Device_113            0            0
(  662)  unstable device for pcap50_dev_Device_11            0            0
(  664)  unstable device for pcap_dev_Device_111             0            0
(  666)  unstable device for pcdcapt_dev_Device_1            0            0
(  668)  unstable device for ncap_dev_Device_109             0            0
(  670)  unstable device for pcdcap50_dev_Device_            0            0
(  672)  unstable device for mosvar50_dev_Device_            0            0
(  674)  unstable device for mosvar_dev_Device_10            0            0
(  676)  unstable device for DI_VPNP_Device_105              0            0
(  678)  unstable device for DIPI_diode_Device_10            0            0
(  680)  unstable device for DI_diode_Device_103             0            0
(  682)  unstable device for SBD_Device_102                  0            0
(  684)  unstable device for pfRF_mul_Device_101             0            0
(  686)  unstable device for pfRF_dev_Device_100             0            0
(  688)  unstable device for pfRF5_dn_mul_Device_            0            0
(  690)  unstable device for pfRFi_dn_mul_Device_            0            0
(  692)  unstable device for pfRF5_dn_dev_Device_            0            0
(  694)  unstable device for pfRFi_dn_dev_Device_            0            0
(  696)  unstable device for nfRF_mul_Device_95              0            0
(  698)  unstable device for nfRF6_mul_Device_94             0            0
(  700)  unstable device for nfRFi_mul_Device_93             0            0
(  702)  unstable device for nfRF_dev_Device_92              0            0
(  704)  unstable device for nfRF6_dev_Device_91             0            0
(  706)  unstable device for nfRFi_dev_Device_90             0            0
(  708)  unstable device for nfRF6_dn_mul_Device_            0            0
(  710)  unstable device for nfRFi_dn_mul_Device_            0            0
(  712)  unstable device for nfRF6_dn_dev_Device_            0            0
(  714)  unstable device for nfRFi_dn_dev_Device_            0            0
(  716)  unstable device for pfet_mul_SHVT_Device            0            0
(  718)  unstable device for pfet_dev_SHVT_b_Devi            0            0
(  720)  unstable device for pfet_dev_SHVT_Device            0            0
(  722)  unstable device for pfet_mul_HVT_Device_            0            0
(  724)  unstable device for pfet_dev_HVT_b_Devic            0            0
(  726)  unstable device for pfet_dev_HVT_Device_            0            0
(  728)  unstable device for pfet_mul_TG_Device_7            0            0
(  730)  unstable device for pfet_dev_TG_Device_7            0            0
(  732)  unstable device for pfet_mul_Device_77              0            0
(  734)  unstable device for pfet_dev_b_Device_76            0            0
(  736)  unstable device for pfet_dev_Device_75              0            0
(  738)  unstable device for pfet5_dn_mul_TG_Devi            0            0
(  740)  unstable device for pfeti_dn_mul_TG_Devi            0            0
(  742)  unstable device for pfet5_dn_dev_TG_Devi            0            0
(  744)  unstable device for pfeti_dn_dev_TG_Devi            0            0
(  746)  unstable device for pfet5_dn_mul_HVT_Dev            0            0
(  748)  unstable device for pfeti_dn_mul_HVT_Dev            0            0
(  750)  unstable device for pfet5_dn_dev_HVT_Dev            0            0
(  752)  unstable device for pfeti_dn_dev_HVT_Dev            0            0
(  754)  unstable device for pfet5_dn_dev_HVT_b_D            0            0
(  756)  unstable device for pfeti_dn_dev_HVT_b_D            0            0
(  758)  unstable device for pfet5_dn_mul_Device_            0            0
(  760)  unstable device for pfeti_dn_mul_Device_            0            0
(  762)  unstable device for pfet5_dn_dev_Device_            0            0
(  764)  unstable device for pfeti_dn_dev_Device_            0            0
(  766)  unstable device for pfet5_dn_dev_b_Devic            0            0
(  768)  unstable device for pfeti_dn_dev_b_Devic            0            0
(  770)  unstable device for nfeti_dev_HVT_b_Devi            0            0
(  772)  unstable device for nfeti_mul_HVT_Device            0            0
(  774)  unstable device for nfeti_dev_HVT_Device            0            0
(  776)  unstable device for nfet_dev_SHVT_b_Devi            0            0
(  778)  unstable device for nfet_mul_SHVT_Device            0            0
(  780)  unstable device for nfet_dev_SHVT_Device            0            0
(  782)  unstable device for nfet_dev_HVT_b_Devic            0            0
(  784)  unstable device for nfet_mul_HVT_Device_            0            0
(  786)  unstable device for nfet_dev_HVT_Device_            0            0
(  788)  unstable device for nfet6_mul_TG_Device_            0            0
(  790)  unstable device for nfet6_dev_TG_Device_            0            0
(  792)  unstable device for nfeti_mul_TG_Device_            0            0
(  794)  unstable device for nfeti_dev_TG_Device_            0            0
(  796)  unstable device for nfet_mul_TG_Device_4            0            0
(  798)  unstable device for nfet_dev_TG_Device_4            0            0
(  800)  unstable device for nfet6_mul_Device_43             0            0
(  802)  unstable device for nfet6_dev_Device_42             0            0
(  804)  unstable device for nfeti_mul_Device_41             0            0
(  806)  unstable device for nfeti_dev_b_Device_4            0            0
(  808)  unstable device for nfeti_dev_Device_39             0            0
(  810)  unstable device for nfet_mul_Device_38              0            0
(  812)  unstable device for nfet_dev_b_Device_37            0            0
(  814)  unstable device for nfet_dev_Device_36              0            0
(  816)  unstable device for nfet6_dn_mul_TG_Devi            0            0
(  818)  unstable device for nfeti_dn_mul_TG_Devi            0            0
(  820)  unstable device for nfet6_dn_mul_HVT_Dev            0            0
(  822)  unstable device for nfeti_dn_mul_HVT_Dev            0            0
(  824)  unstable device for nfet6_dn_mul_Device_            0            0
(  826)  unstable device for nfeti_dn_mul_Device_            0            0
(  828)  unstable device for nfet6_dn_dev_TG_Devi            0            0
(  830)  unstable device for nfeti_dn_dev_TG_Devi            0            0
(  832)  unstable device for nfet6_dn_dev_HVT_Dev            0            0
(  834)  unstable device for nfeti_dn_dev_HVT_Dev            0            0
(  836)  unstable device for nfet6_dn_dev_HVT_b_D            0            0
(  838)  unstable device for nfeti_dn_dev_HVT_b_D            0            0
(  840)  unstable device for nfet6_dn_dev_Device_            0            0
(  842)  unstable device for nfeti_dn_dev_Device_            0            0
(  844)  unstable device for nfet6_dn_dev_b_Devic            0            0
(  846)  unstable device for nfeti_dn_dev_b_Devic            0            0
(  848)  unstable device for pfet50t_dev_Device_1            0            0
(  850)  unstable device for pfet50m_dev_Device_1            0            0
(  852)  unstable device for pfet50h_dev_Device_1            0            0
(  854)  unstable device for pfet25m_dev_Device_1            0            0
(  856)  unstable device for pfet20t_dev_Device_1            0            0
(  858)  unstable device for pfet20h_dev_Device_1            0            0
(  860)  unstable device for pfet50hs_dev_Device_            0            0
(  862)  unstable device for pfet20hs_dev_Device_            0            0
(  864)  unstable device for nfeti50t_dev_Device_            0            0
(  866)  unstable device for nfeti50m_dev_Device_            0            0
(  868)  unstable device for nfeti50h_dev_Device_            0            0
(  870)  unstable device for nfeti25m_dev_Device_            0            0
(  872)  unstable device for nfeti20t_dev_Device_            0            0
(  874)  unstable device for nfeti20h_dev_Device_            0            0
(  876)  unstable device for nfet20mh_dev_Device_            0            0
(  878)  unstable device for nfet50hs_dev_Device_            0            0
(  880)  unstable device for nfet20hs_dev_Device_            0            0
(  882)  unstable device for vpnp_dev_Device_2               0            0
(  884)  unstable device for vnpn_dev_Device_1               0            0
--------------------------------------------------------------------------------
Total  errors:                                               0            0
--------------------------------------------------------------------------------

   Finished creating Error Database ...

   Writing Report into /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.err ...

avrpt cpu sec:    0.09  elapsed:     0  virtual:   100M

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avrpt

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avcallproc /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf -exec1 -LVS -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib
Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avcallproc

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avnx /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf -exec1 -LVS -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib
Virtuoso Framework License (111) was checked out successfully. Total checkout time was 0.22s.
Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets
Checking out license for Assura_LVS
Checking out license for Phys_Ver_Sys_LVS_XL
*WARNING* Failed to obtain license for Assura_LVS
@(#)$CDS: avnx_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:22 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113

run on localhost.localdomain from /pkg/Cadence/installs/ASSURA41/tools.lnx86/assura/bin/64bit/avnx on Sat Dec 12 22:17:54 2015

avnx started...
cpu: 0.22  elap: 0  pf: 0  in: 0  out: 0  virt: 592M  phys: 1094M

Run time =  1.00 seconds
CPU time =  0.40 seconds

                  End of Summary Report

************************************************************************
cpu: 0.01  elap: 0  pf: 0  in: 0  out: 0  virt: 521M  phys: 1095M
***** avnx terminated normally ***** 


Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avnx

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/nvn /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf -postExtract -exec1 -cdslib /home/saul/projects/LAYOUT_TUT/cds.lib
Checking out license for Assura_LVS
Checking out license for Phys_Ver_Sys_LVS_XL
@(#)$CDS: nvn_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/2015 21:27 (sjfql463) $
sub-version 4.1_USR4_HF23, integ signature 2015-04-17-1113
run on localhost.localdomain at Sat Dec 12 22:17:55 2015
Loading all available HV p-cell functions
No mx check
Reading schematic network
Reading layout network
 inputting network ASSURA_LVS/curr_mirror/myrun.ldb
Preprocessing schematic network phase 1
Preprocessing layout network phase 1
Preprocessing schematic network phase 2
Preprocessing layout network phase 2
Top cell  curr_mirror schematic TUTORIAL vs curr_mirror layout TUTORIAL
multiFETcomb Resultant: (nil psp 0 bentgate 0 par 2 m 2 gcon 1 wt 5e-05 l 4e-06 nf 5)
Schematic and Layout Match
cpu=0.00m  wall=0.02m  mem=56.26mb

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/nvn

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/vldbToRpa myrun.snn myrun.tre myrun.cel

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/vldbToRpa

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/vldbToRpa myrun.lnn myrun.tre2 myrun.cel2

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/vldbToRpa

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/ercChk /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf
Virtuoso Framework License (111) was checked out successfully. Total checkout time was 0.22s.
Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets
*WARNING* LIB TECH_H18A6 from File /home/saul/projects/LAYOUT_TUT/cds.lib Line 57 redefines
LIB TECH_H18A6 from the same file (defined earlier.)
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A7AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A7AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A5AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A5AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A4AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A4AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A3AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A3AM'.
*WARNING* LIB TECH_H18A6 from File /home/saul/projects/LAYOUT_TUT/cds.lib Line 57 redefines
LIB TECH_H18A6 from the same file (defined earlier.)
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A7AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A7AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A5AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A5AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A4AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A4AM'.
*WARNING* The directory: '/pkg/AMS411/cds/HK_H18/TECH_H18A3AMAM' does not exist
	but was defined in libFile '/home/saul/projects/LAYOUT_TUT/cds.lib' for Lib 'TECH_H18A3AM'.
Checking out license for Assura_LVS
Checking out license for Phys_Ver_Sys_LVS_XL

*************** ASSURA ERC PATH CHECK *******************

Loading all available HV p-cell functions
function AMS_CreateLayerMap redefined
No mx check
function AMS_pcDiv redefined
function AMS_pcContactRow redefined
function AMS_pcVarContRow redefined
function AMS_pcGuardRing redefined
function AMS_pcRectRing redefined
function AMS_pcGetMppLayer redefined
function AMS_createConnectivityOA redefined
function AMS_createStrongConnectionsOA redefined
function AMS_createConnectivityCDB redefined
function AMS_createStrongConnectionsCDB redefined
function AMS_createNewPin redefined
function AMS_createPinLabel redefined
function AMS_createConnectivity redefined
function AMS_pcPfet20 redefined
function AMS_pcPfet20s redefined
function AMS_pcPfet50 redefined
function AMS_pcPfet50s redefined
function AMS_pcNfeti20 redefined
function AMS_pcNfet20s redefined
function AMS_pcNfet20mh redefined
function AMS_pcNfeti50 redefined
function AMS_pcNfet50s redefined
function AMS_pcHvres redefined
function AMS_pcJfet redefined
function AMS_pcEsdd50 redefined
function AMS_pcEsdtdi redefined
function AMS_pcEsdtdiOld redefined
function AMS_pcEsdtdi50 redefined
function AMS_pcEsdSubIso redefined
function AMS_create_cmim redefined
function AMS_create_dualcmim redefined
function AMS_create_dipdnw redefined
function AMS_create_pcap redefined
function AMS_create_resistor redefined
function AMS_create_pad redefined
function AMS_create_bondpad redefined
function AMS_create_vncap_finger redefined
function AMS_create_vncap redefined
function AMS_PcellNPFet redefined
function AMS_create_sbd redefined
function AMS_create_subc redefined
function AMS_create_aFil redefined
function AMS_create_esdndidn redefined
function AMS_create_esdpdidn redefined
function AMS_create_esdndsx redefined
function AMS_create_esdvpnpnw redefined
function AMS_create_double_diode_N redefined
function AMS_create_double_diode_n_dn redefined
function AMS_create_antiparallel_diodes redefined
function AMS_create_antiparallel_diodes_dn redefined
function AMS_create_esdnfet redefined
function AMS_create_esdpfet redefined
function AMS_create_clamp_NoutDev redefined
function AMS_create_clamp_inv_chain redefined
function AMS_create_rc_clamp2 redefined
function AMS_create_rc_clamp2_dn redefined
function AMS_create_mkconnect redefined
function AMS_create_mkcorner redefined
function AMS_create_mklink redefined
function AMS_create_ipci redefined
function AMS_create_dice50 redefined
function AMS_create_crackstop redefined
function AMS_create_image redefined
runName("myrun")
;avParameters(  ?set ( "COMPARE_DIODE_SIZE" "COMPARE_NF_VALUES" )  )
overwrite(t)
workingDirectory("ASSURA_LVS/curr_mirror")
rootCell("curr_mirror layout TUTORIAL" lay)
bindingFile("/pkg/AMS411/assura/h18a6/h18a6/bind.vldb")
verifyTopSchPins( (t notKeepFloatingPins) )
verifyTopLayPins( (t notKeepFloatingPins) )
unmatchedNetDetail()
mergeSplitGate(LDD sameOrder)
mergeSplitGate(MOS sameOrder)
listXRef()
listFilteredDevices()
formGate( MOS none )
expandOnError((swap t)(swapThres t)(reduce t)(pins t)(instCount t)(skipMatchOnReduceError t)(ambiguousPinAssignment nil)(parameter nil)(unstableDevices t))
autoPinSwap(t 1000)
alwaysContinue()
abortOnUnboundDevices(nil)
parameterModifiedDevice("hvpwres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("hvnwres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("vpnp" ("mSwitch" "_m" "0"))
parameterModifiedDevice("vnpn" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkpdres3" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkpdiresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkpdires" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkpdresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkpdres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkndres3" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkndiresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkndires" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkndresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sblkndres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdtdi25" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdtdi20" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdfdi50" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdfdi25" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdndidn" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdndpi" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdndsx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdpdidn" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdpnpi" ("mSwitch" "_m" "0"))
parameterModifiedDevice("esdvpnpnw" ("mSwitch" "_m" "0"))
parameterModifiedDevice("havarx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("havar" ("mSwitch" "_m" "0"))
parameterModifiedDevice("divpnp" ("mSwitch" "_m" "0"))
parameterModifiedDevice("dindpw" ("mSwitch" "_m" "0"))
parameterModifiedDevice("dipdnw" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pjfet" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcapim" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcapi" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcap" ("mSwitch" "_m" "0"))
parameterModifiedDevice("diffmosvarx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("diffmosvar" ("mSwitch" "_m" "0"))
parameterModifiedDevice("mosvarmx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("mosvarm" ("mSwitch" "_m" "0"))
parameterModifiedDevice("mosvartx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("mosvart" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oppdres3" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oppdiresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oppdires" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opndres3" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opndiresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opndires" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oppdresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oppdres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opndresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opndres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("k1resx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("k1res" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sbdix" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sbdi" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sbdx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("sbd" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcap33x" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcap33" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcaptx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcapt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcapmx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcapm" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcapx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pcdcap" ("mSwitch" "_m" "0"))
parameterModifiedDevice("singlewire" ("mSwitch" "_m" "0"))
parameterModifiedDevice("inds" ("mSwitch" "_m" "0"))
parameterModifiedDevice("indp" ("mSwitch" "_m" "0"))
parameterModifiedDevice("symindp" ("mSwitch" "_m" "0"))
parameterModifiedDevice("symind" ("mSwitch" "_m" "0"))
parameterModifiedDevice("ind" ("mSwitch" "_m" "0"))
parameterModifiedDevice("indlinex" ("mSwitch" "_m" "0"))
parameterModifiedDevice("indline" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet50t" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet50m" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet50hs" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet50h" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet25m" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet20t" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet20hs" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet20h" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti50t" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti50m" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti50h" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti25m" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti20t" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti20h" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet50hs" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet20hs" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet20mh" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfeti_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfeti4_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfettw_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti4_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet_rf" ("mSwitch" "_m" "0"))
parameterModifiedDevice("zvtnfet33x" ("mSwitch" "_m" "0"))
parameterModifiedDevice("zvtnfet33" ("mSwitch" "_m" "0"))
parameterModifiedDevice("zvtnfetx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("zvtnfet" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetshvtx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetshvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfethvtx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfethvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetimx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetim" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetim4" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetmx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetm" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet33x" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet33" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetixhvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetihvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetihvt4" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetix" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfeti" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfeti4" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfetx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("pfet" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfettwx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfettw" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet33twx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetshvtx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetshvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfethvtx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfethvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetimx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetim" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetihvtx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetihvt" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetix" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetim4" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetihvt4" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfeti4" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetmtwx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetmtw" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetmx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetm" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet33x" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet33" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfetx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("nfet" ("mSwitch" "_m" "0"))
parameterModifiedDevice("coupledwires" ("mSwitch" "_m" "0"))
parameterModifiedDevice("vncap_hvx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("vncap_hv" ("mSwitch" "_m" "0"))
parameterModifiedDevice("vncapx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("vncap" ("mSwitch" "_m" "0"))
parameterModifiedDevice("mimhkx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("mimhk" ("mSwitch" "_m" "0"))
parameterModifiedDevice("cmimhdx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("cmimhd" ("mSwitch" "_m" "0"))
parameterModifiedDevice("dualcmimhdx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("dualcmimhd" ("mSwitch" "_m" "0"))
parameterModifiedDevice("cmimx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("cmim" ("mSwitch" "_m" "0"))
parameterModifiedDevice("dualcmimx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("dualcmim" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oprrpresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oprrpres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oprppresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("oprppres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opppcresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opppcres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opnpcresx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("opnpcres" ("mSwitch" "_m" "0"))
parameterModifiedDevice("bondpadx" ("mSwitch" "_m" "0"))
parameterModifiedDevice("bondpad" ("mSwitch" "_m" "0"))
expandOnError((swap nil)(swapThres nil)(reduce t)(pins nil)(instCount t)(skipMatchOnReduceError t)(ambiguousPinAssignment nil)(parameter nil)(unstableDevices t))
listFilteredDevices()
listXRef()
formGate( none )
autoPinSwap(t)
verifyTopSchPins( (t notKeepFloatingPins) )
nameBinding((cell t)(pin t)(net nil)(instance nil))
compareParameter("vpnp_m1"  multiBIPcomp)
compareParameter("vnpn_m1"  multiBIPcomp)
compareParameter("vpnp_m0"  multiBIPcomp)
compareParameter("vnpn_m0"  multiBIPcomp)
compareParameter("hvpwres_m1"  multiHVREScomp)
compareParameter("hvnwres_m1"  multiHVREScomp)
compareParameter("hvpwres_m0"  multiHVREScomp)
compareParameter("hvnwres_m0"  multiHVREScomp)
compareParameter("sblkpdres3_m1"  multiSBLKREScomp)
compareParameter("sblkpdiresx_m1"  multiSBLKREScomp)
compareParameter("sblkpdires_m1"  multiSBLKREScomp)
compareParameter("sblkpdresx_m1"  multiSBLKREScomp)
compareParameter("sblkpdres_m1"  multiSBLKREScomp)
compareParameter("sblkndres3_m1"  multiSBLKREScomp)
compareParameter("sblkndiresx_m1"  multiSBLKREScomp)
compareParameter("sblkndires_m1"  multiSBLKREScomp)
compareParameter("sblkndresx_m1"  multiSBLKREScomp)
compareParameter("sblkndres_m1"  multiSBLKREScomp)
compareParameter("sblkpdres3_m0"  multiSBLKREScomp)
compareParameter("sblkpdiresx_m0"  multiSBLKREScomp)
compareParameter("sblkpdires_m0"  multiSBLKREScomp)
compareParameter("sblkpdresx_m0"  multiSBLKREScomp)
compareParameter("sblkpdres_m0"  multiSBLKREScomp)
compareParameter("sblkndres3_m0"  multiSBLKREScomp)
compareParameter("sblkndiresx_m0"  multiSBLKREScomp)
compareParameter("sblkndires_m0"  multiSBLKREScomp)
compareParameter("sblkndresx_m0"  multiSBLKREScomp)
compareParameter("sblkndres_m0"  multiSBLKREScomp)
compareParameter("esdtdi25_m0"  ESDXDIcomp)
compareParameter("esdtdi20_m0"  ESDXDIcomp)
compareParameter("esdfdi50_m0"  ESDXDIcomp)
compareParameter("esdfdi25_m0"  ESDXDIcomp)
compareParameter("esdndidn_m0"  ESDNDSXcomp)
compareParameter("esdndpi_m0"  ESDNDSXcomp)
compareParameter("esdndsx_m0"  ESDNDSXcomp)
compareParameter("esdpdidn_m0"  ESDVPNPcomp)
compareParameter("esdpnpi_m0"  ESDVPNPcomp)
compareParameter("esdvpnpnw_m0"  ESDVPNPcomp)
compareParameter("havarx_m1"  multiHAVARcomp)
compareParameter("havar_m1"  multiHAVARcomp)
compareParameter("havarx_m0"  HAVARcomp)
compareParameter("havar_m0"  HAVARcomp)
compareParameter("divpnpx_m1"  DIPDNWcomp)
compareParameter("divpnp_m1"  DIPDNWcomp)
compareParameter("divpnpx_m0"  DIPDNWcomp)
compareParameter("divpnp_m0"  DIPDNWcomp)
compareParameter("dindpwx_m1"  DIPDNWcomp)
compareParameter("dindpw_m1"  DIPDNWcomp)
compareParameter("dindpwx_m0"  DIPDNWcomp)
compareParameter("dindpw_m0"  DIPDNWcomp)
compareParameter("dipdnwx_m1"  DIPDNWcomp)
compareParameter("dipdnw_m1"  DIPDNWcomp)
compareParameter("dipdnwx_m0"  DIPDNWcomp)
compareParameter("dipdnw_m0"  DIPDNWcomp)
compareParameter("diffmosvarx_m1"  multiDIFFMOSVARcomp)
compareParameter("diffmosvar_m1"  multiDIFFMOSVARcomp)
compareParameter("diffmosvarx_m0"  multiDIFFMOSVARcomp)
compareParameter("diffmosvar_m0"  multiDIFFMOSVARcomp)
compareParameter("pcapim_m1"  multiMOSVARcomp)
compareParameter("pcapi_m1"  multiMOSVARcomp)
compareParameter("pcap_m1"  multiMOSVARcomp)
compareParameter("mosvarmx_m1"  multiMOSVARcomp)
compareParameter("mosvarm_m1"  multiMOSVARcomp)
compareParameter("mosvartx_m1"  multiMOSVARcomp)
compareParameter("mosvart_m1"  multiMOSVARcomp)
compareParameter("pcapim_m0"  multiMOSVARcomp)
compareParameter("pcapi_m0"  multiMOSVARcomp)
compareParameter("pcap_m0"  multiMOSVARcomp)
compareParameter("mosvarmx_m0"  multiMOSVARcomp)
compareParameter("mosvarm_m0"  multiMOSVARcomp)
compareParameter("mosvartx_m0"  multiMOSVARcomp)
compareParameter("mosvart_m0"  multiMOSVARcomp)
compareParameter("oppdres3_m1"  multiRES2comp)
compareParameter("oppdiresx_m1"  multiRES2comp)
compareParameter("oppdires_m1"  multiRES2comp)
compareParameter("opndres3_m1"  multiRES2comp)
compareParameter("opndiresx_m1"  multiRES2comp)
compareParameter("opndires_m1"  multiRES2comp)
compareParameter("oppdres3_m0"  multiRES2comp)
compareParameter("oppdiresx_m0"  multiRES2comp)
compareParameter("oppdires_m0"  multiRES2comp)
compareParameter("opndres3_m0"  multiRES2comp)
compareParameter("opndiresx_m0"  multiRES2comp)
compareParameter("opndires_m0"  multiRES2comp)
compareParameter("oppdresx_m1"  multiRES2comp)
compareParameter("oppdres_m1"  multiRES2comp)
compareParameter("opndresx_m1"  multiRES2comp)
compareParameter("opndres_m1"  multiRES2comp)
compareParameter("k1resx_m1"  multiRES2comp)
compareParameter("k1res_m1"  multiRES2comp)
compareParameter("oppdresx_m0"  multiRES2comp)
compareParameter("oppdres_m0"  multiRES2comp)
compareParameter("opndresx_m0"  multiRES2comp)
compareParameter("opndres_m0"  multiRES2comp)
compareParameter("k1resx_m0"  multiRES2comp)
compareParameter("k1res_m0"  multiRES2comp)
compareParameter("sbdix_m1"  multiSBDcomp)
compareParameter("sbdi_m1"  multiSBDcomp)
compareParameter("sbdx_m1"  multiSBDcomp)
compareParameter("sbd_m1"  multiSBDcomp)
compareParameter("sbdix_m0"  SBDcomp)
compareParameter("sbdi_m0"  SBDcomp)
compareParameter("sbdx_m0"  SBDcomp)
compareParameter("sbd_m0"  SBDcomp)
compareParameter("pcdcap33x_m1"  multiPCDCAPcomp)
compareParameter("pcdcap33_m1"  multiPCDCAPcomp)
compareParameter("pcdcaptx_m1"  multiMOSVARcomp)
compareParameter("pcdcapt_m1"  multiMOSVARcomp)
compareParameter("pcdcapmx_m1"  multiMOSVARcomp)
compareParameter("pcdcapm_m1"  multiMOSVARcomp)
compareParameter("pcdcapx_m1"  multiPCDCAPcomp)
compareParameter("pcdcap_m1"  multiPCDCAPcomp)
compareParameter("pcdcap33x_m0"  multiPCDCAPcomp)
compareParameter("pcdcap33_m0"  multiPCDCAPcomp)
compareParameter("pcdcaptx_m0"  multiMOSVARcomp)
compareParameter("pcdcapt_m0"  multiMOSVARcomp)
compareParameter("pcdcapmx_m0"  multiMOSVARcomp)
compareParameter("pcdcapm_m0"  multiMOSVARcomp)
compareParameter("pcdcapx_m0"  multiPCDCAPcomp)
compareParameter("pcdcap_m0"  multiPCDCAPcomp)
compareParameter("singlewire_m0"  SINGLEWIREcomp)
compareParameter("inds_m0"  INDcomp)
compareParameter("indp_m0"  INDcomp)
compareParameter("symindp_m0"  SYMINDcomp)
compareParameter("symind_m0"  SYMINDcomp)
compareParameter("ind_m0"  INDcomp)
compareParameter("indlinex_m0"  INDLINEcomp)
compareParameter("indline_m0"  INDLINEcomp)
compareParameter("pfet50t_m1"  multiFETHVcomp)
compareParameter("pfet50m_m1"  multiFETHVcomp)
compareParameter("pfet50hs_m1"  multiFETHVcomp)
compareParameter("pfet50h_m1"  multiFETHVcomp)
compareParameter("pfet25m_m1"  multiFETHVcomp)
compareParameter("pfet20t_m1"  multiFETHVcomp)
compareParameter("pfet20hs_m1"  multiFETHVcomp)
compareParameter("pfet20h_m1"  multiFETHVcomp)
compareParameter("nfeti50t_m1"  multiFETHVcomp)
compareParameter("nfeti50m_m1"  multiFETHVcomp)
compareParameter("nfeti50h_m1"  multiFETHVcomp)
compareParameter("nfeti25m_m1"  multiFETHVcomp)
compareParameter("nfeti20t_m1"  multiFETHVcomp)
compareParameter("nfeti20h_m1"  multiFETHVcomp)
compareParameter("nfet50hs_m1"  multiFETHVcomp)
compareParameter("nfet20hs_m1"  multiFETHVcomp)
compareParameter("nfet20mh_m1"  multiFETHVcomp)
compareParameter("pfet50t_m0"  FETHVcomp)
compareParameter("pfet50m_m0"  FETHVcomp)
compareParameter("pfet50hs_m0"  FETHVcomp)
compareParameter("pfet50h_m0"  FETHVcomp)
compareParameter("pfet25m_m0"  FETHVcomp)
compareParameter("pfet20t_m0"  FETHVcomp)
compareParameter("pfet20hs_m0"  FETHVcomp)
compareParameter("pfet20h_m0"  FETHVcomp)
compareParameter("nfeti50t_m0"  FETHVcomp)
compareParameter("nfeti50m_m0"  FETHVcomp)
compareParameter("nfeti50h_m0"  FETHVcomp)
compareParameter("nfeti25m_m0"  FETHVcomp)
compareParameter("nfeti20t_m0"  FETHVcomp)
compareParameter("nfeti20h_m0"  FETHVcomp)
compareParameter("nfet50hs_m0"  FETHVcomp)
compareParameter("nfet20hs_m0"  FETHVcomp)
compareParameter("nfet20mh_m0"  FETHVcomp)
compareParameter("pfeti_rf_m1"  multiFETRFcomp)
compareParameter("pfeti4_rf_m1"  multiFETRFcomp)
compareParameter("pfet_rf_m1"  multiFETRFcomp)
compareParameter("nfettw_rf_m1"  multiFETRFcomp)
compareParameter("nfeti_rf_m1"  multiFETRFcomp)
compareParameter("nfeti4_rf_m1"  multiFETRFcomp)
compareParameter("nfet_rf_m1"  multiFETRFcomp)
compareParameter("pfeti_rf_m0"  FETRFcomp)
compareParameter("pfeti4_rf_m0"  FETRFcomp)
compareParameter("pfet_rf_m0"  FETRFcomp)
compareParameter("nfettw_rf_m0"  FETRFcomp)
compareParameter("nfeti_rf_m0"  FETRFcomp)
compareParameter("nfeti4_rf_m0"  FETRFcomp)
compareParameter("nfet_rf_m0"  FETRFcomp)
compareParameter("zvtnfet33x_m1"  multiFETcomp)
compareParameter("zvtnfet33_m1"  multiFETcomp)
compareParameter("zvtnfetx_m1"  multiFETcomp)
compareParameter("zvtnfet_m1"  multiFETcomp)
compareParameter("pfetshvtx_m1"  multiFETcomp)
compareParameter("pfetshvt_m1"  multiFETcomp)
compareParameter("pfethvtx_m1"  multiFETcomp)
compareParameter("pfethvt_m1"  multiFETcomp)
compareParameter("pfetim4_m1"  multiFETcomp)
compareParameter("pfetimx_m1"  multiFETcomp)
compareParameter("pfetim_m1"  multiFETcomp)
compareParameter("pfetihvt4_m1"  multiFETcomp)
compareParameter("pfetihvtx_m1"  multiFETcomp)
compareParameter("pfetihvt_m1"  multiFETcomp)
compareParameter("pfeti4_m1"  multiFETcomp)
compareParameter("pfetix_m1"  multiFETcomp)
compareParameter("pfeti_m1"  multiFETcomp)
compareParameter("pfetmx_m1"  multiFETcomp)
compareParameter("pfetm_m1"  multiFETcomp)
compareParameter("pfet33x_m1"  multiFETcomp)
compareParameter("pfet33_m1"  multiFETcomp)
compareParameter("pfetx_m1"  multiFETcomp)
compareParameter("pfet_m1"  multiFETcomp)
compareParameter("nfettwx_m1"  multiFETcomp)
compareParameter("nfettw_m1"  multiFETcomp)
compareParameter("nfet33twx_m1"  multiFETcomp)
compareParameter("nfetshvtx_m1"  multiFETcomp)
compareParameter("nfetshvt_m1"  multiFETcomp)
compareParameter("nfethvtx_m1"  multiFETcomp)
compareParameter("nfethvt_m1"  multiFETcomp)
compareParameter("nfetim4_m1"  multiFETcomp)
compareParameter("nfetimx_m1"  multiFETcomp)
compareParameter("nfetim_m1"  multiFETcomp)
compareParameter("nfetihvt4_m1"  multiFETcomp)
compareParameter("nfetihvtx_m1"  multiFETcomp)
compareParameter("nfetihvt_m1"  multiFETcomp)
compareParameter("nfeti4_m1"  multiFETcomp)
compareParameter("nfetix_m1"  multiFETcomp)
compareParameter("nfeti_m1"  multiFETcomp)
compareParameter("nfetmtwx_m1"  multiFETcomp)
compareParameter("nfetmtw_m1"  multiFETcomp)
compareParameter("nfetmx_m1"  multiFETcomp)
compareParameter("nfetm_m1"  multiFETcomp)
compareParameter("nfet33x_m1"  multiFETcomp)
compareParameter("nfet33_m1"  multiFETcomp)
compareParameter("nfetx_m1"  multiFETcomp)
compareParameter("nfet_m1"  multiFETcomp)
compareParameter("pfetim4_m0"  FETNFcomp)
compareParameter("pfetimx_m0"  FETNFcomp)
compareParameter("pfetim_m0"  FETNFcomp)
compareParameter("pfetihvt4_m0"  FETNFcomp)
compareParameter("pfetihvtx_m0"  FETNFcomp)
compareParameter("pfetihvt_m0"  FETNFcomp)
compareParameter("pfeti4_m0"  FETNFcomp)
compareParameter("pfetix_m0"  FETNFcomp)
compareParameter("pfeti_m0"  FETNFcomp)
compareParameter("nfetim4_m0"  FETNFcomp)
compareParameter("nfetimx_m0"  FETNFcomp)
compareParameter("nfetim_m0"  FETNFcomp)
compareParameter("nfetihvt4_m0"  FETNFcomp)
compareParameter("nfetihvtx_m0"  FETNFcomp)
compareParameter("nfetihvt_m0"  FETNFcomp)
compareParameter("nfeti4_m0"  FETNFcomp)
compareParameter("nfetix_m0"  FETNFcomp)
compareParameter("nfeti_m0"  FETNFcomp)
compareParameter("zvtnfet33x_m0"  FETNFcomp)
compareParameter("zvtnfet33_m0"  FETNFcomp)
compareParameter("zvtnfetx_m0"  FETNFcomp)
compareParameter("zvtnfet_m0"  FETNFcomp)
compareParameter("pfetshvtx_m0"  FETNFcomp)
compareParameter("pfetshvt_m0"  FETNFcomp)
compareParameter("pfethvtx_m0"  FETNFcomp)
compareParameter("pfethvt_m0"  FETNFcomp)
compareParameter("pfetmx_m0"  FETNFcomp)
compareParameter("pfetm_m0"  FETNFcomp)
compareParameter("pfet33x_m0"  FETNFcomp)
compareParameter("pfet33_m0"  FETNFcomp)
compareParameter("pfetx_m0"  FETNFcomp)
compareParameter("pfet_m0"  FETNFcomp)
compareParameter("nfettwx_m0"  FETNFcomp)
compareParameter("nfettw_m0"  FETNFcomp)
compareParameter("nfet33twx_m0"  FETNFcomp)
compareParameter("nfetshvtx_m0"  FETNFcomp)
compareParameter("nfetshvt_m0"  FETNFcomp)
compareParameter("nfethvtx_m0"  FETNFcomp)
compareParameter("nfethvt_m0"  FETNFcomp)
compareParameter("nfetmtwx_m0"  FETNFcomp)
compareParameter("nfetmtw_m0"  FETNFcomp)
compareParameter("nfetmx_m0"  FETNFcomp)
compareParameter("nfetm_m0"  FETNFcomp)
compareParameter("nfet33_m0"  FETNFcomp)
compareParameter("nfet33x_m0"  FETNFcomp)
compareParameter("nfetx_m0"  FETNFcomp)
compareParameter("nfet_m0"  FETNFcomp)
compareParameter("pjfet_m1"  multiPJFETcomp)
compareParameter("pjfet_m0"  PJFETcomp)
compareParameter("coupledwires_m0"  CWIREcomp)
compareParameter("vncap_hvx_m1"  multiVPPHVcomp)
compareParameter("vncap_hvx_m0"  parVPPHVcomp)
compareParameter("vncap_hv_m1"  multiVPPHVcomp)
compareParameter("vncap_hv_m0"  parVPPHVcomp)
compareParameter("vncapx_m1"  multiVPPcomp)
compareParameter("vncapx_m0"  parVPPcomp)
compareParameter("vncap_m1"  multiVPPcomp)
compareParameter("vncap_m0"  parVPPcomp)
compareParameter("mimhkx_m1"  multiMIMHKcomp)
compareParameter("mimhkx_m0"  multiMIMHKcomp)
compareParameter("mimhk_m1"  multiMIMHKcomp)
compareParameter("mimhk_m0"  multiMIMHKcomp)
compareParameter("cmimhdx_m1"  multiMIMcomp)
compareParameter("cmimhdx_m0"  multiMIMcomp)
compareParameter("cmimhd_m1"  multiMIMcomp)
compareParameter("cmimhd_m0"  multiMIMcomp)
compareParameter("dualcmimhdx_m1"  multiMIMcomp)
compareParameter("dualcmimhdx_m0"  multiMIMcomp)
compareParameter("dualcmimhd_m1"  multiMIMcomp)
compareParameter("dualcmimhd_m0"  multiMIMcomp)
compareParameter("cmimx_m1"  multiMIMcomp)
compareParameter("cmimx_m0"  multiMIMcomp)
compareParameter("cmim_m1"  multiMIMcomp)
compareParameter("cmim_m0"  multiMIMcomp)
compareParameter("dualcmimx_m1"  multiMIMcomp)
compareParameter("dualcmimx_m0"  multiMIMcomp)
compareParameter("dualcmim_m1"  multiMIMcomp)
compareParameter("dualcmim_m0"  multiMIMcomp)
compareParameter("oprrpresx_m1"  multiOPREScomp)
compareParameter("oprrpresx_m0"  multiOPREScomp)
compareParameter("oprrpres_m1"  multiOPREScomp)
compareParameter("oprrpres_m0"  multiOPREScomp)
compareParameter("oprppresx_m1"  multiOPREScomp)
compareParameter("oprppresx_m0"  multiOPREScomp)
compareParameter("oprppres_m1"  multiOPREScomp)
compareParameter("oprppres_m0"  multiOPREScomp)
compareParameter("opppcresx_m1"  multiOPREScomp)
compareParameter("opppcresx_m0"  multiOPREScomp)
compareParameter("opppcres_m1"  multiOPREScomp)
compareParameter("opppcres_m0"  multiOPREScomp)
compareParameter("opnpcresx_m1"  multiOPREScomp)
compareParameter("opnpcresx_m0"  multiOPREScomp)
compareParameter("opnpcres_m1"  multiOPREScomp)
compareParameter("opnpcres_m0"  multiOPREScomp)
mergeParallel("WDPWDN" merge DIODEcomb)
mergeParallel("wdpwdn" merge DIODEcomb)
mergeParallel("WDDNSX" merge DIODEcomb)
mergeParallel("wddnsx" merge DIODEcomb)
mergeParallel("TDNDPW" merge DIODEcomb)
mergeParallel("tdndpw" merge DIODEcomb)
mergeParallel("WDNWSX" merge DIODEcomb)
mergeParallel("wdnwsx" merge DIODEcomb)
mergeParallel("TDPDNW" merge DIODEcomb)
mergeParallel("tdpdnw" merge DIODEcomb)
mergeParallel("TDNDSX" merge DIODEcomb)
mergeParallel("tdndsx" merge DIODEcomb)
compareParameter("WDPWDN"  DIODEcomp)
compareParameter("wdpwdn"  DIODEcomp)
compareParameter("WDDNSX"  DIODEcomp)
compareParameter("wddnsx"  DIODEcomp)
compareParameter("TDNDPW"  DIODEcomp)
compareParameter("tdndpw"  DIODEcomp)
compareParameter("WDNWSX"  DIODEcomp)
compareParameter("wdnwsx"  DIODEcomp)
compareParameter("TDPDNW"  DIODEcomp)
compareParameter("tdpdnw"  DIODEcomp)
compareParameter("TDNDSX"  DIODEcomp)
compareParameter("tdndsx"  DIODEcomp)
compareParameter("bondpadx_m0"  BONDPADcomp)
compareParameter("bondpad_m0"  BONDPADcomp)
mergeParallel("vpnp_m0" noMerge)
mergeParallel("vnpn_m0" noMerge)
mergeParallel("vpnp_m1" merge multiBIPcomb)
mergeParallel("vnpn_m1" merge multiBIPcomb)
mergeParallel("pjfet_m1" merge multiPJFETcomb)
mergeParallel("pjfet_m0" merge parPJFETcomb)
mergeSeries("hvpwres_m0" noMerge)
mergeSeries("hvnwres_m0" noMerge)
mergeParallel("hvpwres_m0" noMerge)
mergeParallel("hvnwres_m0" noMerge)
mergeParallel("hvpwres_m1" merge multiHVREScomb)
mergeParallel("hvnwres_m1" merge multiHVREScomb)
mergeParallel("sblkpdres3_m0" noMerge)
mergeParallel("sblkpdiresx_m0" noMerge)
mergeParallel("sblkpdires_m0" noMerge)
mergeParallel("sblkpdresx_m0" noMerge)
mergeParallel("sblkpdres_m0" noMerge)
mergeParallel("sblkndres3_m0" noMerge)
mergeParallel("sblkndiresx_m0" noMerge)
mergeParallel("sblkndires_m0" noMerge)
mergeParallel("sblkndresx_m0" noMerge)
mergeParallel("sblkndres_m0" noMerge)
mergeParallel("sblkpdres3_m1" merge multiSBLKREScomb)
mergeParallel("sblkpdiresx_m1" merge multiSBLKREScomb)
mergeParallel("sblkpdires_m1" merge multiSBLKREScomb)
mergeParallel("sblkpdresx_m1" merge multiSBLKREScomb)
mergeParallel("sblkpdres_m1" merge multiSBLKREScomb)
mergeParallel("sblkndres3_m1" merge multiSBLKREScomb)
mergeParallel("sblkndiresx_m1" merge multiSBLKREScomb)
mergeParallel("sblkndires_m1" merge multiSBLKREScomb)
mergeParallel("sblkndresx_m1" merge multiSBLKREScomb)
mergeParallel("sblkndres_m1" merge multiSBLKREScomb)
mergeParallel("esdtdi25_m0" merge parESDXDIcomb)
mergeParallel("esdtdi20_m0" merge parESDXDIcomb)
mergeParallel("esdfdi50_m0" merge parESDXDIcomb)
mergeParallel("esdfdi25_m0" merge parESDXDIcomb)
mergeParallel("esdndidn_m0" noMerge)
mergeParallel("esdndpi_m0" noMerge)
mergeParallel("esdndsx_m0" merge parESDNDSXcomb)
mergeParallel("esdpdidn_m0" noMerge)
mergeParallel("esdpnpi_m0" noMerge)
mergeParallel("esdvpnpnw_m0" merge parESDVPNPcomb)
mergeParallel("havarx_m0" noMerge)
mergeParallel("havar_m0" noMerge)
mergeParallel("havarx_m1" merge multiHAVARcomb)
mergeParallel("havar_m1" merge multiHAVARcomb)
mergeParallel("diffmosvarx_m0" noMerge)
mergeParallel("diffmosvar_m0" noMerge)
mergeParallel("pcapim_m0" merge parMOSVARcomb)
mergeParallel("pcapi_m0" merge parMOSVARcomb)
mergeParallel("pcap_m0" noMerge)
mergeParallel("mosvarmx_m0" noMerge)
mergeParallel("mosvarm_m0" noMerge)
mergeParallel("mosvartx_m0" noMerge)
mergeParallel("mosvart_m0" noMerge)
mergeParallel("diffmosvarx_m1" merge multiDIFFMOSVARcomb)
mergeParallel("diffmosvar_m1" merge multiDIFFMOSVARcomb)
mergeParallel("pcapim_m1" merge multiMOSVARcomb)
mergeParallel("pcapi_m1" merge multiMOSVARcomb)
mergeParallel("pcap_m1" merge multiMOSVARcomb)
mergeParallel("mosvarmx_m1" merge multiMOSVARcomb)
mergeParallel("mosvarm_m1" merge multiMOSVARcomb)
mergeParallel("mosvartx_m1" merge multiMOSVARcomb)
mergeParallel("mosvart_m1" merge multiMOSVARcomb)
mergeParallel("divpnpx_m0" noMerge)
mergeParallel("divpnp_m0" noMerge)
mergeParallel("divpnpx_m1" merge multiDIPDNWcomb)
mergeParallel("divpnp_m1" merge multiDIPDNWcomb)
mergeParallel("dindpwx_m0" noMerge)
mergeParallel("dindpw_m0" noMerge)
mergeParallel("dindpwx_m1" merge multiDIPDNWcomb)
mergeParallel("dindpw_m1" merge multiDIPDNWcomb)
mergeParallel("dipdnwx_m0" noMerge)
mergeParallel("dipdnw_m0" noMerge)
mergeParallel("dipdnwx_m1" merge multiDIPDNWcomb)
mergeParallel("dipdnw_m1" merge multiDIPDNWcomb)
mergeSeries("oppdres3_m0" merge serRES2comb)
mergeSeries("oppdiresx_m0" merge serRES2comb)
mergeSeries("oppdires_m0" merge serRES2comb)
mergeSeries("opndres3_m0" merge serRES2comb)
mergeSeries("opndiresx_m0" merge serRES2comb)
mergeSeries("opndires_m0" merge serRES2comb)
mergeParallel("oppdres3_m0" merge parRES2comb)
mergeParallel("oppdiresx_m0" merge parRES2comb)
mergeParallel("oppdires_m0" merge parRES2comb)
mergeParallel("opndres3_m0" merge parRES2comb)
mergeParallel("opndiresx_m0" merge parRES2comb)
mergeParallel("opndires_m0" merge parRES2comb)
mergeParallel("oppdres3_m1" merge multiRES2comb)
mergeParallel("oppdiresx_m1" merge multiRES2comb)
mergeParallel("oppdires_m1" merge multiRES2comb)
mergeParallel("opndres3_m1" merge multiRES2comb)
mergeParallel("opndiresx_m1" merge multiRES2comb)
mergeParallel("opndires_m1" merge multiRES2comb)
mergeSeries("oppdresx_m0" merge serRES2comb)
mergeSeries("oppdres_m0" merge serRES2comb)
mergeSeries("opndresx_m0" merge serRES2comb)
mergeSeries("opndres_m0" merge serRES2comb)
mergeSeries("k1resx_m0" merge serRES2comb)
mergeSeries("k1res_m0" merge serRES2comb)
mergeParallel("oppdresx_m0" merge parRES2comb)
mergeParallel("oppdres_m0" merge parRES2comb)
mergeParallel("opndresx_m0" merge parRES2comb)
mergeParallel("opndres_m0" merge parRES2comb)
mergeParallel("k1resx_m0" merge parRES2comb)
mergeParallel("k1res_m0" merge parRES2comb)
mergeParallel("oppdresx_m1" merge multiRES2comb)
mergeParallel("oppdres_m1" merge multiRES2comb)
mergeParallel("opndresx_m1" merge multiRES2comb)
mergeParallel("opndres_m1" merge multiRES2comb)
mergeParallel("k1resx_m1" merge multiRES2comb)
mergeParallel("k1res_m1" merge multiRES2comb)
mergeParallel("sbdix_m0" noMerge)
mergeParallel("sbdi_m0" noMerge)
mergeParallel("sbdx_m0" noMerge)
mergeParallel("sbd_m0" noMerge)
mergeParallel("sbdix_m1" merge multiSBDcomb)
mergeParallel("sbdi_m1" merge multiSBDcomb)
mergeParallel("sbdx_m1" merge multiSBDcomb)
mergeParallel("sbd_m1" merge multiSBDcomb)
mergeParallel("pcdcap33x_m0" noMerge)
mergeParallel("pcdcap33_m0" noMerge)
mergeParallel("pcdcaptx_m0" merge parMOSVARcomb)
mergeParallel("pcdcapt_m0" merge parMOSVARcomb)
mergeParallel("pcdcapmx_m0" merge parMOSVARcomb)
mergeParallel("pcdcapm_m0" merge parMOSVARcomb)
mergeParallel("pcdcapx_m0" noMerge)
mergeParallel("pcdcap_m0" noMerge)
mergeParallel("pcdcap33x_m1" merge multiPCDCAPcomb)
mergeParallel("pcdcap33_m1" merge multiPCDCAPcomb)
mergeParallel("pcdcaptx_m1" merge multiMOSVARcomb)
mergeParallel("pcdcapt_m1" merge multiMOSVARcomb)
mergeParallel("pcdcapmx_m1" merge multiMOSVARcomb)
mergeParallel("pcdcapm_m1" merge multiMOSVARcomb)
mergeParallel("pcdcapx_m1" merge multiPCDCAPcomb)
mergeParallel("pcdcap_m1" merge multiPCDCAPcomb)
mergeParallel("singlewire_m0" noMerge)
mergeParallel("inds_m0" noMerge)
mergeParallel("indp_m0" noMerge)
mergeParallel("symindp_m0" noMerge)
mergeParallel("symind_m0" noMerge)
mergeParallel("ind_m0" noMerge)
mergeParallel("indlinex_m0" noMerge)
mergeParallel("indline_m0" noMerge)
mergeParallel("pfet50t_m0" merge parFETHVcomb)
mergeParallel("pfet50m_m0" merge parFETHVcomb)
mergeParallel("pfet50hs_m0" merge parFETHVcomb)
mergeParallel("pfet50h_m0" merge parFETHVcomb)
mergeParallel("pfet25m_m0" merge parFETHVcomb)
mergeParallel("pfet20t_m0" merge parFETHVcomb)
mergeParallel("pfet20hs_m0" merge parFETHVcomb)
mergeParallel("pfet20h_m0" merge parFETHVcomb)
mergeParallel("nfeti50t_m0" merge parFETHVcomb)
mergeParallel("nfeti50m_m0" merge parFETHVcomb)
mergeParallel("nfeti50h_m0" merge parFETHVcomb)
mergeParallel("nfeti25m_m0" merge parFETHVcomb)
mergeParallel("nfeti20t_m0" merge parFETHVcomb)
mergeParallel("nfeti20h_m0" merge parFETHVcomb)
mergeParallel("nfet50hs_m0" merge parFETHVcomb)
mergeParallel("nfet20hs_m0" merge parFETHVcomb)
mergeParallel("nfet20mh_m0" merge parFETHVcomb)
mergeParallel("pfet50t_m1" merge multiFETHVcomb)
mergeParallel("pfet50m_m1" merge multiFETHVcomb)
mergeParallel("pfet50hs_m1" merge multiFETHVcomb)
mergeParallel("pfet50h_m1" merge multiFETHVcomb)
mergeParallel("pfet25m_m1" merge multiFETHVcomb)
mergeParallel("pfet20t_m1" merge multiFETHVcomb)
mergeParallel("pfet20hs_m1" merge multiFETHVcomb)
mergeParallel("pfet20h_m1" merge multiFETHVcomb)
mergeParallel("nfeti50t_m1" merge multiFETHVcomb)
mergeParallel("nfeti50m_m1" merge multiFETHVcomb)
mergeParallel("nfeti50h_m1" merge multiFETHVcomb)
mergeParallel("nfeti25m_m1" merge multiFETHVcomb)
mergeParallel("nfeti20t_m1" merge multiFETHVcomb)
mergeParallel("nfeti20h_m1" merge multiFETHVcomb)
mergeParallel("nfet50hs_m1" merge multiFETHVcomb)
mergeParallel("nfet20hs_m1" merge multiFETHVcomb)
mergeParallel("nfet20mh_m1" merge multiFETHVcomb)
mergeParallel("pfeti4_rf_m0" merge parFETRFcomb)
mergeParallel("pfeti_rf_m0" merge parFETRFcomb)
mergeParallel("pfet_rf_m0" merge parFETRFcomb)
mergeParallel("nfettw_rf_m0" merge parFETRFcomb)
mergeParallel("nfeti4_rf_m0" merge parFETRFcomb)
mergeParallel("nfeti_rf_m0" merge parFETRFcomb)
mergeParallel("nfet_rf_m0" merge parFETRFcomb)
mergeParallel("pfeti4_rf_m1" merge multiFETRFcomb)
mergeParallel("pfeti_rf_m1" merge multiFETRFcomb)
mergeParallel("pfet_rf_m1" merge multiFETRFcomb)
mergeParallel("nfettw_rf_m1" merge multiFETRFcomb)
mergeParallel("nfeti4_rf_m1" merge multiFETRFcomb)
mergeParallel("nfeti_rf_m1" merge multiFETRFcomb)
mergeParallel("nfet_rf_m1" merge multiFETRFcomb)
mergeParallel("zvtnfet33x_m0" merge parFETcomb)
mergeParallel("zvtnfet33_m0" merge parFETcomb)
mergeParallel("zvtnfetx_m0" merge parFETcomb)
mergeParallel("zvtnfet_m0" merge parFETcomb)
mergeParallel("pfetshvtx_m0" merge parFETcomb)
mergeParallel("pfetshvt_m0" merge parFETcomb)
mergeParallel("pfethvtx_m0" merge parFETcomb)
mergeParallel("pfethvt_m0" merge parFETcomb)
mergeParallel("pfetim4_m0" merge parFETcomb)
mergeParallel("pfetimx_m0" merge parFETcomb)
mergeParallel("pfetim_m0" merge parFETcomb)
mergeParallel("pfetihvt4_m0" merge parFETcomb)
mergeParallel("pfetihvtx_m0" merge parFETcomb)
mergeParallel("pfetihvt_m0" merge parFETcomb)
mergeParallel("pfeti4_m0" merge parFETcomb)
mergeParallel("pfetix_m0" merge parFETcomb)
mergeParallel("pfeti_m0" merge parFETcomb)
mergeParallel("pfetmx_m0" merge parFETcomb)
mergeParallel("pfetm_m0" merge parFETcomb)
mergeParallel("pfet33x_m0" merge parFETcomb)
mergeParallel("pfet33_m0" merge parFETcomb)
mergeParallel("pfetx_m0" merge parFETcomb)
mergeParallel("pfet_m0" merge parFETcomb)
mergeParallel("nfettwx_m0" merge parFETcomb)
mergeParallel("nfettw_m0" merge parFETcomb)
mergeParallel("nfet33twx_m0" merge parFETcomb)
mergeParallel("nfetshvtx_m0" merge parFETcomb)
mergeParallel("nfetshvt_m0" merge parFETcomb)
mergeParallel("nfethvtx_m0" merge parFETcomb)
mergeParallel("nfethvt_m0" merge parFETcomb)
mergeParallel("nfetim4_m0" merge parFETcomb)
mergeParallel("nfetimx_m0" merge parFETcomb)
mergeParallel("nfetim_m0" merge parFETcomb)
mergeParallel("nfetihvt4_m0" merge parFETcomb)
mergeParallel("nfetihvtx_m0" merge parFETcomb)
mergeParallel("nfetihvt_m0" merge parFETcomb)
mergeParallel("nfeti4_m0" merge parFETcomb)
mergeParallel("nfetix_m0" merge parFETcomb)
mergeParallel("nfeti_m0" merge parFETcomb)
mergeParallel("nfetmtwx_m0" merge parFETcomb)
mergeParallel("nfetmtw_m0" merge parFETcomb)
mergeParallel("nfetmx_m0" merge parFETcomb)
mergeParallel("nfetm_m0" merge parFETcomb)
mergeParallel("nfet33x_m0" merge parFETcomb)
mergeParallel("nfet33_m0" merge parFETcomb)
mergeParallel("nfetx_m0" merge parFETcomb)
mergeParallel("nfet_m0" merge parFETcomb)
mergeParallel("zvtnfet33x_m1" merge multiFETcomb)
mergeParallel("zvtnfet33_m1" merge multiFETcomb)
mergeParallel("zvtnfetx_m1" merge multiFETcomb)
mergeParallel("zvtnfet_m1" merge multiFETcomb)
mergeParallel("pfetshvtx_m1" merge multiFETcomb)
mergeParallel("pfetshvt_m1" merge multiFETcomb)
mergeParallel("pfethvtx_m1" merge multiFETcomb)
mergeParallel("pfethvt_m1" merge multiFETcomb)
mergeParallel("pfetim4_m1" merge multiFETcomb)
mergeParallel("pfetimx_m1" merge multiFETcomb)
mergeParallel("pfetim_m1" merge multiFETcomb)
mergeParallel("pfetihvt4_m1" merge multiFETcomb)
mergeParallel("pfetihvtx_m1" merge multiFETcomb)
mergeParallel("pfetihvt_m1" merge multiFETcomb)
mergeParallel("pfeti4_m1" merge multiFETcomb)
mergeParallel("pfetix_m1" merge multiFETcomb)
mergeParallel("pfeti_m1" merge multiFETcomb)
mergeParallel("pfetmx_m1" merge multiFETcomb)
mergeParallel("pfetm_m1" merge multiFETcomb)
mergeParallel("pfet33x_m1" merge multiFETcomb)
mergeParallel("pfet33_m1" merge multiFETcomb)
mergeParallel("pfetx_m1" merge multiFETcomb)
mergeParallel("pfet_m1" merge multiFETcomb)
mergeParallel("nfettwx_m1" merge multiFETcomb)
mergeParallel("nfettw_m1" merge multiFETcomb)
mergeParallel("nfet33twx_m1" merge multiFETcomb)
mergeParallel("nfetshvtx_m1" merge multiFETcomb)
mergeParallel("nfetshvt_m1" merge multiFETcomb)
mergeParallel("nfethvtx_m1" merge multiFETcomb)
mergeParallel("nfethvt_m1" merge multiFETcomb)
mergeParallel("nfetim4_m1" merge multiFETcomb)
mergeParallel("nfetimx_m1" merge multiFETcomb)
mergeParallel("nfetim_m1" merge multiFETcomb)
mergeParallel("nfetihvt4_m1" merge multiFETcomb)
mergeParallel("nfetihvtx_m1" merge multiFETcomb)
mergeParallel("nfetihvt_m1" merge multiFETcomb)
mergeParallel("nfeti4_m1" merge multiFETcomb)
mergeParallel("nfetix_m1" merge multiFETcomb)
mergeParallel("nfeti_m1" merge multiFETcomb)
mergeParallel("nfetmtwx_m1" merge multiFETcomb)
mergeParallel("nfetmtw_m1" merge multiFETcomb)
mergeParallel("nfetmx_m1" merge multiFETcomb)
mergeParallel("nfetm_m1" merge multiFETcomb)
mergeParallel("nfet33x_m1" merge multiFETcomb)
mergeParallel("nfet33_m1" merge multiFETcomb)
mergeParallel("nfetx_m1" merge multiFETcomb)
mergeParallel("nfet_m1" merge multiFETcomb)
mergeParallel("coupledwires_m0" noMerge)
mergeParallel("vncap_hvx_m1" merge multiVPPHVcomb)
mergeParallel("vncap_hv_m1" merge multiVPPHVcomb)
mergeParallel("vncapx_m1" merge multiVPPcomb)
mergeParallel("vncap_m1" merge multiVPPcomb)
mergeParallel("vncap_hvx_m0" noMerge)
mergeParallel("vncap_hv_m0" noMerge)
mergeParallel("vncapx_m0" noMerge)
mergeParallel("vncap_m0" noMerge)
mergeSeries("vncap_hvx_m0" noMerge)
mergeSeries("vncap_hv_m0" noMerge)
mergeSeries("vncapx_m0" noMerge)
mergeSeries("vncap_m0" noMerge)
mergeSeries("mimhkx_m0" noMerge)
mergeSeries("mimhk_m0" noMerge)
mergeSeries("cmimhdx_m0" noMerge)
mergeSeries("cmimhd_m0" noMerge)
mergeSeries("cmimx_m0" noMerge)
mergeSeries("cmim_m0" noMerge)
mergeSeries("dualcmimhdx_m0" noMerge)
mergeSeries("dualcmimhd_m0" noMerge)
mergeSeries("dualcmimx_m0" noMerge)
mergeSeries("dualcmim_m0" noMerge)
mergeParallel("mimhkx_m0" noMerge)
mergeParallel("mimhk_m0" noMerge)
mergeParallel("cmimhdx_m0" noMerge)
mergeParallel("cmimhd_m0" noMerge)
mergeParallel("cmimx_m0" noMerge)
mergeParallel("cmim_m0" noMerge)
mergeParallel("dualcmimhdx_m0" noMerge)
mergeParallel("dualcmimhd_m0" noMerge)
mergeParallel("dualcmimx_m0" noMerge)
mergeParallel("dualcmim_m0" noMerge)
mergeParallel("mimhkx_m1" merge multiMIMHKcomb)
mergeParallel("mimhk_m1" merge multiMIMHKcomb)
mergeParallel("cmimhdx_m1" merge multiMIMcomb)
mergeParallel("cmimhd_m1" merge multiMIMcomb)
mergeParallel("cmimx_m1" merge multiMIMcomb)
mergeParallel("cmim_m1" merge multiMIMcomb)
mergeParallel("dualcmimhdx_m1" merge multiMIMcomb)
mergeParallel("dualcmimhd_m1" merge multiMIMcomb)
mergeParallel("dualcmimx_m1" merge multiMIMcomb)
mergeParallel("dualcmim_m1" merge multiMIMcomb)
mergeSeries("oprrpresx_m0" merge serOPREScomb)
mergeSeries("oprrpres_m0" merge serOPREScomb)
mergeSeries("oprppresx_m0" merge serOPREScomb)
mergeSeries("oprppres_m0" merge serOPREScomb)
mergeSeries("opppcresx_m0" merge serOPREScomb)
mergeSeries("opppcres_m0" merge serOPREScomb)
mergeSeries("opnpcresx_m0" merge serOPREScomb)
mergeSeries("opnpcres_m0" merge serOPREScomb)
mergeParallel("oprrpresx_m0" merge parOPREScomb)
mergeParallel("oprrpres_m0" merge parOPREScomb)
mergeParallel("oprppresx_m0" merge parOPREScomb)
mergeParallel("oprppres_m0" merge parOPREScomb)
mergeParallel("opppcresx_m0" merge parOPREScomb)
mergeParallel("opppcres_m0" merge parOPREScomb)
mergeParallel("opnpcresx_m0" merge parOPREScomb)
mergeParallel("opnpcres_m0" merge parOPREScomb)
mergeParallel("oprrpresx_m1" merge multiOPREScomb)
mergeParallel("oprrpres_m1" merge multiOPREScomb)
mergeParallel("oprppresx_m1" merge multiOPREScomb)
mergeParallel("oprppres_m1" merge multiOPREScomb)
mergeParallel("opppcresx_m1" merge multiOPREScomb)
mergeParallel("opppcres_m1" merge multiOPREScomb)
mergeParallel("opnpcresx_m1" merge multiOPREScomb)
mergeParallel("opnpcres_m1" merge multiOPREScomb)
mergeParallel("bondpadx_m0" noMerge)
mergeParallel("bondpad_m0" noMerge)
mergeSeries("lvsres" merge)
mergeParallel("lvsres" merge)
mergeParallel("subcx" merge parSubcont)
mergeParallel("subc" merge parSubcont)
Reading layout network
 inputting network ASSURA_LVS/curr_mirror/myrun.ldb
Preprocessing layout network phase 1
 Database : /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.eln
 Top cell : curr_mirror
USER DEFINED ERC POWERS  : *VDD* *Vdd* *vdd* *VCC* *Vcc* *vcc* VHI* VHi* Vhi* vhi* 
USER DEFINED ERC GROUNDS : *GND* *Gnd* *gnd* *VSS* *Vss* *vss* VLO* VLo* Vlo* vlo* 

Reading user defined devices...

--- Path check command list ---
Found supply pins:
vssa :Ground Pin

********* PATH CHECK PROCESSING ******** 

 Creating tree, pass 1 of 1 ... done
 Smashing tree, pass 1 of 1 ... done
 Pathchecking, pass 1 of 1 ... done
 Extra checking, pass 1 of 1 ... done
 Reconnecting one way pathes, pass 1 of 1 ... done
 Creating reports, pass 1 of 1 ... done

 Saving report ... done

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/ercChk

Starting /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avcallproc /home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror/myrun.rsf -trp -exec1
Loading all available HV p-cell functions
No mx check

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Loading tech rule set file : /pkg/AMS411/assura/h18a6/h18a6am/techRuleSets

Finished /pkg/Cadence/installs/ASSURA41//tools/assura/bin/avcallproc


Assura LVS terminated normally.



Run ended: Sat Dec 12 22:17:56 2015

*****  Assura terminated normally  *****

