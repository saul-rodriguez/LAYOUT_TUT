;----------------------------------------------------------------------------
; @(#)$CDS: assura version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 04/19/15 20:36 (sjfql463) $
; sub-version 4.1_USR4_HF23
;----------------------------------------------------------------------------


;----------------------------------------------------------------------------
; RSF include(/pkg/AMS411/assura/h18a6/h18a6/LVSinclude.rsf) Section
; Specified in the Assura UI
;----------------------------------------------------------------------------

;   Path, Component, Release: cmhv7sf/rel/Assura/LVS/LVSinclude.rsf, assuraLVS, cad_cmhv7sf
;   CMVC Revision: 1.17 11/05/19 05:31:18
;
; 21092007 cg  cmvc 16403 Initial release from cmrf7sf V1500.
; 06112007 cg  cmvc 16411 Added hvnwres & hvpwres.
; 06112007 cg  cmvc 16411 Added vnpn & vpnp.
; 04122007 cg  cmvc 16497 Added corrPoint device.
; 15042008 jmp cmvc 16645 Support dipdnw divpnp devices.
; 15042008 jmp cmvc 16835 Support esdndidn esdpdidn devices.
; V0200
; 22092008 cg  cmvc 17298 Support pcapi, pcapim, pcdcapm, sbdi, mosvar.
; 07102008 jmp cmvc 17298 Support esdfdi25/50 esdtdi20/25/50.
; V0201
; 07042009 pr  cmvc 18015 Added vncap_hv device.
; V1000
; 26102010 cg  cmvc 19546 Added devicepad pjfet.
; V1100
; 06042011 jmp cmvc 20249 Added ind, symind, indline, singlewire, coupledwires
; 28042011 jmp cmvc 20250 Added dindpw
;
; /*************************************************************************/
; /*                                                                   	   */
; /*  License Materials - Property of IBM                              	   */
; /*                                                                   	   */
; /*  CMHV7SF         		                                    	   */
; /*                                                                   	   */
; /*  (C) Copyright IBM Corp. 2007,  2011	                      	   */
; /*                                                                   	   */
; /*  IBM Confidential                                                 	   */
; /*                                                                   	   */
; /*  US Government Users Restricted Rights - Use, duplication, or   	   */
; /*  disclosure restricted by GSA ADP Schedule Contract with          	   */
; /*  IBM Corp.                                                        	   */
; /*                                                                   	   */
; /*************************************************************************/
;
;===============================================================================
;=START=START=START=START=START=START=START=START=START=START=START=START=START
;===============================================================================
; File name = LVSinclude.rsf
; included by default when placed in the technology directory defined by assura_tech.lib
;
;===============================================================================
;=STANDARD=DO NOT CHANGE=STANDARD=DO NOT CHANGE=STANDARD=DO NOT CHANGE=STANDARD=
;===============================================================================
;

avParameters(
; ?expandCellToParent ("esdpnpi*" "esdndpi*" "efuse*" "nfet*" "pfet*" "zvtnfet*" "subc*" "dipdnw" "divpnp" "nwpc*" "oprr*" "oppp*" "opn*" "diffmosvar*" "mosvar*" "havar*" "dualcmim*" "cmim*" "mimhk*" "ind*" "symind*" "bondpad*" "mosvar*" "k1res*" "esdnfet*" "esdvpnpnw*" "esdndsx*" "vncap*" "singlewire*" "coupledwire*" )

 ?expandCellToParent ("dindpw" "singlewire*" "coupledwire*" "ind*" "symind*" "pjfet*" "devicepad*" "diode*" "tdndsx" "tdpdnw" "wdnwsx" "wddnsx" "wdpwdn" "esdfdi*" "esdtdi2*" "esdndidn*" "esdpdidn*" "esdpnpi*" "esdndpi*" "efuse*" "nfet*" "pfet*" "subc*" "dipdnw" "divpnp" "nwpc*" "oprr*" "oppp*" "opn*" "opp*" "dualcmim*" "cmim*" "bondpad*" "k1res*" "esdnfet*" "esdvpnpnw*" "esdndsx*" "vncap*" "vncap_hv*" "hvnwres*" "hvpwres*" "vnpn*" "vpnp*" "corrPoint" "pcap*" "pcdcap*" "sbd*" "mosvar*")

 ?avrpt t
 ?autoGrid nil
)

;===============================================================================
;=AUSTRIAMICROSYSTEMS SPECIFIC PART
;===============================================================================

AMS_DIR = getShellEnvVar("AMS_DIR")
AMS_DB = getShellEnvVar("AMS_DB")
AMS_LIB = strcat(AMS_DIR "/" AMS_DB "/HK_H18")
printf( "Loading all available HV p-cell functions\n" )
load(strcat(AMS_LIB "/skill/ams_sdl.il"))

;
;
;===== Give the end user the choice of customizing the run control file ========
;
; This is included in the GUI generated rsf file. Any parameters explicitly set from the 
; GUI will override value in local.rsf if the parameters exist in both files.
;

if(isFile("local.rsf") then
    load("local.rsf")
)

;
;===============================================================================
;=END=END=END=END=END=END=END=END=END=END=END=END=END=END=END=END=END=END=END=
;===============================================================================


;----------------------------------------------------------------------------
; avParameter Section
; Created by the Assura UI
;----------------------------------------------------------------------------

avParameters(
  ?inputLayout ( "df2" "TUTORIAL" )
  ?cellName "curr_mirror_dummy"
  ?viewName "layout"
  ?runName "myrun"
  ?workingDirectory "ASSURA_LVS/curr_mirror_dummy"
  ?technology "h18a6am"
  ?techLib "./assura_tech.lib"
  ?techRuleSet "Full"
  ?set ("COMPARE_DIODE_SIZE" "COMPARE_NF_VALUES")
  ?avrpt t
  ?overwrite t
)




;----------------------------------------------------------------------------
; avCompareRules Section from Rules Files
; Specified in the Assura UI
;----------------------------------------------------------------------------

;   Path, Component, Release: cmhv7sf/rel/Assura/LVS/compare.vldb, assuraLVS, cad_cmhv7sf
;   CMVC Revision: 1.48 11/06/21 10:15:11
;
; /*************************************************************************/
; /*                                                                       */
; /*  License Materials - Property of IBM                                  */
; /*                                                                       */
; /*  CMHV7SF                                                              */
; /*                                                                       */
; /*  (C) Copyright IBM Corp. 2007,  2011                                  */
; /*                                                                       */
; /*  IBM Confidential                                                     */
; /*                                                                       */
; /*  US Government Users Restricted Rights - Use, duplication, or         */
; /*  disclosure restricted by GSA ADP Schedule Contract with              */
; /*  IBM Corp.                                                            */
; /*                                                                       */
; /*************************************************************************/
;
; 21092007 cg  cmvc 16403 initial release from cmrf7sf V1500.
; 25102007 pr  cmvc 16281 Add implementation "LVS_TW_DIODES" switch.
; 26102007 cg  cmvc 16411 High Voltage FETs implementation.
; 06112007 cg  cmvc 16411 Added hvnwres & hvpwres.
; 06112007 cg  cmvc 16411 Added vnpn & vpnp.
; 09112007 cg  cmvc 16412 Updated fet_rf netlisting.
; 12112007 cg  cmvc 16411 Updated op*dires & sblk*dires pin netlisting.
; 12112007 cg  cmvc 16412 Updated fet netlisting.
; 14112007 bj  cmvc 16412 set sblk*dires pins swapping in fix mode.
; 15112007 cg  cmvc 16411 Updated tolerance to 1% for HV devices.
; 28012008 pr  cmvc 16576 RCX update:set sblk*dires pins swapping in swap mode.
; 15042008 jmp cmvc 16864 Support fetHV as 5 terminal devices.
; 15042008 jmp cmvc 16645 Support dipdnw divpnp devices (add multiplicity).
; 15042008 jmp cmvc 16835/16846 reverse pin order for esdndsx tdndsx.
; 21042008 jmp cmvc 16835 Added esdndidn esdpdidn devices.
; 09052008 jmp cmvc 16867 Updated parasitic diode names
; 29052008 jmp cmvc 16867 Updated FETHVcomp, multiFETHVcomp, parFETHVcomb to support nd/m.
; V0200
; 18092008 jmp cmvc 16082 6 terminal LVS extraction.
; 18092008 jmp cmvc 16082 Remove "LVS_TW_DIODES" switch since devices in PI are no more supported.
; 22092008 cg  cmvc 17298 Added pcapi, pcapim, pcdcapm, sbdi, mosvar.
; 06102008 cg  cmvc 17298 Added "parMOSVARcomb" for "pcapi & pcapim" for xrep combination.
; V0201
; 07042009 pr  cmvc 18015 Added vncap_hv device.
; V0300
; 21122009 jmp cmvc 18895 LV Fet inter-digitation idg.
; 25012010 jmp cmvc 18653 Rename mosvar to mosvart
; 26012010 jmp cmvc 18653 Add mosvarm pcdcapm cmimhd dualcmimhd
; 28012010 jmp cmvc 18653 remove esdtdi50 (hierarchical cell) 
; 05022010 jmp cmvc 18828 add nfet20mh 
; 05022010 jmp cmvc 18828 compare w an l for esdtdi and esdfdi diodes ; esdtdi get  3 pins a c s
; 22022010 jmp cmvc 18653 Add xrep combination for pcdcapm
; 26022010 cg  cmvc 18828 Added "nd" parameter for esdfdi/esdtdi devices.
; 04032010 cg  cmvc 18828 Updated mosvarm/mosvarmx swap pin (G D B).
; 12032010 jmp cmvc 18829 Comented nw parmeter in par comb procedure for esdndsx
; V1000
; 12102010 jmp cmvc 18305 Area and perimeter tolerance for bondpad has changed
; 12102010 jmp cmvc 19095 remove MIM & VNCAP backplate checking when using specific switch "ignore_metal_capacitance_3rd_terminal"
; 13102010 jmp cmvc 19361 remove r and c parameter for mim and resistor devices.
; 13102010 jmp cmvc 19766 mergeSeries statement added for MIM and VNCAP
; 13102010 jmp cmvc 19767 Resistors combination correction.
; 15102010 jmp cmvc 19753 add nfetihvt pfetihvt
; 26102010 cg  cmvc 19546 add devicepad.
; 02112010 cg  cmvc 19753 Change all isolated fet 4 pin model names.
; 03112010 jmp cmvc 19753 add jeft.
; V1100
; 28042011 jmp cmvc 20250 add n/pfetshvt, dindpw, pcdcapt
; 21062011 jmp cmvc 20250 Add 4 pin devices into filter device option
;
avCompareRules(
  ; Global Variables

  hgp=5e-9
  ;LVSdebug=1

;; **** swap pins information ****

   schematic(
                        filterDevice( "pcapacitor" )
                        filterDevice( "pdiode" )
                        filterDevice( "presistor" short( "PLUS" "MINUS" ) )
			filterDevice( "pinductor" short( "PLUS" "MINUS" ) )
                        filterDevice( "diodepnw" )
                        filterDevice( "diodenx" )
                        filterDevice( "diodenwx" )
			filterDevice( "diodendpw" )
			filterDevice( "diodednsx" )
			filterDevice( "diodepwdn" )
                        filterDevice( "diodepwpi" )
                        filterDevice( "diodepisx" )

                   ; if( !avSwitch("LVS_TW_DIODES")  then
                   ;     filterDevice("diodednsx")
                   ;     filterDevice("diodepwdn")
                   ;     filterDevice("diodepisx")
                   ;     filterDevice("diodepwpi")
                   ;   )
		   
	     if( avSwitch( "ignore_metal_capacitance_3rd_terminal" ) then
                    deleteCellPin("cmim" 	"G")
                    deleteCellPin("dualcmim" 	"G")
                    deleteCellPin("cmimhd" 	"G")
                    deleteCellPin("dualcmimhd" 	"G")
                    deleteCellPin("vncap" 	"SUB")
                    deleteCellPin("vncap_hv" 	"SUB")
		) ; end switch ignore_metal_capacitance_3rd_terminal

                setGround( all "gnd!" "gnd" "gnd:" "GND:" "GND" "GND!")
                setPower( all "vdd!" "vdd" "vdd:" "VDD:" "VDD" "VDD!")

		  if( avSwitch( "resimulate_extracted" ) then
                    deleteCellPin( "nfeti"	"DN" )
                    deleteCellPin( "nfeti"	"sx" )
                    deleteCellPin( "nfetix"	"DN" )
                    deleteCellPin( "nfetix"	"sx" )
                    deleteCellPin( "nfetihvt"   "DN" )
                    deleteCellPin( "nfetihvt"   "sx" )
                    deleteCellPin( "nfetihvtx"  "DN" )
                    deleteCellPin( "nfetihvtx"  "sx" )
                    deleteCellPin( "nfetim"	"DN" )
                    deleteCellPin( "nfetim"	"sx" )
                    deleteCellPin( "nfetimx"	"DN" )
                    deleteCellPin( "nfetimx"	"sx" )
                    deleteCellPin( "nfeti_rf"	"DN" )
                    deleteCellPin( "nfeti_rf"	"sx" )
                    deleteCellPin( "pfeti"	"sx" )
                    deleteCellPin( "pfetix"	"sx" )
                    deleteCellPin( "pfetihvt"   "sx" )
                    deleteCellPin( "pfetihvtx"  "sx" )
                    deleteCellPin( "pfetim"	"sx" )
                    deleteCellPin( "pfetimx"	"sx" )
                    deleteCellPin( "pfeti_rf"	"sx" )
                    deleteCellPin( "oppdires"	"sx" )
                    deleteCellPin( "oppdires"	"DN" )
                    deleteCellPin( "opndires"	"sx" )
                    deleteCellPin( "opndires"	"DN" )
                    deleteCellPin( "sblkndires"	"sx" )
                    deleteCellPin( "sblkndires"	"DN" )
                    deleteCellPin( "sblkpdires"	"sx" )
                    deleteCellPin( "sblkpdires"	"DN" )
                  ) ; end if switch resimulate_extracted

                      ;; Filter Devices

			filterOptions( "dindpw_m0"       "XZ")
                        filterOptions( "dindpw_m1"       "XZ")
                        filterOptions( "coupledwires_m0" "XZ" ignore("vshield") )
                        filterOptions( "COUPLEDWIRES_m0" "XZ" ignore("vshield") )
                        filterOptions( "dualcmim_m0"     "XZ" ignore("G") )
                        filterOptions( "dualcmim_m1"     "XZ" ignore("G") )
                        filterOptions( "dualcmimx_m0"    "XZ" ignore("G") )
                        filterOptions( "dualcmimx_m1"    "XZ" ignore("G") )
                        filterOptions( "cmim_m0"         "XZ" ignore("G") )
                        filterOptions( "cmim_m1"         "XZ" ignore("G") )
                        filterOptions( "cmimx_m0"        "XZ" ignore("G") )
                        filterOptions( "cmimx_m1"        "XZ" ignore("G") )
                        filterOptions( "dualcmimhd_m0"   "XZ" ignore("G") )
                        filterOptions( "dualcmimhd_m1"   "XZ" ignore("G") )
                        filterOptions( "dualcmimhdx_m0"  "XZ" ignore("G") )
                        filterOptions( "dualcmimhdx_m1"  "XZ" ignore("G") )
                        filterOptions( "cmimhd_m0"       "XZ" ignore("G") )
                        filterOptions( "cmimhd_m1"       "XZ" ignore("G") )
                        filterOptions( "cmimhdx_m0"      "XZ" ignore("G") )
                        filterOptions( "cmimhdx_m1"      "XZ" ignore("G") )
                        filterOptions( "mimhk_m0"        "XZ" ignore("G") )
                        filterOptions( "mimhk_m1"        "XZ" ignore("G") )
                        filterOptions( "mimhkx_m0"       "XZ" ignore("G") )
                        filterOptions( "mimhkx_m1"       "XZ" ignore("G") )
                        filterOptions( "opndres_m0"      "XZ" ignore("G") )
                        filterOptions( "opndres_m1"      "XZ" ignore("G") )
                        filterOptions( "opndresx_m0"     "XZ" ignore("G") )
                        filterOptions( "opndresx_m1"     "XZ" ignore("G") )
                        filterOptions( "oppdres_m0"      "XZ" ignore("G") )
                        filterOptions( "oppdres_m1"      "XZ" ignore("G") )
                        filterOptions( "oppdresx_m0"     "XZ" ignore("G") )
                        filterOptions( "oppdresx_m1"     "XZ" ignore("G") )
                        filterOptions( "opndires_m0"     "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndires_m1"     "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndiresx_m0"    "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndres3_m0"     "XZ" ignore("G") )
                        filterOptions( "opndiresx_m1"    "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndres3_m1"     "XZ" ignore("G") )
                        filterOptions( "oppdires_m0"     "XZ" ignore("G" "sx") )
                        filterOptions( "oppdires_m1"     "XZ" ignore("G" "sx") )
                        filterOptions( "oppdiresx_m0"    "XZ" ignore("G" "sx") )
                        filterOptions( "oppdiresx_m1"    "XZ" ignore("G" "sx") )
                        filterOptions( "oppdres3_m0"     "XZ" ignore("G") )
                        filterOptions( "oppdres3_m1"     "XZ" ignore("G") )
                        filterOptions( "opnpcres_m0"     "XZ" ignore("G") )
                        filterOptions( "opnpcres_m1"     "XZ" ignore("G") )
                        filterOptions( "opnpcresx_m0"    "XZ" ignore("G") )
                        filterOptions( "opnpcresx_m1"    "XZ" ignore("G") )
                        filterOptions( "opppcres_m0"     "XZ" ignore("G") )
                        filterOptions( "opppcres_m1"     "XZ" ignore("G") )
                        filterOptions( "opppcresx_m0"    "XZ" ignore("G") )
                        filterOptions( "opppcresx_m1"    "XZ" ignore("G") )
                        filterOptions( "k1res_m0"        "XZ" ignore("G") )
                        filterOptions( "k1res_m1"        "XZ" ignore("G") )
                        filterOptions( "k1resx_m0"       "XZ" ignore("G") )
                        filterOptions( "k1resx_m1"       "XZ" ignore("G") )
                        filterOptions( "oprrpres_m0"     "XZ" ignore("G") )
                        filterOptions( "oprrpres_m1"     "XZ" ignore("G") )
                        filterOptions( "oprrpresx_m0"    "XZ" ignore("G") )
                        filterOptions( "oprrpresx_m1"    "XZ" ignore("G") )
                        filterOptions( "oprppres_m0"     "XZ" ignore("G") )
                        filterOptions( "oprppres_m1"     "XZ" ignore("G") )
                        filterOptions( "oprppresx_m0"    "XZ" ignore("G") )
                        filterOptions( "oprppresx_m1"    "XZ" ignore("G") )
                        filterOptions( "ind_m0"          "XZ" ignore("BULK") )
                        filterOptions( "ind_m1"          "XZ" ignore("BULK") )
                        filterOptions( "indx_m0"         "XZ" ignore("BULK") )
                        filterOptions( "indx_m1"         "XZ" ignore("BULK") )
                        filterOptions( "singlewire_m0"   "XZ" ignore("vshield") )
                        filterOptions( "SINGLEDWIRE_m0"  "XZ" ignore("vshield") )
                        filterOptions( "symind_m0"       "XZ" ignore("BULK") )
                        filterOptions( "symind_m1"       "XZ" ignore("BULK") )
                        filterOptions( "symindx_m0"      "XZ" ignore("BULK") )
                        filterOptions( "symindx_m1"      "XZ" ignore("BULK") )
                        filterOptions( "symindp_m0"      "XZ" ignore("BULK") )
                        filterOptions( "symindp_m1"      "XZ" ignore("BULK") )
                        filterOptions( "symindpx_m0"     "XZ" ignore("BULK") )
                        filterOptions( "symindpx_m1"     "XZ" ignore("BULK") )
                        filterOptions( "indline_m0"      "XZ" ignore("BULK") )
                        filterOptions( "indline_m1"      "XZ" ignore("BULK") )
                        filterOptions( "indlinex_m0"     "XZ" ignore("BULK") )
                        filterOptions( "indlinex_m1"     "XZ" ignore("BULK") )
                        filterOptions( "inds_m0"         "XZ" ignore("BULK") )
                        filterOptions( "inds_m1"         "XZ" ignore("BULK") )
                        filterOptions( "indsx_m0"        "XZ" ignore("BULK") )
                        filterOptions( "indsx_m1"        "XZ" ignore("BULK") )
                        filterOptions( "indp_m0"         "XZ" ignore("BULK") )
                        filterOptions( "indp_m1"         "XZ" ignore("BULK") )
                        filterOptions( "indpx_m0"        "XZ" ignore("BULK") )
                        filterOptions( "indpx_m1"        "XZ" ignore("BULK") )
                        filterOptions( "havar_m0"        "XZ" ignore("BULK") )
                        filterOptions( "havar_m1"        "XZ" ignore("BULK") )
                        filterOptions( "havarx_m0"       "XZ" ignore("BULK") )
                        filterOptions( "havarx_m1"       "XZ" ignore("BULK") )
                        filterOptions( "mosvart_m0"      "XZ" ignore("B") )
                        filterOptions( "mosvart_m1"      "XZ" ignore("B") )
                        filterOptions( "mosvartx_m0"     "XZ" ignore("B") )
                        filterOptions( "mosvartx_m1"     "XZ" ignore("B") )
                        filterOptions( "mosvarm_m0"      "XZ" ignore("B") )
                        filterOptions( "mosvarm_m1"      "XZ" ignore("B") )
                        filterOptions( "mosvarmx_m0"     "XZ" ignore("B") )
                        filterOptions( "mosvarmx_m1"     "XZ" ignore("B") )
                        filterOptions( "diffmosvar_m0"   "XZ" ignore("B") )
                        filterOptions( "diffmosvar_m1"   "XZ" ignore("B") )
                        filterOptions( "diffmosvarx_m0"  "XZ" ignore("B") )
                        filterOptions( "diffmosvarx_m1"  "XZ" ignore("B") )
                        filterOptions( "pcap_m0"         "XZ" ignore("TW") )
                        filterOptions( "pcap_m1"         "XZ" ignore("TW") )
                        filterOptions( "pcapi_m0"        "XZ" ignore("TW") )
                        filterOptions( "pcapi_m1"        "XZ" ignore("TW") )
                        filterOptions( "pcapim_m0"       "XZ" ignore("TW") )
                        filterOptions( "pcapim_m1"       "XZ" ignore("TW") )
                	filterOptions( "pjfet_m0"        "XZ" ignore("SUB") )
                	filterOptions( "pjfet_m1"        "XZ" ignore("SUB") )
                        filterOptions( "nfet_m0"         "XZC" ignore("B") )
                	filterOptions( "nfeti4_m0"          "XZC" ignore("B") )
                	filterOptions( "nfetihvt4_m0"       "XZC" ignore("B") )
                	filterOptions( "nfetim4_m0"         "XZC" ignore("B") )
                	filterOptions( "nfeti4_rf_m0"       "XZC" ignore("B") )
                	filterOptions( "pfeti4_m0"          "XZC" ignore("B") )
                	filterOptions( "pfetihvt4_m0"       "XZC" ignore("B") )
                	filterOptions( "pfetim4_m0"         "XZC" ignore("B") )
               		filterOptions( "pfeti4_rf_m0"       "XZC" ignore("B") )
                	filterOptions( "nfeti4_m1"          "XZC" ignore("B") )
                	filterOptions( "nfetihvt4_m1"       "XZC" ignore("B") )
                	filterOptions( "nfetim4_m1"         "XZC" ignore("B") )
                	filterOptions( "nfeti4_rf_m1"       "XZC" ignore("B") )
                	filterOptions( "pfeti4_m1"          "XZC" ignore("B") )
                	filterOptions( "pfetihvt4_m1"       "XZC" ignore("B") )
                	filterOptions( "pfetim4_m1"         "XZC" ignore("B") )
                	filterOptions( "pfeti4_rf_m1"       "XZC" ignore("B") )
                        filterOptions( "nfet_m1"         "XZC" ignore("B") )
                        filterOptions( "nfetx_m0"        "XZC" ignore("B") )
                        filterOptions( "nfetx_m1"        "XZC" ignore("B") )
                        filterOptions( "nfet_rf_m0"      "XZC" ignore("B") )
                        filterOptions( "nfet_rf_m1"      "XZC" ignore("B") )
	                filterOptions( "nfeti_m0"        "XZC" ignore("sx") )
	                filterOptions( "nfeti_m1"        "XZC" ignore("sx") )
	                filterOptions( "nfetix_m0"       "XZC" ignore("sx") )
	                filterOptions( "nfetix_m1"       "XZC" ignore("sx") )
	                filterOptions( "nfeti_rf_m0"     "XZC" ignore("sx") )
	                filterOptions( "nfeti_rf_m1"     "XZC" ignore("sx") )
                        filterOptions( "nfetm_m0"        "XZC" ignore("B") )
                        filterOptions( "nfetm_m1"        "XZC" ignore("B") )
                        filterOptions( "nfetmx_m0"       "XZC" ignore("B") )
                        filterOptions( "nfetmx_m1"       "XZC" ignore("B") )
			filterOptions( "nfetim_m0"       "XZC" ignore("sx") )
	                filterOptions( "nfetim_m1"       "XZC" ignore("sx") )
	                filterOptions( "nfetimx_m0"      "XZC" ignore("sx") )
	                filterOptions( "nfetimx_m1"      "XZC" ignore("sx") )
                        filterOptions( "nfethvt_m0"      "XZC" ignore("B") )
                        filterOptions( "nfethvt_m1"      "XZC" ignore("B") )
                        filterOptions( "nfethvtx_m0"     "XZC" ignore("B") )
                        filterOptions( "nfethvtx_m1"     "XZC" ignore("B") )
                	filterOptions( "nfetshvt_m0"     "XZC" ignore("B") )
                	filterOptions( "nfetshvt_m1"     "XZC" ignore("B") )
                	filterOptions( "nfetshvtx_m0"    "XZC" ignore("B") )
                	filterOptions( "nfetshvtx_m1"    "XZC" ignore("B") )
			filterOptions( "nfetihvt_m0"     "XZC" ignore("sx") )
                        filterOptions( "nfetihvt_m1"     "XZC" ignore("sx") )
                        filterOptions( "nfetihvtx_m0"    "XZC" ignore("sx") )
                        filterOptions( "nfetihvtx_m1"    "XZC" ignore("sx") )
                        filterOptions( "nfettw_m0"       "XZ"  ignore("B") )
                        filterOptions( "nfettw_m1"       "XZ"  ignore("B") )
                        filterOptions( "nfettwx_m0"      "XZ"  ignore("B") )
                        filterOptions( "nfettwx_m1"      "XZ"  ignore("B") )
                        filterOptions( "nfettw_rf_m0"    "XZ"  ignore("B") )
                        filterOptions( "nfettw_rf_m1"    "XZ"  ignore("B") )
                        filterOptions( "nfetmtw_m0"      "XZ"  ignore("B") )
                        filterOptions( "nfetmtw_m1"      "XZ"  ignore("B") )
                        filterOptions( "nfetmtwx_m0"     "XZ"  ignore("B") )
                        filterOptions( "nfetmtwx_m1"     "XZ"  ignore("B") )
                        filterOptions( "pfet_m0"         "XZC" ignore("B") )
                        filterOptions( "pfet_m1"         "XZC" ignore("B") )
                        filterOptions( "pfetx_m0"        "XZC" ignore("B") )
                        filterOptions( "pfetx_m1"        "XZC" ignore("B") )
                        filterOptions( "pfet_rf_m0"      "XZC" ignore("B") )
                        filterOptions( "pfet_rf_m1"      "XZC" ignore("B") )
                        filterOptions( "pfeti_m0"        "XZC" ignore("sx") )
	                filterOptions( "pfeti_m1"        "XZC" ignore("sx") )
	                filterOptions( "pfetix_m0"       "XZC" ignore("sx") )
	                filterOptions( "pfetix_m1"       "XZC" ignore("sx") )
	                filterOptions( "pfeti_rf_m0"     "XZC" ignore("sx") )
	                filterOptions( "pfeti_rf_m1"     "XZC" ignore("sx") )
                	filterOptions( "pfetihvt_m0"     "XZC" ignore("sx") )
                	filterOptions( "pfetihvt_m1"     "XZC" ignore("sx") )
                	filterOptions( "pfetihvtx_m0"    "XZC" ignore("sx") )
                	filterOptions( "pfetihvtx_m1"    "XZC" ignore("sx") )
                        filterOptions( "pfetm_m0"        "XZC" ignore("B") )
                        filterOptions( "pfetm_m1"        "XZC" ignore("B") )
                        filterOptions( "pfetmx_m0"       "XZC" ignore("B") )
                        filterOptions( "pfetmx_m1"       "XZC" ignore("B") )
                        filterOptions( "pfetim_m0"       "XZC" ignore("sx") )
                        filterOptions( "pfetim_m1"       "XZC" ignore("sx") )
                        filterOptions( "pfetimx_m0"      "XZC" ignore("sx") )
                        filterOptions( "pfetimx_m1"      "XZC" ignore("sx") )
                        filterOptions( "pfethvt_m0"      "XZC" ignore("B") )
                        filterOptions( "pfethvt_m1"      "XZC" ignore("B") )
                        filterOptions( "pfethvtx_m0"     "XZC" ignore("B") )
                        filterOptions( "pfethvtx_m1"     "XZC" ignore("B") )
                	filterOptions( "pfetshvt_m0"     "XZC" ignore("B") )
                	filterOptions( "pfetshvt_m1"     "XZC" ignore("B") )
                	filterOptions( "pfetshvtx_m0"    "XZC" ignore("B") )
                	filterOptions( "pfetshvtx_m1"    "XZC" ignore("B") )

                        filterOptions( "nfet33_m0"       "XZC" ignore("B") )
                        filterOptions( "nfet33_m1"       "XZC" ignore("B") )
                        filterOptions( "nfet33x_m0"      "XZC" ignore("B") )
                        filterOptions( "nfet33x_m1"      "XZC" ignore("B") )
                        filterOptions( "pfet33_m0"       "XZC" ignore("B") )
                        filterOptions( "pfet33_m1"       "XZC" ignore("B") )
                        filterOptions( "pfet33x_m0"      "XZC" ignore("B") )
                        filterOptions( "pfet33x_m1"      "XZC" ignore("B") )
                        filterOptions( "nfet33twx_m0"    "XZ"  ignore("B") )
                        filterOptions( "nfet33twx_m1"    "XZ"  ignore("B") )

                        filterOptions( "vncap_m0"        "XZ" ignore("SUB") )
                        filterOptions( "vncap_m1"        "XZ" ignore("SUB") )
                        filterOptions( "vncapx_m0"       "XZ" ignore("SUB") )
                        filterOptions( "vncapx_m1"       "XZ" ignore("SUB") )
                        filterOptions( "vncap_hv_m0"     "XZ" ignore("SUB") )
                        filterOptions( "vncap_hv_m1"     "XZ" ignore("SUB") )
			filterOptions( "vncap_hvx_m0"    "XZ" ignore("SUB") )
                        filterOptions( "vncap_hvx_m1"    "XZ" ignore("SUB") )
                        filterOptions( "zvtfet_m0"       "XZC" ignore("B") )
                        filterOptions( "zvtfet_m1"       "XZC" ignore("B") )
                        filterOptions( "zvtfetx_m0"      "XZC" ignore("B") )
                        filterOptions( "zvtfetx_m1"      "XZC" ignore("B") )
                        filterOptions( "zvtfet33_m0"     "XZC" ignore("B") )
                        filterOptions( "zvtfet33_m1"     "XZC" ignore("B") )
                        filterOptions( "zvtfet33x_m0"    "XZC" ignore("B") )
                        filterOptions( "zvtfet33x_m1"    "XZC" ignore("B") )
                        filterOptions( "esdndpi_m0"      "XZ")
                        filterOptions( "esdndpi_m1"      "XZ")
                        filterOptions( "esdndidn_m0"     "XZ" ignore("dn") )
                        filterOptions( "esdndidn_m1"     "XZ" ignore("dn") )
                        filterOptions( "esdpnpi_m0"      "XZ")
                        filterOptions( "esdpnpi_m1"      "XZ")
                        filterOptions( "esdpdidn_m0"     "XZ")
                        filterOptions( "esdpdidn_m1"     "XZ")
            )

   layout(
                        swapPins( "bondpad" 		"(f in gp sub)" )
                        swapPins( "bondpadx" 		"(f in gp sub)" )
			swapPins( "devicepad"           "(f pad)" )
                        swapPins( "cmim" 		"(f S D G)" )
                        swapPins( "cmimx" 		"(f S D G)" )
                        swapPins( "cmimhd" 		"(f S D G)" )
                        swapPins( "cmimhdx" 		"(f S D G)" )
                        swapPins( "corrPoint" 		nil )
                        swapPins( "coupledwires" 	"(f (p va1 vb1) (p va2 vb2) vshield)" )
                        swapPins( "diffmosvar"  	"(f (p GA GB) D B)" )
                        swapPins( "diffmosvarx" 	"(f (p GA GB) D B)" )
                	swapPins( "diodenx" 		"(f MINUS PLUS)" )
                	swapPins( "diodenwx" 		"(f MINUS PLUS)" )
                        swapPins( "diodepisx" 		"(f PLUS MINUS)" )
                        swapPins( "diodednsx" 		"(f PLUS MINUS)" )
                        swapPins( "diodedpdn" 		"(f PLUS MINUS)" )
                        swapPins( "diodepnw" 		"(f PLUS MINUS)" )
                        swapPins( "diodepwpi" 		"(f PLUS MINUS)" )
                        swapPins( "dipdnw" 		"(f SUB PLUS)" )
			swapPins( "dindpw"      	"(f dn pw nd sx)" )
                        swapPins( "divpnp" 		"(f SUB NW PLUS)" )
                        swapPins( "dualcmim" 		"(f S D G)" )
                        swapPins( "dualcmimx" 		"(f S D G)" )
                        swapPins( "dualcmimhd" 		"(f S D G)" )
                        swapPins( "dualcmimhdx" 	"(f S D G)" )
                        swapPins( "efuse" 		"(f in out)" )
                        swapPins( "esdndsx" 		"(f nd sx)" )
                        swapPins( "esdvpnpnw" 		"(f pd nw sx)" )
                        swapPins( "esdndpi" 		"(f pw nd)")
                        swapPins( "esdndidn" 		"(f pw nd dn)")
                        swapPins( "esdpnpi" 		"(f pd nw)")
                        swapPins( "esdpdidn" 		"(f pd nw)")
			swapPins( "esdfdi25" 		"(f a c s)" )
                        swapPins( "esdfdi50" 		"(f a c s)" )
                        swapPins( "esdtdi20" 		"(f a c s)" )
                        swapPins( "esdtdi25" 		"(f a c s)" )
                        ;swapPins( "esdtdi50" 		"(f a c)" )
                        swapPins( "havar" 		"(f A C BULK)" )
                        swapPins( "havarx" 		"(f A C BULK)" )
                        swapPins( "ind" 		"(f out in BULK)" )
                        swapPins( "indx" 		"(f out in BULK)" )
                        swapPins( "inds" 		"(f out in BULK)" )
                        swapPins( "indsx" 		"(f out in BULK)" )
                        swapPins( "indp" 		"(f out in BULK)" )
                        swapPins( "indpx" 		"(f out in BULK)" )
                        swapPins( "indline" 		"(f (p in out) BULK)" )
                        swapPins( "indlinex" 		"(f (p in out) BULK)" )
                        swapPins( "k1res" 		"(f (p D S) G)" )
                        swapPins( "k1resx" 		"(f (p D S) G)" )
                        swapPins( "lpnp" 		"(f C B E BULK)" )
                        swapPins( "lpnpx" 		"(f C B E BULK)" )
                        swapPins( "lvsres" 		"(p PLUS MINUS)" )
                        swapPins( "mimhk" 		"(f S D G)")
                        swapPins( "mimhkx" 		"(f S D G)")
                        swapPins( "mosvart" 		"(f G D B)" )
                        swapPins( "mosvartx" 		"(f G D B)" )
                        swapPins( "mosvarm" 		"(f G D B)" )
                        swapPins( "mosvarmx" 		"(f G D B)" )

                	swapPins( "pjfet"         	"(f (p D S) G SUB)" )

                        swapPins( "nfet" 		"(f (p D S) G B)" )
                        swapPins( "nfetx" 		"(f (p D S) G B)" )
                        swapPins( "nfet_rf" 		"(f (p D S) G B)" )
                        swapPins( "nfetm" 		"(f (p D S) G B )" )
                        swapPins( "nfetmx" 		"(f (p D S) G B )" )
                        swapPins( "nfetmtw" 		"(f (p D S) G B)" )
                        swapPins( "nfetmtwx" 		"(f (p D S) G B)" )
                        swapPins( "nfettw" 		"(f (p D S) G B)" )
                        swapPins( "nfettwx" 		"(f (p D S) G B)" )
                        swapPins( "nfettw_rf" 		"(f (p D S) G B)" )
                        swapPins( "nfethvt" 		"(f (p D S) G B)" )
                        swapPins( "nfethvtx" 		"(f (p D S) G B)" )
                        swapPins( "nfetshvt" 		"(f (p D S) G B)" )
                        swapPins( "nfetshvtx" 		"(f (p D S) G B)" )

			swapPins( "nfeti4" 		"(f (p D S) G B)" )
                	swapPins( "nfetihvt4"    	"(f (p D S) G B)" )
	                swapPins( "nfeti4_rf" 		"(f (p D S) G B)" )
	                swapPins( "nfetim4" 		"(f (p D S) G B)" )
			swapPins( "nfeti" 		"(f (p D S) G B DN sx)" )
			swapPins( "nfetihvt" 		"(f (p D S) G B DN sx)" )
			swapPins( "nfetim" 		"(f (p D S) G B DN sx)" )
			swapPins( "nfeti_rf" 		"(f (p D S) G B DN sx)" )
                        swapPins( "nfet20hs" 		"(f (p D S) G B)" )
                        swapPins( "nfet50hs" 		"(f (p D S) G B)" )
                        swapPins( "nfet20mh" 		"(f D S G B    )" )
                        swapPins( "nfeti20h" 		"(f D S G B SUB)" )
                        swapPins( "nfeti20t" 		"(f D S G B SUB)" )
                        swapPins( "nfeti25m" 		"(f D S G B SUB)" )
                        swapPins( "nfeti50h" 		"(f D S G B SUB)" )
                        swapPins( "nfeti50m" 		"(f D S G B SUB)" )
                        swapPins( "nfeti50t" 		"(f D S G B SUB)" )

                        swapPins( "nfet25" 		"(f (p D S) G B )" )
                        swapPins( "nfet25x" 		"(f (p D S) G B)" )
                        swapPins( "nfet25_rf" 		"(f D S G B)" )
                        swapPins( "nfet25tw_rf" 		"(f D S G B PI sx)" )
                        swapPins( "nfet25twx" 		"(f (p D S) G B PI sx)" )
                        swapPins( "nfet33" 		"(f (p D S) G B )" )
                        swapPins( "nfet33x" 		"(f (p D S) G B)" )
                        swapPins( "nfet33_rf" 		"(f D S G B)" )
                        swapPins( "nfet33twx" 		"(f (p D S) G B PI sx)" )
                        swapPins( "nfet33tw_rf" 	"(f D S G B PI sx)" )

                        swapPins( "npn1" 		"(f C B E BULK)" )
                        swapPins( "npn1x" 		"(f C B E BULK)" )
                        swapPins( "npn2" 		"(f C B E BULK)" )
                        swapPins( "npn2x" 		"(f C B E BULK)" )
                        swapPins( "nwppcres" 		"(f (p D S) G )" )
                        swapPins( "nwppcresx" 		"(f (p D S) G )" )
                        swapPins( "nwppcresxx" 		"(f (p D S) G )" )
                        swapPins( "nwrppres" 		"(f (p D S) G )" )
                        swapPins( "nwrppresx" 		"(f (p D S) G)" )
                        swapPins( "nwrppresxx" 		"(f (p D S) G )" )
                        swapPins( "nwrrpres" 		"(f (p D S) G )" )
                        swapPins( "nwrrpresx" 		"(f (p D S) G )" )
                        swapPins( "nwrrpresxx" 		"(f (p D S) G )" )
                        swapPins( "opndres" 		"(f (p D S) G)" )
                        swapPins( "opndresx" 		"(f (p D S) G)" )
                        swapPins( "oppdres" 		"(f (p D S) G )" )
                        swapPins( "oppdresx" 		"(f (p D S) G )" )
                        swapPins( "opndires" 		"(f (p D S) G DN sx)" )
                        swapPins( "opndiresx" 		"(f (p D S) G DN sx)" )
                        swapPins( "opndres3" 		"(f (p D S) G)" )
                        swapPins( "oppdires" 		"(f (p D S) G sx)" )
                        swapPins( "oppdiresx" 		"(f (p D S) G sx)" )
                        swapPins( "oppdres3" 		"(f (p D S) G)" )
                        swapPins( "opnpcres" 		"(f (p D S) G)" )
                        swapPins( "opnpcresx" 		"(f (p D S) G)" )
                        swapPins( "opppcres" 		"(f (p D S) G)" )
                        swapPins( "opppcresx" 		"(f (p D S) G)" )
                        swapPins( "oprppres" 		"(f (p D S) G)" )
                        swapPins( "oprppresx" 		"(f (p D S) G)" )
                        swapPins( "oprrpres" 		"(f (p D S) G)" )
                        swapPins( "oprrpresx" 		"(f (p D S) G)" )
                        swapPins( "hvnwres" 		"(f (p D S) B)" )
                        swapPins( "hvpwres" 		"(f (p D S) B)" )

                        swapPins( "pcap" 		"(f G D TW )" )
                        swapPins( "pcapi" 		"(f G D TW )" )
                        swapPins( "pcapim" 		"(f G D TW )" )
                        swapPins( "pcapc" 		"(p PLUS MINUS)" )
                        swapPins( "pcdcap" 		"(f D G B)" )
                        swapPins( "pcdcapx" 		"(f D G B)" )
                        swapPins( "pcdcapm" 		"(f G D B)" )
                        swapPins( "pcdcapmx" 		"(f G D B)" )
                        swapPins( "pcdcapt" 		"(f G D B)" )
                        swapPins( "pcdcaptx" 		"(f G D B)" )
                        swapPins( "pcdcap33" 		"(f D G B)" )
                        swapPins( "pcdcap33x" 		"(f D G B)" )

                        swapPins( "pfet" 		"(f (p D S) G B )" )
                        swapPins( "pfetx" 		"(f (p D S) G B)" )
                        swapPins( "pfet_rf" 		"(f (p D S) G B)" )
                        swapPins( "pfetm" 		"(f (p D S) G B)" )
                        swapPins( "pfetmx" 		"(f (p D S) G B)" )
                        swapPins( "pfethvt" 		"(f (p D S) G B)" )
                        swapPins( "pfethvtx" 		"(f (p D S) G B)" )
                        swapPins( "pfetshvt" 		"(f (p D S) G B)" )
                        swapPins( "pfetshvtx" 		"(f (p D S) G B)" )

			swapPins( "pfeti4" 		"(f (p D S) G B)" )
			swapPins( "pfetihvt4" 		"(f (p D S) G B)" )
	                swapPins( "pfetim4" 		"(f (p D S) G B)" )
	                swapPins( "pfeti4_rf" 		"(f (p D S) G B)" )
	                swapPins( "pfeti" 		"(f (p D S) G B sx)" )
	                swapPins( "pfetihvt" 		"(f (p D S) G B sx)" )
	                swapPins( "pfetim" 		"(f (p D S) G B sx)" )
	                swapPins( "pfeti_rf" 		"(f (p D S) G B sx)" )

                        swapPins( "pfet20hs" 		"(f (p D S) G B SUB)" )
                        swapPins( "pfet50hs" 		"(f (p D S) G B SUB)" )
                        swapPins( "pfet20h" 		"(f D S G B SUB)" )
                        swapPins( "pfet20t" 		"(f D S G B SUB)" )
                        swapPins( "pfet25m" 		"(f D S G B SUB)" )
                        swapPins( "pfet50h" 		"(f D S G B SUB)" )
                        swapPins( "pfet50m" 		"(f D S G B SUB)" )
                        swapPins( "pfet50t" 		"(f D S G B SUB)" )

                        swapPins( "pfet25" 		"(f (p D S) G B)" )
                        swapPins( "pfet25x" 		"(f (p D S) G B)" )
                        swapPins( "pfet25_rf" 		"(f D S G B)" )
                        swapPins( "pfet33" 		"(f (p D S) G B)" )
                        swapPins( "pfet33x" 		"(f (p D S) G B)" )
                        swapPins( "pfet33_rf" 		"(f D S G B)" )

                        swapPins( "sbd" 		"(f A C BULK)" )
                        swapPins( "sbdx" 		"(f A C)" )
                        swapPins( "sbdi" 		"(f A C BULK)" )
                        swapPins( "sbdix" 		"(f A C)" )
                        swapPins( "sblkndres" 		"(f (p D S) G)" )
                        swapPins( "sblkndresx" 		"(f (p D S) G)" )
                        swapPins( "sblkndires" 		"(f (p D S) G DN sx)" )
                        swapPins( "sblkndiresx" 	"(f (p D S) G DN sx)" )
                        swapPins( "sblkndres3"  	"(f (p D S) G)" )
                        swapPins( "sblkpdres" 		"(f (p D S) G)" )
                        swapPins( "sblkpdresx" 		"(f (p D S) G)" )
                        swapPins( "sblkpdresxx" 	"(f (p D S) G B)" )
                        swapPins( "sblkpdires" 		"(f (p D S) G sx)" )
                        swapPins( "sblkpdiresx" 	"(f (p D S) G sx)" )
                        swapPins( "sblkpdres3"  	"(f (p D S) G)" )
                        swapPins( "singlewire" 		"(f (p va vb) vshield)" )
                        swapPins( "subc" 		"(f SUBCON sub)" )
                        swapPins( "subcx" 		"(f SUBCON sub)" )
                        swapPins( "symind" 		"(f (p outpr outse) ct BULK)" )
                        swapPins( "symindx" 		"(f (p outpr outse) ct BULK)" )
                        swapPins( "symindp" 		"(f (p outpr outse) ct BULK)" )
                        swapPins( "symindpx" 		"(f (p outpr outse) ct BULK)" )
                        swapPins( "tdndsx" 		"(f MINUS PLUS)" )
                        swapPins( "tdpdnw" 		"(f PLUS MINUS)" )
			swapPins( "tdndpw" 		"(f PLUS MINUS)" )
			swapPins( "wdnwsx" 		"(f MINUS PLUS)" )
			swapPins( "wddnsx" 		"(f PLUS MINUS)" )
                        swapPins( "wdpwdn" 		"(f PLUS MINUS)" )
                        swapPins( "var" 		"(f A C BULK)" )
                        swapPins( "varx" 		"(f A C BULK)" )
                        swapPins( "vncap"       	"(f (p IN OUT) SUB)" )
                        swapPins( "vncapx"      	"(f (p IN OUT) SUB)" )
			swapPins( "vncap_hv"       	"(f (p IN OUT) SUB)" )
                        swapPins( "vncap_hvx"      	"(f (p IN OUT) SUB)" )
                        swapPins( "zvtnfet" 		"(f (p D S) G B)" )
                        swapPins( "zvtnfetx" 		"(f (p D S) G B)" )
                        swapPins( "zvtnfet33" 		"(f (p D S) G B)" )
                        swapPins( "zvtnfet33x" 		"(f (p D S) G B)" )

                        swapPins( "vnpn" 		"(f C B E SUB)" )
                        swapPins( "vpnp" 		"(f C B E)" )

                        filterDevice( "pdiode" )
                        filterDevice( "pcapacitor" )
                        filterDevice( "presistor" short( "PLUS" "MINUS" ) )
			filterDevice( "pinductor" short( "PLUS" "MINUS" ) )
                        filterDevice( "diodepnw" )
                        filterDevice( "diodenx" )
                        filterDevice( "diodenwx" )
                        filterDevice( "diodendpw" )
			filterDevice( "diodednsx" )
                        filterDevice( "diodedpdn" )
                        filterDevice( "diodepwdn" )
                        filterDevice( "diodepwpi" )
                        filterDevice( "diodepisx" )

                  ;  if( !avSwitch("LVS_TW_DIODES")  then
                  ;      filterDevice("diodednsx")
                  ;      filterDevice("diodedpdn")
                  ;      filterDevice("diodepisx")
                  ;      filterDevice("diodepwpi")
                  ;    )

	     if( avSwitch( "ignore_metal_capacitance_3rd_terminal" ) then
                    deleteCellPin("cmim" 	"G")
                    deleteCellPin("dualcmim" 	"G")
                    deleteCellPin("cmimhd" 	"G")
                    deleteCellPin("dualcmimhd" 	"G")
                    deleteCellPin("vncap"  	"SUB")
                    deleteCellPin("vncap_hv" 	"SUB")
		) ; end switch ignore_metal_capacitance_3rd_terminal

                        setGround( all "gnd!" "gnd" "gnd:" "GND:" "GND" "GND!")
                        setPower( all "vdd!" "vdd" "vdd:" "VDD:" "VDD" "VDD!")

                      ;; Filter Devices

			filterOptions( "dindpw_m0"       "XZ")
                        filterOptions( "dindpw_m1"       "XZ")
                        filterOptions( "coupledwires_m0" "XZ" ignore("vshield") )
                        filterOptions( "COUPLEDWIRES_m0" "XZ" ignore("vshield") )
                        filterOptions( "dualcmim_m0"     "XZ" ignore("G") )
                        filterOptions( "dualcmim_m1"     "XZ" ignore("G") )
                        filterOptions( "dualcmimx_m0"    "XZ" ignore("G") )
                        filterOptions( "dualcmimx_m1"    "XZ" ignore("G") )
                        filterOptions( "cmim_m0"         "XZ" ignore("G") )
                        filterOptions( "cmim_m1"         "XZ" ignore("G") )
                        filterOptions( "cmimx_m0"        "XZ" ignore("G") )
                        filterOptions( "cmimx_m1"        "XZ" ignore("G") )
                        filterOptions( "dualcmimhd_m0"   "XZ" ignore("G") )
                        filterOptions( "dualcmimhd_m1"   "XZ" ignore("G") )
                        filterOptions( "dualcmimhdx_m0"  "XZ" ignore("G") )
                        filterOptions( "dualcmimhdx_m1"  "XZ" ignore("G") )
                        filterOptions( "cmimhd_m0"       "XZ" ignore("G") )
                        filterOptions( "cmimhd_m1"       "XZ" ignore("G") )
                        filterOptions( "cmimhdx_m0"      "XZ" ignore("G") )
                        filterOptions( "cmimhdx_m1"      "XZ" ignore("G") )
                        filterOptions( "mimhk_m0"        "XZ" ignore("G"))
                        filterOptions( "mimhk_m1"        "XZ" ignore("G"))
                        filterOptions( "mimhkx_m0"       "XZ" ignore("G"))
                        filterOptions( "mimhkx_m1"       "XZ" ignore("G"))
                        filterOptions( "opndres_m0"      "XZ" ignore("G") )
                        filterOptions( "opndres_m1"      "XZ" ignore("G") )
                        filterOptions( "opndresx_m0"     "XZ" ignore("G") )
                        filterOptions( "opndresx_m1"     "XZ" ignore("G") )
                        filterOptions( "oppdres_m0"      "XZ" ignore("G") )
                        filterOptions( "oppdres_m1"      "XZ" ignore("G") )
                        filterOptions( "oppdresx_m0"     "XZ" ignore("G") )
                        filterOptions( "oppdresx_m1"     "XZ" ignore("G") )
                        filterOptions( "opndires_m0"     "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndires_m1"     "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndiresx_m0"    "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndiresx_m1"    "XZ" ignore("G" "DN" "sx") )
                        filterOptions( "opndres3_m0"     "XZ" ignore("G") )
                        filterOptions( "opndres3_m1"     "XZ" ignore("G") )
                        filterOptions( "oppdires_m0"     "XZ" ignore("G" "sx") )
                        filterOptions( "oppdires_m1"     "XZ" ignore("G" "sx") )
                        filterOptions( "oppdiresx_m0"    "XZ" ignore("G" "sx") )
                        filterOptions( "oppdiresx_m1"    "XZ" ignore("G" "sx") )
                        filterOptions( "oppdres3_m0"     "XZ" ignore("G") )
                        filterOptions( "oppdres3_m1"     "XZ" ignore("G") )
                        filterOptions( "opnpcres_m0"     "XZ" ignore("G") )
                        filterOptions( "opnpcres_m1"     "XZ" ignore("G") )
                        filterOptions( "opnpcresx_m0"    "XZ" ignore("G") )
                        filterOptions( "opnpcresx_m1"    "XZ" ignore("G") )
                        filterOptions( "opppcres_m0"     "XZ" ignore("G") )
                        filterOptions( "opppcres_m1"     "XZ" ignore("G") )
                        filterOptions( "opppcresx_m0"    "XZ" ignore("G") )
                        filterOptions( "opppcresx_m1"    "XZ" ignore("G") )
                        filterOptions( "k1res_m0"        "XZ" ignore("G") )
                        filterOptions( "k1res_m1"        "XZ" ignore("G") )
                        filterOptions( "k1resx_m0"       "XZ" ignore("G") )
                        filterOptions( "k1resx_m1"       "XZ" ignore("G") )
                        filterOptions( "oprrpres_m0"     "XZ" ignore("G") )
                        filterOptions( "oprrpres_m1"     "XZ" ignore("G") )
                        filterOptions( "oprrpresx_m0"    "XZ" ignore("G") )
                        filterOptions( "oprrpresx_m1"    "XZ" ignore("G") )
                        filterOptions( "oprppres_m0"     "XZ" ignore("G") )
                        filterOptions( "oprppres_m1"     "XZ" ignore("G") )
                        filterOptions( "oprppresx_m0"    "XZ" ignore("G") )
                        filterOptions( "oprppresx_m1"    "XZ" ignore("G") )
                        filterOptions( "vncapx_m0"       "XZ" ignore("SUB") )
                        filterOptions( "vncapx_m1"       "XZ" ignore("SUB") )
			filterOptions( "vncap_hvx_m0"    "XZ" ignore("SUB") )
                        filterOptions( "vncap_hvx_m1"    "XZ" ignore("SUB") )
                        filterOptions( "vncap_m0"        "XZ" ignore("SUB") )
                        filterOptions( "vncap_m1"        "XZ" ignore("SUB") )
			filterOptions( "vncap_hv_m0"     "XZ" ignore("SUB") )
                        filterOptions( "vncap_hv_m1"     "XZ" ignore("SUB") )
                        filterOptions( "ind_m0"          "XZ" ignore("BULK") )
                        filterOptions( "ind_m1"          "XZ" ignore("BULK") )
                        filterOptions( "indx_m0"         "XZ" ignore("BULK") )
                        filterOptions( "indx_m1"         "XZ" ignore("BULK") )
                        filterOptions( "singlewire_m0"   "XZ" ignore("vshield") )
                        filterOptions( "SINGLEDWIRE_m0"  "XZ" ignore("vshield") )
                        filterOptions( "symind_m0"       "XZ" ignore("BULK") )
                        filterOptions( "symind_m1"       "XZ" ignore("BULK") )
                        filterOptions( "symindx_m0"      "XZ" ignore("BULK") )
                        filterOptions( "symindx_m1"      "XZ" ignore("BULK") )
                        filterOptions( "symindp_m0"      "XZ" ignore("BULK") )
                        filterOptions( "symindp_m1"      "XZ" ignore("BULK") )
                        filterOptions( "symindpx_m0"     "XZ" ignore("BULK") )
                        filterOptions( "symindpx_m1"     "XZ" ignore("BULK") )
                        filterOptions( "indline_m0"      "XZ" ignore("BULK") )
                        filterOptions( "indline_m1"      "XZ" ignore("BULK") )
                        filterOptions( "indlinex_m0"     "XZ" ignore("BULK") )
                        filterOptions( "indlinex_m1"     "XZ" ignore("BULK") )
                        filterOptions( "inds_m0"         "XZ" ignore("BULK") )
                        filterOptions( "inds_m1"         "XZ" ignore("BULK") )
                        filterOptions( "indsx_m0"        "XZ" ignore("BULK") )
                        filterOptions( "indsx_m1"        "XZ" ignore("BULK") )
                        filterOptions( "indp_m0"         "XZ" ignore("BULK") )
                        filterOptions( "indp_m1"         "XZ" ignore("BULK") )
                        filterOptions( "indpx_m0"        "XZ" ignore("BULK") )
                        filterOptions( "indpx_m1"        "XZ" ignore("BULK") )
                        filterOptions( "havar_m0"        "XZ" ignore("BULK") )
                        filterOptions( "havar_m1"        "XZ" ignore("BULK") )
                        filterOptions( "havarx_m0"       "XZ" ignore("BULK") )
                        filterOptions( "havarx_m1"       "XZ" ignore("BULK") )
                        filterOptions( "mosvart_m0"      "XZ" ignore("B") )
                        filterOptions( "mosvart_m1"      "XZ" ignore("B") )
                        filterOptions( "mosvartx_m0"     "XZ" ignore("B") )
                        filterOptions( "mosvartx_m1"     "XZ" ignore("B") )
                        filterOptions( "mosvarm_m0"      "XZ" ignore("B") )
                        filterOptions( "mosvarm_m1"      "XZ" ignore("B") )
                        filterOptions( "mosvarmx_m0"     "XZ" ignore("B") )
                        filterOptions( "mosvarmx_m1"     "XZ" ignore("B") )
                        filterOptions( "diffmosvar_m0"   "XZ" ignore("B") )
                        filterOptions( "diffmosvar_m1"   "XZ" ignore("B") )
                        filterOptions( "diffmosvarx_m0"  "XZ" ignore("B") )
                        filterOptions( "diffmosvarx_m1"  "XZ" ignore("B") )
                        filterOptions( "pcap_m0"         "XZ" ignore("TW") )
                        filterOptions( "pcap_m1"         "XZ" ignore("TW") )
                        filterOptions( "pcapi_m0"        "XZ" ignore("TW") )
                        filterOptions( "pcapi_m1"        "XZ" ignore("TW") )
                        filterOptions( "pcapim_m0"       "XZ" ignore("TW") )
                        filterOptions( "pcapim_m1"       "XZ" ignore("TW") )
                        filterOptions( "pjfet_m0"        "XZ" ignore("SUB") )
                        filterOptions( "pjfet_m1"        "XZ" ignore("SUB") )
                	filterOptions( "nfeti4_m0"          "XZC" ignore("B") )
                	filterOptions( "nfetihvt4_m0"       "XZC" ignore("B") )
                	filterOptions( "nfetim4_m0"         "XZC" ignore("B") )
                	filterOptions( "nfeti4_rf_m0"       "XZC" ignore("B") )
                	filterOptions( "pfeti4_m0"          "XZC" ignore("B") )
                	filterOptions( "pfetihvt4_m0"       "XZC" ignore("B") )
                	filterOptions( "pfetim4_m0"         "XZC" ignore("B") )
                	filterOptions( "pfeti4_rf_m0"       "XZC" ignore("B") )
                	filterOptions( "nfeti4_m1"          "XZC" ignore("B") )
                	filterOptions( "nfetihvt4_m1"       "XZC" ignore("B") )
                	filterOptions( "nfetim4_m1"         "XZC" ignore("B") )
                	filterOptions( "nfeti4_rf_m1"       "XZC" ignore("B") )
                	filterOptions( "pfeti4_m1"          "XZC" ignore("B") )
                	filterOptions( "pfetihvt4_m1"       "XZC" ignore("B") )
                	filterOptions( "pfetim4_m1"         "XZC" ignore("B") )
                	filterOptions( "pfeti4_rf_m1"       "XZC" ignore("B") )

                        filterOptions( "nfet_m0"         "XZC" ignore("B") )
                        filterOptions( "nfet_m1"         "XZC" ignore("B") )
                        filterOptions( "nfetx_m0"        "XZC" ignore("B") )
                        filterOptions( "nfetx_m1"        "XZC" ignore("B") )
                        filterOptions( "nfet_rf_m0"      "XZC" ignore("B") )
                        filterOptions( "nfet_rf_m1"      "XZC" ignore("B") )
			filterOptions( "nfeti_m0"        "XZC" ignore("sx") )
	                filterOptions( "nfeti_m1"        "XZC" ignore("sx") )
			filterOptions( "nfetix_m0"       "XZC" ignore("sx") )
	                filterOptions( "nfetix_m1"       "XZC" ignore("sx") )
			filterOptions( "nfetihvt_m0"     "XZC" ignore("sx") )
	                filterOptions( "nfetihvt_m1"     "XZC" ignore("sx") )
			filterOptions( "nfetihvtx_m0"    "XZC" ignore("sx") )
	                filterOptions( "nfetihvtx_m1"    "XZC" ignore("sx") )
	                filterOptions( "nfeti_rf_m0"     "XZC" ignore("sx") )
	                filterOptions( "nfeti_rf_m1"     "XZC" ignore("sx") )
                        filterOptions( "nfetm_m0"        "XZC" ignore("B") )
                        filterOptions( "nfetm_m1"        "XZC" ignore("B") )
                        filterOptions( "nfetmx_m0"       "XZC" ignore("B") )
                        filterOptions( "nfetmx_m1"       "XZC" ignore("B") )
			filterOptions( "nfetim_m0"       "XZC" ignore("sx") )
	                filterOptions( "nfetim_m1"       "XZC" ignore("sx") )
			filterOptions( "nfetimx_m0"      "XZC" ignore("sx") )
	                filterOptions( "nfetimx_m1"      "XZC" ignore("sx") )
                        filterOptions( "nfettw_m0"       "XZ" ignore("B") )
                        filterOptions( "nfettw_m1"       "XZ" ignore("B") )
                        filterOptions( "nfettwx_m0"      "XZ" ignore("B") )
                        filterOptions( "nfettwx_m1"      "XZ" ignore("B") )
                        filterOptions( "nfettw_rf_m0"    "XZ" ignore("B") )
                        filterOptions( "nfettw_rf_m1"    "XZ" ignore("B") )
                        filterOptions( "nfetmtw_m0"      "XZ" ignore("B") )
                        filterOptions( "nfetmtw_m1"      "XZ" ignore("B") )
                        filterOptions( "nfetmtwx_m0"     "XZ" ignore("B") )
                        filterOptions( "nfetmtwx_m1"     "XZ" ignore("B") )
                        filterOptions( "nfethvt_m0"      "XZC" ignore("B") )
                        filterOptions( "nfethvt_m1"      "XZC" ignore("B") )
                        filterOptions( "nfethvtx_m0"     "XZC" ignore("B") )
                        filterOptions( "nfethvtx_m1"     "XZC" ignore("B") )
                        filterOptions( "nfetshvt_m0"     "XZC" ignore("B") )
                        filterOptions( "nfetshvt_m1"     "XZC" ignore("B") )
                        filterOptions( "nfetshvtx_m0"    "XZC" ignore("B") )
                        filterOptions( "nfetshvtx_m1"    "XZC" ignore("B") )

                        filterOptions( "pfet_m0"         "XZC" ignore("B") )
                        filterOptions( "pfet_m1"         "XZC" ignore("B") )
                        filterOptions( "pfetx_m0"        "XZC" ignore("B") )
                        filterOptions( "pfetx_m1"        "XZC" ignore("B") )
                        filterOptions( "pfet_rf_m0"      "XZC" ignore("B") )
                        filterOptions( "pfet_rf_m1"      "XZC" ignore("B") )
			filterOptions( "pfeti_m0"        "XZC" ignore("sx") )
	                filterOptions( "pfeti_m1"        "XZC" ignore("sx") )
			filterOptions( "pfetix_m0"       "XZC" ignore("sx") )
	                filterOptions( "pfetix_m1"       "XZC" ignore("sx") )
			filterOptions( "pfetihvt_m0"     "XZC" ignore("sx") )
	                filterOptions( "pfetihvt_m1"     "XZC" ignore("sx") )
			filterOptions( "pfetihvtx_m0"    "XZC" ignore("sx") )
	                filterOptions( "pfetihvtx_m1"    "XZC" ignore("sx") )
	                filterOptions( "pfeti_rf_m0"     "XZC" ignore("sx") )
	                filterOptions( "pfeti_rf_m1"     "XZC" ignore("sx") )
                        filterOptions( "pfetm_m0"        "XZC" ignore("B") )
                        filterOptions( "pfetm_m1"        "XZC" ignore("B") )
                        filterOptions( "pfetmx_m0"       "XZC" ignore("B") )
                        filterOptions( "pfetmx_m1"       "XZC" ignore("B") )
			filterOptions( "pfetim_m0"       "XZC" ignore("sx") )
	                filterOptions( "pfetim_m1"       "XZC" ignore("sx") )
			filterOptions( "pfetimx_m0"      "XZC" ignore("sx") )
	                filterOptions( "pfetimx_m1"      "XZC" ignore("sx") )
                        filterOptions( "pfethvt_m0"      "XZC" ignore("B") )
                        filterOptions( "pfethvt_m1"      "XZC" ignore("B") )
                        filterOptions( "pfethvtx_m0"     "XZC" ignore("B") )
                        filterOptions( "pfethvtx_m1"     "XZC" ignore("B") )
                	filterOptions( "pfetshvt_m0"     "XZC" ignore("B") )
                	filterOptions( "pfetshvt_m1"     "XZC" ignore("B") )
                	filterOptions( "pfetshvtx_m0"    "XZC" ignore("B") )
                	filterOptions( "pfetshvtx_m1"    "XZC" ignore("B") )

                        filterOptions( "nfet33_m0"       "XZC" ignore("B") )
                        filterOptions( "nfet33_m1"       "XZC" ignore("B") )
                        filterOptions( "nfet33x_m0"      "XZC" ignore("B") )
                        filterOptions( "nfet33x_m1"      "XZC" ignore("B") )
                        filterOptions( "pfet33_m0"       "XZC" ignore("B") )
                        filterOptions( "pfet33_m1"       "XZC" ignore("B") )
                        filterOptions( "pfet33x_m0"      "XZC" ignore("B") )
                        filterOptions( "pfet33x_m1"      "XZC" ignore("B") )
                        filterOptions( "nfet33twx_m0"    "XZ"  ignore("B") )
                        filterOptions( "nfet33twx_m1"    "XZ"  ignore("B") )

                        filterOptions( "zvtfet_m0"       "XZC" ignore("B") )
                        filterOptions( "zvtfet_m1"       "XZC" ignore("B") )
                        filterOptions( "zvtfetx_m0"      "XZC" ignore("B") )
                        filterOptions( "zvtfetx_m1"      "XZC" ignore("B") )
                        filterOptions( "zvtfet33_m0"     "XZC" ignore("B") )
                        filterOptions( "zvtfet33_m1"     "XZC" ignore("B") )
                        filterOptions( "zvtfet33x_m0"    "XZC" ignore("B") )
                        filterOptions( "zvtfet33x_m1"    "XZC" ignore("B") )
                        filterOptions( "esdndpi_m0"      "XZ")
                        filterOptions( "esdndpi_m1"      "XZ")
                        filterOptions( "esdndidn_m0"     "XZ" ignore("dn") )
                        filterOptions( "esdndidn_m1"     "XZ" ignore("dn") )
                        filterOptions( "esdpnpi_m0"      "XZ")
                        filterOptions( "esdpnpi_m1"      "XZ")
                        filterOptions( "esdpdidn_m0"     "XZ")
                        filterOptions( "esdpdidn_m1"     "XZ")
            )


;-----------------------------------------------------------
  nameBinding( (cell t) (pin t) )
  verifyTopSchPins( t )
  autoPinSwap( t )
  formGate(none)
  listXRef()
  filterReduceStatistics()
  listFilteredDevices()
  expandOnError( (reduce t) )

  ;----------------------------
  ; generic compare procedure |
  ;----------------------------

  procedure( genericcomp(procName layObj schObj paramInfoList)
    let( (paramInfo paramName compProc tolVal layParamVal schParamVal
          layMissingParams schMissingParams compMismatch errReport m1 m2)

      m1 = layObj
      m2 = schObj
                                                                                         ; #####LVSDEBUG
      ; if( LVSdebug then                                                                  ; #####LVSDEBUG
      ;   printf("in procedure %s:\n" procName)                                           ; #####LVSDEBUG
      ;   printf("layout    : ")                                                          ; #####LVSDEBUG
      ;   foreach( paramInfo paramInfoList                                                ; #####LVSDEBUG
      ;      paramName = car(paramInfo)                                                   ; #####LVSDEBUG
      ;      unless( evalstring(sprintf(nil "layObj->%s" paramName))                      ; #####LVSDEBUG
      ;         paramName=upperCase(paramName)                                            ; #####LVSDEBUG
      ;      )                                                                            ; #####LVSDEBUG
      ;      printf("%s: %L " paramName evalstring(sprintf(nil "layObj->%s" paramName)))  ; #####LVSDEBUG
      ;   )                                                                               ; #####LVSDEBUG
      ;   printf("\n")                                                                    ; #####LVSDEBUG
      ;   printf("schematic : ")                                                          ; #####LVSDEBUG
      ;   foreach( paramInfo paramInfoList                                                ; #####LVSDEBUG
      ;      paramName = car(paramInfo)                                                   ; #####LVSDEBUG
      ;      unless( evalstring(sprintf(nil "schObj->%s" paramName))                      ; #####LVSDEBUG
      ;         paramName=upperCase(paramName)                                            ; #####LVSDEBUG
      ;      )                                                                            ; #####LVSDEBUG
      ;      printf("%s: %L " paramName evalstring(sprintf(nil "schObj->%s" paramName)))  ; #####LVSDEBUG
      ;   )                                                                               ; #####LVSDEBUG
      ;   printf("\n\n")                                                                  ; #####LVSDEBUG
      ; )                                                                                  ; #####LVSDEBUG

      ;; loop through the parameters passed

      foreach(  paramInfo paramInfoList

         paramName = car(paramInfo)     ; parameter name
         compProc  = cadr(paramInfo)    ; name of the compare procedure to use (rel_comp or abs_comp)
         tolVal    = caddr(paramInfo)   ; tolerance
         defVal    = cadddr(paramInfo)  ; optional - default value for this parameter if it doesn't exist

         ;; get the value from the layout and schematic, assign value from lowercase first, if it doesn't exist assign uppercase

         layParamVal = getValCase(layObj paramName)
         schParamVal = getValCase(schObj paramName)

         ;; if a default value was passed, set the parameter equal to it if the value doesn't exist

         if( defVal then
            unless( layParamVal layParamVal = getVal(evalstring(sprintf(nil "layObj->%s=%s" paramName defVal))))
            unless( schParamVal schParamVal = getVal(evalstring(sprintf(nil "schObj->%s=%s" paramName defVal))))
         )

         ;; if it still doesn't exist, add it to the list of missing parameters

         unless(layParamVal layMissingParams = cons(paramName layMissingParams) )
         unless(schParamVal schMissingParams = cons(paramName schMissingParams) )

         ;; if the parameter has a value in both layout and shematic, compare them
         ;; using the passed procedure name.  If they don't match to the specified
         ;; tolerance, add the parameter to the mismatched parameter list

         if( layParamVal && schParamVal then
            if( evalstring(sprintf(nil "%s(layParamVal schParamVal %L)" compProc evalstring(tolVal)))
               compMismatch = cons(list(paramName layParamVal schParamVal) compMismatch)
            )
         )
      )

      ;; report any errors found

      errReport = compCheckForErrors(layMissingParams schMissingParams compMismatch procName)

    ) ; ** let **
  ) ; ** procedure genericcomp **

  ;----------------------------
  ; generic combine procedure |
  ;----------------------------

  procedure( genericcomb(procName obj1 obj2 paramInfoList)
    let( (paramInfo paramName compProc tolVal newValueProc obj1ParamVal obj2ParamVal
          combMissingParams combMismatch errReport haveErrors new_value m1 m2)

      m1 = obj1
      m2 = obj2
      new_value = ncons(nil)
                                                                                       ; #####LVSDEBUG
     ; if( LVSdebug then                                                                ; #####LVSDEBUG
     ;    printf("\nin procedure %s:\n" procName)                                       ; #####LVSDEBUG
     ;    printf("Device 1: ")                                                          ; #####LVSDEBUG
     ;    foreach( paramInfo paramInfoList                                              ; #####LVSDEBUG
     ;       paramName = car(paramInfo)                                                 ; #####LVSDEBUG
     ;       unless( evalstring(sprintf(nil "obj1->%s" paramName))                      ; #####LVSDEBUG
     ;          paramName=upperCase(paramName)                                          ; #####LVSDEBUG
     ;       )                                                                          ; #####LVSDEBUG
     ;       printf("%s: %L " paramName evalstring(sprintf(nil "obj1->%s" paramName)))  ; #####LVSDEBUG
     ;    )                                                                             ; #####LVSDEBUG
     ;    printf("\n")                                                                  ; #####LVSDEBUG
     ;    printf("Device 2: ")                                                          ; #####LVSDEBUG
     ;    foreach( paramInfo paramInfoList                                              ; #####LVSDEBUG
     ;       paramName = car(paramInfo)                                                 ; #####LVSDEBUG
     ;       unless( evalstring(sprintf(nil "obj2->%s" paramName))                      ; #####LVSDEBUG
     ;          paramName=upperCase(paramName)                                          ; #####LVSDEBUG
     ;       )                                                                          ; #####LVSDEBUG
     ;       printf("%s: %L " paramName evalstring(sprintf(nil "obj2->%s" paramName)))  ; #####LVSDEBUG
     ;    )                                                                             ; #####LVSDEBUG
     ;    printf("\n")                                                                  ; #####LVSDEBUG
     ; )                                                                                ; #####LVSDEBUG

      foreach(  paramInfo paramInfoList

         paramName  = car(paramInfo)
         compProc   = cadr(paramInfo)
         tolVal     = caddr(paramInfo)
         newValProc = cadddr(paramInfo)

         ;get parameter values for obj1 and obj2, look for lowercase first
         ;if lowercase doesn't exist, look for uppercase

         obj1ParamVal = getValCase(obj1 paramName)
         obj2ParamVal = getValCase(obj2 paramName)

         if( obj1ParamVal &&  obj2ParamVal then
            if( compProc != "X" then
               if( evalstring(sprintf(nil "%s(obj1ParamVal obj2ParamVal %L)" compProc evalstring(tolVal))) then
                  combMismatch = cons(list(paramName obj1ParamVal obj2ParamVal) combMismatch)
                  haveErrors = 1
               else
                  unless(haveErrors evalstring(sprintf(nil "new_value->%s = NV%s(obj1 obj2 obj1ParamVal obj2ParamVal)" paramName newValProc)))
               )
            else
               unless(haveErrors evalstring(sprintf(nil "new_value->%s = NV%s(obj1 obj2 obj1ParamVal obj2ParamVal)" paramName newValProc)))
            )
         else
            combMissingParams = cons(list(paramName obj1ParamVal obj2ParamVal) combMissingParams)
            haveErrors = 1
         )

      )
      errReport = combCheckForErrors(combMissingParams combMismatch procName)
      if( errReport then
         printf("instances not combined in %s due to the following problems:\n" procName)
         printf("%s" errReport)
         "doNotCombine"
      else
         printf("%s Resultant: %L\n" procName new_value)
         new_value
      )
    ) ; ** let **
  ) ; ** procedure genericcomb **


  ;-------------------------------------------------------
  ; procedures for formatting compare and combine errors |
  ;-------------------------------------------------------

  procedure(compCheckForErrors(layMissingParams schMissingParams compMismatch procName)
    let((errReport paramErr)
      errReport = ""
      if(layMissingParams then
         errReport = strcat(errReport sprintf(nil "%s is missing layout parameter(s): " procName))
         foreach(  paramErr layMissingParams
            errReport =  strcat(errReport paramErr " ")
         )
         errReport = strcat(errReport "\n")
      )
      if(schMissingParams then
         errReport = strcat(errReport sprintf(nil "%s is missing schematic parameter(s): " procName))
         foreach(  paramErr schMissingParams
            errReport =  strcat(errReport paramErr " ")
         )
         errReport = strcat(errReport "\n")
      )
      if( compMismatch then
         errReport = strcat(errReport sprintf(nil "%s has mismatched parameter(s): \n" procName))
         foreach( paramErr compMismatch
            errReport = strcat(errReport sprintf(nil "%L layout: %L schematic: %L \n" car(paramErr) cadr(paramErr) caddr(paramErr)))
         )
      )
      if( errReport == "" errReport = nil )
      errReport
    )

  ) ; ** procedure compCheckForErrors **

  procedure(combCheckForErrors(combMissingParams combMismatch procName)
    let((errReport paramErr)
      errReport = ""
      if( combMissingParams then
         errReport = strcat(errReport sprintf(nil "%s is missing parameter(s): " procName))
         foreach( paramErr combMissingParams
            errReport = strcat(errReport sprintf(nil "%L: %L %L\n" car(paramErr) cadr(paramErr) caddr(paramErr)))
         )
         errReport = strcat(errReport "\n")
      )
      if( combMismatch then
         errReport = strcat(errReport sprintf(nil "%s has mismatched parameter(s): " procName))
         foreach( paramErr combMismatch
            errReport = strcat(errReport sprintf(nil "%L: %L != %L\n" car(paramErr) cadr(paramErr) caddr(paramErr)))
         )
         errReport = strcat(errReport "\n")
      )
      if( errReport == "" errReport = nil )
      errReport
    )

  ) ; ** procedure combCheckForErrors **

  ; procedure to get the value of a parameter checking lowercase first and uppercase second
  ; used for CDL netlisting which may have lowercase or uppercase
  ; parameter names

  procedure(lvsCase(device paramName)
    let((upperParamName lowerParamName)
      upperParamName = upperCase(paramName)
      lowerParamName = lowerCase(paramName)

      ;set intial value to regular paramName value
      return=evalstring( sprintf( nil "device->%s" paramName) )

      ;printf("initial return value is %L\n\n" return)

      unless( evalstring( sprintf( nil "device->%s" paramName) )
         ;printf("in unless for device\n\n")
         if( evalstring( sprintf( nil "device->%s" lowerParamName) )  then
            ;printf("in lowerparam for device\n\n")
            return = evalstring( sprintf( nil "device->%s" lowerParamName) )
         else
            if( evalstring( sprintf( nil "device->%s" upperParamName) ) then
               ;printf("in upperparam for device\n\n")
               return = evalstring( sprintf( nil "device->%s" upperParamName) )
            )
         ) ; ** if evalstring **
      ) ; ** unless evalstring **

      ;printf("end return value is %L\n\n" return )
      return
    ) ; ** let **
  ) ; ** procedure lvsCase **

  ;----------------------------
  ; special proc for combining |
  ;   substrate contacts       |
  ;----------------------------

  procedure( parSubcont( prop1, prop2 )
    let( (new_value)
      new_value = ncons( nil )
      printf( "Parallel substrate contacts\n" )
      new_value
    )
  ) ; ** procedure parSubcont **

  ;-----------------------------------------------------------
  ; procedures for calculating new values of combined devices |
  ;                                                           |
  ; five procedures, each with the following arguments:       |
  ;   obj1Val               object1 parameter value           |
  ;   ovj2Val               object2 parameter value           |
  ;                                                           |
  ; each returns a result of a different calculation          |
  ;-----------------------------------------------------------

  procedure( NVsame( obj1 obj2 obj1Val obj2Val )
    obj1Val
  ) ; ** procedure NVsame **

  procedure( NVadd( obj1 obj2 obj1Val obj2Val )
    obj1Val+obj2Val
  ) ; ** procedure NVadd **

  procedure( NVavg( obj1 obj2 obj1Val obj2Val )
    (obj1Val+obj2Val)/2.0
  ) ; ** procedure NVavg **

  procedure( NVpres( obj1 obj2 obj1Val obj2Val )
    (obj1Val*obj2Val*1.0)/(obj1Val+obj2Val)
  ) ; ** procedure NVpres **

  procedure( NVone( obj1 obj2 obj1Val obj2Val )
    1
  ) ; ** procedure NVone **

  procedure( NVzero( obj1 obj2 obj1Val obj2Val )
    0
  ) ; ** procedure NVzero **

  procedure( NVignore( obj1 obj2 obj1Val obj2Val )
    -99
  ) ; ** procedure NVignore **

  procedure( NVidg( obj1 obj2 obj1Val obj2Val )
    if( obj1->idg if( abs_comp(obj1->idg 0 0.5) obj1Val = obj1->m*obj1Val ))  ; reset obj1Val to m*obj1Val if idg is 1
    if( obj2->idg if( abs_comp(obj2->idg 0 0.5) obj2Val = obj2->m*obj2Val ))
    obj1Val+obj1Val
  ) ; ** procedure NVidg **

  ;------------------------------------------
  ; procedures to recognize ambiguous spares |
  ;------------------------------------------

  ;;
  ;; *** original metric functions ***
  ;;

  procedure( fetWoverL( devName dpl )
    let( ( w l )
      w = getValCase(dpl "w")
      l = getValCase(dpl "l")
      if( l && w then
         fix(w*5e6) + fix(l*5e6)*10 + 100*fix(w/l) + 1000*fix(l/w)
      else
         0
      ) ; ** if l && w ***
    ) ; ** let **
  ) ; ** procedure fetWoverL **

  procedure( resRplusW( devName dpl)
    let((r w)
      w = getValCase(dpl "w")
      r = getValCase(dpl "r")

      if( r && w then
         fix( r*1e4 + w*1e8 )
      else
         0
      ) ; ** if r && w**
    ) ; ** let **
  ) ; ** procedure resRplusW **


  procedure( capIntVal( devName dpl )
    let( ( c )
      c = getValCase(dpl "c")
      if( c then
         fix( c*1e15 )
      else
         0
      ) ; ** if c **
    ) ; ** let **
  ) ; ** procedure capIntVal **

  ;;
  ;; ** updated metric functions **
  ;;

  ;; parFetSig is for nfet, pfet
  procedure(parFetSig(devName dpl)
    let((l mw sch gcon)
      l=getValCase(dpl "l")
      mw=getValCase(dpl "m")*getValCase(dpl "w")
      sch=getValCase(dpl "sch")
      gcon=getValCase(dpl "gcon")

      fix(mod(round(1e+08*mw-1) round(1e4) - 1) * 1e0 +
          mod(round(1.0*gcon) round(1e2) - 2) * 1e4 +
          mod(round(1e+08*l-1) round(1e2) - 3) * 1e6 +
          mod(round(1.0*sch) round(1e1) - 4) * 1e8
      )
    )
  )

  ;; mulFetSig is for nfetm, pfetm
  procedure(mulFetSig(devName dpl)
    let((l mw sch gcon m nf)
      l=getValCase(dpl "l")
      mw=getValCase(dpl "m")*getValCase(dpl "w")
      sch=getValCase(dpl "sch")
      gcon=getValCase(dpl "gcon")
      m=getValCase(dpl "m")
      nf=getValCase(dpl "nf")
      fix(mod(round(1e+08*mw-20) round(1e3) - 1) * 1e0 +
          mod(round(1e+08*l-23) round(1e2) - 2) * 1e3 +
          mod(round(1.0*nf-1) round(1e1) - 3) * 1e5 +
          mod(round(1.0*m-1) round(1e1) - 4) * 1e6 +
          mod(round(1.0*sch) round(1e1) - 5) * 1e7 +
          mod(round(1.0*gcon) round(1e1) - 6) * 1e8
      )
    )
  )

  ;; fetTwSig is for triple well fets
  procedure(fetTwSig(devName dpl)
    let((nf m l w gcon)
      l=getValCase(dpl "l")
      w=getValCase(dpl "w")
      gcon=getValCase(dpl "gcon")
      m=getValCase(dpl "m")
      nf=getValCase(dpl "nf")
      fix(mod(round(1e+08*w-20) round(1e3) - 1) * 1e0 +
          mod(round(1e+08*l-23) round(1e2) - 2) * 1e3 +
          mod(round(1.0*nf-1) round(1e1) - 3) * 1e5 +
          mod(round(1.0*m-1) round(1e1) - 4) * 1e6 +
          mod(round(1.0*gcon) round(1e1) - 5) * 1e7
      )
    )
  )

  ;; parFet2Sig is for non multiplicity 3.3V, 6.5V and zvt fets
  procedure(parFet2Sig(devName dpl)
    let((l mw gcon)
      l=getValCase(dpl "l")
      mw=getValCase(dpl "m")*getValCase(dpl "w")
      gcon=getValCase(dpl "gcon")
      fix(mod(round(1e+08*mw-20) round(1e4) - 1) * 1e0 +
          mod(round(1e+08*l-20) round(1e3) - 2) * 1e4 +
          mod(round(1.0*gcon) round(1e2) - 3) * 1e7
      )
    )
  )

  ;; mulFet2Sig is for multiplicity 3.3V, 6.5V and zvt fets
  procedure(mulFet2Sig(devName dpl)
    let((nf l mw m gcon)
      l=getValCase(dpl "l")
      mw=getValCase(dpl "m")*getValCase(dpl "w")
      gcon=getValCase(dpl "gcon")
      m=getValCase(dpl "m")
      nf=getValCase(dpl "nf")
      fix(mod(round(1e+08*mw-20) round(1e2) - 1) * 1e0 +
          mod(round(1.0*m-1) round(1e2) - 2) * 1e2 +
          mod(round(1.0*nf) round(1e2) - 3) * 1e4 +
          mod(round(1e+08*l-20) round(1e2) - 4) * 1e6 +
          mod(round(1.0*gcon) round(1e1) - 5) * 1e8
      )
    )
  )

  ;; parFetRfSig is for non multiplicity RF fets
  procedure(parFetRfSig(devName dpl)
    let((l w gcon nf)
      l=getValCase(dpl "l")
      w=getValCase(dpl "w")
      gcon=getValCase(dpl "gcon")
      nf=getValCase(dpl "nf")
      fix(mod(round(1e+08*w-20) round(1e3) - 1) * 1e0 +
          mod(round(1.0*nf) round(1e2) - 2) * 1e3 +
          mod(round(1.0*gcon) round(1e2) - 3) * 1e5 +
          mod(round(1e+08*l-20) round(1e2) - 4) * 1e7
      )
    )
  )

  ;; mulFetRfSig is for multiplicity RF fets
  procedure(mulFetRfSig(devName dpl)
    let((nf m l w gcon)
      l=getValCase(dpl "l")
      w=getValCase(dpl "w")
      gcon=getValCase(dpl "gcon")
      m=getValCase(dpl "m")
      nf=getValCase(dpl "nf")
      fix(mod(round(1e+08*w-20) round(1e3) - 1) * 1e0 +
          mod(round(1e+08*l-23) round(1e2) - 2) * 1e3 +
          mod(round(1.0*nf-1) round(1e1) - 3) * 1e5 +
          mod(round(1.0*m-1) round(1e1) - 4) * 1e6 +
          mod(round(1.0*gcon) round(1e1) - 5) * 1e7
      )
    )
  )

  ;; esdFetSig is for esdnfet
  procedure(esdFetSig(devName dpl)
    let((w num)
      w=getValCase(dpl "w")
      num=getValCase(dpl "num")
      fix(mod(round(1e+08*w-20) round(1e5) - 1) * 1e0 +
          mod(round(1.0*num) round(1e3) - 2) * 1e5
      )
    )
  )

  ;------------------------------------------------------------
  ; swapParams has the following arguments                     |
  ; layObj           a layout object                           |
  ; schObj           a schematic object                        |
  ; param1, param2   two parameters (e.g. l and w)             |
  ;                                                            |
  ; for each of the objects, the values of param1 and param2   |
  ;  are swapped (using doSwap) if param1 < param2             |
  ;------------------------------------------------------------

  procedure( swapParams(layObj schObj param1 param2)
    let((layVal1 layVal2 schVal1 schVal2 tmpVal)

      layVal1 = getValCase(layObj param1)
      layVal2 = getValCase(layObj param2)
      schVal1 = getValCase(schObj param1)
      schVal2 = getValCase(schObj param2)

      if( layVal1 < layVal2 doSwap(layObj param1 param2 layVal1 layVal2) )
      if( schVal1 < schVal2 doSwap(schObj param1 param2 schVal1 schVal2) )

    ) ; ** let **
  ) ; ** procedure swapParams **

  procedure(doSwap(thisobj param1 param2 val1 val2)

    evalstring(sprintf(nil "thisobj->%s = %L" param1 val2))
    evalstring(sprintf(nil "thisobj->%s = %L" param2 val1))

  ) ; ** procedure doSwap **

  ;---------------------------------------------------------
  ; set_res recalculates resistance using series bars value |
  ;---------------------------------------------------------

  procedure( set_res(m1 m2)
     if( getValCase(m1 "sbar") && (getValCase(m1 "sbar") > 0.5) m1->r = getValCase(m1 "r") * getValCase(m1 "sbar"))
     if( getValCase(m2 "sbar") && (getValCase(m2 "sbar") > 0.5) m2->r = getValCase(m2 "r") * getValCase(m2 "sbar"))
     m1->sbar=1
     m2->sbar=1
  )

  procedure( set_res2(m1 m2)
     if( getValCase(m1 "s") && (getValCase(m1 "s") > 0.5) m1->r = getValCase(m1 "r") * getValCase(m1 "s"))
     if( getValCase(m2 "s") && (getValCase(m2 "s") > 0.5) m2->r = getValCase(m2 "r") * getValCase(m2 "s"))
     m1->s=1
     m2->s=1
  )


  ;--------------------------------------------------------
  ; getVal evaluates its argument as a string if necessary |
  ;--------------------------------------------------------

  procedure( getVal(p)
    if( stringp(p) then evalstring(p) else p )
  ) ; ** procedure getVal **

  procedure( getValCase(device param)
    getVal( lvsCase(device param) )
  )

  ;----------------------------------------------------------------------------
  ; two types of compare procedures                                            |
  ; both receive two values and a tolerance                                    |
  ;   rel_comp   compares the (%error)/100 to the tolerance value              |
  ;   abs_comp   compares the difference to the tolerance value                |
  ;----------------------------------------------------------------------------


  procedure( rel_comp( p1 p2 rel_tol )
    let( (P2)
      P2 = getVal( p2 ) ; define intermediate value to avoid redundant evalstring
      if( ( abs((getVal(p1) - P2 ) / ( P2 * 1.0 )) >=  getVal(rel_tol) ) t)
    ) ; ** let **
  ) ; ** procedure rel_comp **

  procedure( abs_comp( p1 p2 abs_tol )
    if( ( abs( getVal(p1) - getVal(p2) ) >= getVal(abs_tol)) t)
  ) ; ** procedure abs_comp **

  ;---------------------------------------------------------
  ; sets the bentgate tolerance
  ;---------------------------------------------------------

  procedure( getBentTol(m1 m2)
    unless(getValCase(m1 "bentgate") m1->bentgate=0)
    unless(getValCase(m2 "bentgate") m2->bentgate=0)
    if( greaterp( getValCase(m1 "bentgate") getValCase(m2 "bentgate") )
       then getValCase(m1 "bentgate")*5*hgp
    else getValCase(m2 "bentgate")*5*hgp
    )
  ) ; ** procedure getBentTol **

;---------------------------------------
;    compare and combine procedures    |
;---------------------------------------
  if( avSwitch( "COMPARE_DIODE_SIZE" ) then
    procedure( DIODEcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "rel_comp" "5%")
        ("perim" "abs_comp" "1e-6")
	)
      genericcomp("DIODEcomp" m1 m2 paraminfolist)
    )
   )
    procedure( DIODEcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "X" "X" "add")
        ("perim" "X" "X" "add")
	)
      genericcomb("DIODEcomb" m1 m2 paraminfolist)
    )
   )
  ) ; end if switch compare_Diode_Size
  
  procedure( BONDPADcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "abs_comp" "1e-12")
        ("bp" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("perim" "abs_comp" "1e-7")
        ("rect" "abs_comp" "0.5")
      )
      genericcomp("BONDPADcomp" m1 m2 paraminfolist)
    )
  )
 procedure( multiOPREScomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("bp" "abs_comp" "0.5")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ;("r" "rel_comp" "1%")
        ("w" "abs_comp" "hgp")
	("l" "abs_comp" "hgp")
	("pbar" "abs_comp" "0.5")
	("s" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomp("multiOPREScomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiOPREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ;("r" "rel_comp" "1%" "same")
        ("pbar" "abs_comp" "0.5" "same")
        ("s" "abs_comp" "0.5" "same")
        ("bp" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomb("multiOPREScomb" m1 m2 paraminfolist)
    )
  )
  procedure( parOPREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("w" "abs_comp" "hgp" "same")
        ("l" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
	("s" "abs_comp" "0.5" "same")
	("pbar" "X" "X" "add")
        ;("r" "X" "X" "pres")
        ;("s" "X" "X" "one")
        ("bp" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomb("parOPREScomb" m1 m2 paraminfolist)
    )
  )
  procedure( serOPREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("w" "abs_comp" "hgp" "same")
        ("l" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ;("r" "X" "X" "add")
        ;("s" "X" "X" "one")
	("s" "X" "X" "add")
	("pbar" "abs_comp" "0.5" "same")
        ("bp" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomb("serOPREScomb" m1 m2 paraminfolist)
    )
  )
  
if( !avSwitch( "ignore_metal_capacitance_3rd_terminal" ) then  
  procedure( parVPPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("parVPPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("multiVPPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("w" "abs_comp" "hgp" "same")
        ;("nlev" "abs_comp" "0.5" "same")
        ("botlev" "abs_comp" "0.5" "same")
        ("toplev" "abs_comp" "0.5" "same")
        ("bp" "abs_comp" "0.5" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("setind" "rel_comp" "5%" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomb("multiVPPcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parVPPHVcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
	("pc" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("parVPPHVcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPHVcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
	("pc" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("multiVPPHVcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPHVcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("w" "abs_comp" "hgp" "same")
        ;("nlev" "abs_comp" "0.5" "same")
        ("botlev" "abs_comp" "0.5" "same")
        ("toplev" "abs_comp" "0.5" "same")
	("pc" "abs_comp" "0.5" "same")
        ("bp" "abs_comp" "0.5" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("setind" "rel_comp" "5%" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomb("multiVPPHVcomb" m1 m2 paraminfolist)
    )
  )

  procedure( MIMcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "rel_comp" "1%")
        ("lm" "abs_comp" "0.5")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("hd" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomp("MIMcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%")
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("hd" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomp("multiMIMcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("bp" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("hd" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("setind" "rel_comp" "5%" "same")
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomb("multiMIMcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parMIMcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "X" "X" "add")
        ("lm" "abs_comp" "0.5" "same")
        ("bp" "abs_comp" "0.5" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("hd" "abs_comp" "0.5" "same")
        ("setind" "X" "X" "ignore")
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomb("parMIMcomb" m1 m2 paraminfolist)
    )
  )
  procedure( MIMHKcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "rel_comp" "1%")
        ("lm" "abs_comp" "0.5")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("MIMHKcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMHKcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%")
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("multiMIMHKcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMHKcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("setind" "rel_comp" "5%" "same")
        ("bp" "abs_comp" "0.5" "same")
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomb("multiMIMHKcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parMIMHKcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "X" "X" "add")
        ("lm" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ("setind" "X" "X" "ignore")
        ("bp" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomb("parMIMHKcomb" m1 m2 paraminfolist)
    )
  )
) ; end !switch ignore_metal_capacitance_3rd_terminal

if( avSwitch( "ignore_metal_capacitance_3rd_terminal" ) then  
  procedure( parVPPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("parVPPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("multiVPPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("w" "abs_comp" "hgp" "same")
        ;("nlev" "abs_comp" "0.5" "same")
        ("botlev" "abs_comp" "0.5" "same")
        ("toplev" "abs_comp" "0.5" "same")
        ;("bp" "abs_comp" "0.5" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("setind" "rel_comp" "5%" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomb("multiVPPcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parVPPHVcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
	("pc" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("parVPPHVcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPHVcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
        ;("nlev" "abs_comp" "0.5")
        ("botlev" "abs_comp" "0.5")
        ("toplev" "abs_comp" "0.5")
	("pc" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
       if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomp("multiVPPHVcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiVPPHVcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("w" "abs_comp" "hgp" "same")
        ;("nlev" "abs_comp" "0.5" "same")
        ("botlev" "abs_comp" "0.5" "same")
        ("toplev" "abs_comp" "0.5" "same")
	("pc" "abs_comp" "0.5" "same")
        ;("bp" "abs_comp" "0.5" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("setind" "rel_comp" "5%" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomb("multiVPPHVcomb" m1 m2 paraminfolist)
    )
  )

  procedure( MIMcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "rel_comp" "1%")
        ("lm" "abs_comp" "0.5")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("hd" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomp("MIMcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%")
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("hd" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomp("multiMIMcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("lm" "abs_comp" "0.5" "same")
        ;("bp" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("hd" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("setind" "rel_comp" "5%" "same")
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomb("multiMIMcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parMIMcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "X" "X" "add")
        ("lm" "abs_comp" "0.5" "same")
        ;("bp" "abs_comp" "0.5" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("hd" "abs_comp" "0.5" "same")
        ("setind" "X" "X" "ignore")
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "hd") m1->hd = 0 )
      unless( getValCase(m2 "hd") m2->hd = 0 )
      genericcomb("parMIMcomb" m1 m2 paraminfolist)
    )
  )
  procedure( MIMHKcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "rel_comp" "1%")
        ("lm" "abs_comp" "0.5")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("MIMHKcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMHKcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%")
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ;("bp" "abs_comp" "0.5")
        ("lm" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("setind" "rel_comp" "5%")
      )
      if( equal( getVal(m1->setind) -99) || equal( getVal(m2->setind) -99) then
        m1->setind = -99
        m2->setind = -99
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("multiMIMHKcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMIMHKcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("c" "rel_comp" "1%" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("lm" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("setind" "rel_comp" "5%" "same")
        ;("bp" "abs_comp" "0.5" "same")
      )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomb("multiMIMHKcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parMIMHKcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("c" "X" "X" "add")
        ("lm" "abs_comp" "0.5" "same")
        ("nlev" "abs_comp" "0.5" "same")
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ("setind" "X" "X" "ignore")
        ;("bp" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( m1->setind m1->setind = -2 )
      unless( m2->setind m2->setind = -2 )
      genericcomb("parMIMHKcomb" m1 m2 paraminfolist)
    )
  )
) ; end switch ignore_metal_capacitance_3rd_terminal

  procedure( CWIREcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("d" "abs_comp" "hgp")
        ("l" "abs_comp" "hgp")
        ("layerads" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("overads" "abs_comp" "0.5")
        ("s" "abs_comp" "hgp")
        ("shieldsads" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
      )
      if( equal( getValCase(m1 "shieldsads") 0 )   m1->s = 0 )
      if( equal( getValCase(m2 "shieldsads") 0 )   m2->s = 0 )
      genericcomp("CWIREcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiPJFETcomb(m1, m2)
  ; mult = m * nd but in cdl mult is mapped on m, in vldb it is not
  ; par = "m * nd"
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ;("par" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      ;unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      ;unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      (if m1->m && m1->nd then m1->m = getValCase(m1 "m") * getValCase(m1 "nd") )
      (if m2->m && m2->nd then m2->m = getValCase(m2 "m") * getValCase(m2 "nd") )
      genericcomb("multiPJFETcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parPJFETcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "rel_comp" "1%" "same")
        ("w" "rel_comp" "1%" "same")
        ("nd" "X" "X" "add")
      )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      genericcomb("parPJFETcomb" m1 m2 paraminfolist)
    )
  )
  procedure( PJFETcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "rel_comp" "1%")
        ("w" "rel_comp" "1%")
        ("nd" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      genericcomp("PJFETcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiPJFETcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ;("par" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      ; par = "m * nd" in schematic netlist while m = "m"
      ;unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      ;unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      (if m1->m && m1->nd then m1->m = getValCase(m1 "m") * getValCase(m1 "nd") )
      (if m2->m && m2->nd then m2->m = getValCase(m2 "m") * getValCase(m2 "nd") )
      genericcomp("multiPJFETcomp" m1 m2 paraminfolist)
    )
  )

  procedure( FETcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("nf" "abs_comp" "0.5")
        ("psp" "abs_comp" "0.5")
        ; ("l" "rel_comp" "5%")
        ("l" "rel_comp" "1%")   ; HGE 270213
        ("gcon" "abs_comp" "0.5")
        ("wt" "rel_comp" "if( (m1->bentgate && (getVal(m1->bentgate) > 0.5)) || (m2->bentgate && (getVal(m2->bentgate) > 0.5)) then 5% else 1%)")
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      if( (m1->idg && abs_comp(m1->idg 0 0.5)) then
         m1->wt =   getValCase(m1 "wt") * getValCase(m1 "m") )
      if( (m2->idg && abs_comp(m2->idg 0 0.5)) then
         m2->wt =   getValCase(m2 "wt") * getValCase(m2 "m") )
      genericcomp("FETcomp" m1 m2 paraminfolist)
    )
  )
  procedure( FETNFcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "abs_comp" "0.5")
        ("psp" "abs_comp" "0.5")
        ; ("l" "rel_comp" "5%")
        ("l" "rel_comp" "1%")   ; HGE 270213
        ("gcon" "abs_comp" "0.5")
        ("wt" "rel_comp" "if( (m1->bentgate && (getVal(m1->bentgate) > 0.5)) || (m2->bentgate && (getVal(m2->bentgate) > 0.5)) then 5% else 1%)")
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      if( (m1->idg && abs_comp(m1->idg 0 0.5)) then
         m1->wt =   getValCase(m1 "wt") * getValCase(m1 "m")
	 m1->nf =   getValCase(m1 "nf") * getValCase(m1 "m") )
      if( (m2->idg && abs_comp(m2->idg 0 0.5)) then
         m2->wt =   getValCase(m2 "wt") * getValCase(m2 "m")
	 m2->nf =   getValCase(m2 "nf") * getValCase(m2 "m") )
      genericcomp("FETNFcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiFETcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "abs_comp" "0.5")
        ; ("l" "rel_comp" "5%")
        ("l" "rel_comp" "1%")   ; HGE 270213
        ("wt" "rel_comp" "if( (m1->bentgate && (getVal(m1->bentgate) > 0.5)) || (m2->bentgate && (getVal(m2->bentgate) > 0.5)) then 5% else 1%)")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("gcon" "abs_comp" "0.5")
        ("psp" "abs_comp" "0.5")
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomp("multiFETcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiFETcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "abs_comp" "0.5" "same")
        ; ("l" "rel_comp" "5%" "same")
        ("l" "rel_comp" "1%" "same")   ; HGE 270213
        ("wt" "abs_comp" "hgp" "same")
        ("gcon" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("bentgate" "X" "X" "add")
        ("psp" "abs_comp" "0.5" "same")
      )
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !m1->bentgate m1->bentgate = 0 )
      if( !m2->bentgate m2->bentgate = 0 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomb("multiFETcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parFETcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "X" "X" "add")
        ("l" "rel_comp" "5%" "same")
        ("wt" "X" "X" "add")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ("gcon" "abs_comp" "0.5" "same")
        ("bentgate" "X" "X" "add")
        ("psp" "abs_comp" "0.5" "same")
      )
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !m1->bentgate m1->bentgate = 0 )
      if( !m2->bentgate m2->bentgate = 0 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomb("parFETcomb" m1 m2 paraminfolist)
    )
  )
  procedure( FETRFcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("nf" "abs_comp" "0.5")
        ("psp" "abs_comp" "0.5")
        ("l" "rel_comp" "5%")
        ("gcon" "abs_comp" "0.5")
        ("wt" "rel_comp" "if( (m1->bentgate && (getVal(m1->bentgate) > 0.5)) || (m2->bentgate && (getVal(m2->bentgate) > 0.5)) then 5% else 1%)")
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomp("FETRFcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiFETRFcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "abs_comp" "0.5")
        ("l" "rel_comp" "5%")
        ("wt" "rel_comp" "if( (m1->bentgate && (getVal(m1->bentgate) > 0.5)) || (m2->bentgate && (getVal(m2->bentgate) > 0.5)) then 5% else 1%)")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("gcon" "abs_comp" "0.5")
        ("psp" "abs_comp" "0.5")
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomp("multiFETRFcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiFETRFcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "abs_comp" "0.5" "same")
        ("l" "rel_comp" "5%" "same")
        ("wt" "abs_comp" "hgp" "same")
        ("gcon" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("bentgate" "X" "X" "add")
        ("psp" "abs_comp" "0.5" "same")
      )
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !m1->bentgate m1->bentgate = 0 )
      if( !m2->bentgate m2->bentgate = 0 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomb("multiFETRFcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parFETRFcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nf" "X" "X" "add")
        ("l" "rel_comp" "5%" "same")
        ("wt" "X" "X" "add")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ("gcon" "abs_comp" "0.5" "same")
        ("bentgate" "X" "X" "add")
        ("psp" "abs_comp" "0.5" "same")
      )
      if( !getValCase(m1 "nf") || !getValCase(m2 "nf")  then
        m1->nf = 1
        m2->nf = 1
      )
      if( !getValCase(m1 "gcon") || !getValCase(m2 "gcon")  then
        m1->gcon = 1
        m2->gcon = 1
      )
      (if !m1->wt then if( m1->w && m1->nf then m1->wt = getValCase(m1 "w") * getValCase(m1 "nf") else m1->wt = getValCase(m1 "w") ))
      (if !m2->wt then if( m2->w && m2->nf then m2->wt = getValCase(m2 "w") * getValCase(m2 "nf") else m2->wt = getValCase(m2 "w") ))
      if( !m1->bentgate m1->bentgate = 0 )
      if( !m2->bentgate m2->bentgate = 0 )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "psp") m1->psp = 0 )
      unless( getValCase(m2 "psp") m2->psp = 0 )
      genericcomb("parFETRFcomb" m1 m2 paraminfolist)
    )
  )
  procedure( FETHVcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "rel_comp" "1%")
        ("w" "rel_comp" "1%")
	("nd" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      genericcomp("FETHVcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiFETHVcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "rel_comp" "1%")
        ("w" "rel_comp" "1%")
        ("m" "abs_comp" "0.5")
        ;("par" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      (if m1->m && m1->nd then m1->m = getValCase(m1 "m") * getValCase(m1 "nd") )
      (if m2->m && m2->nd then m2->m = getValCase(m2 "m") * getValCase(m2 "nd") )
      genericcomp("multiFETHVcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiFETHVcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "rel_comp" "1%" "same")
        ("w" "rel_comp" "1%" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      (if m1->m && m1->nd then m1->m = getValCase(m1 "m") * getValCase(m1 "nd") )
      (if m2->m && m2->nd then m2->m = getValCase(m2 "m") * getValCase(m2 "nd") )
      genericcomb("multiFETHVcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parFETHVcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "rel_comp" "1%" "same")
        ;("w" "X" "X" "add")
	("w" "rel_comp" "1%" "same")
        ("nd" "X" "X" "add")
        ;("m" "abs_comp" "0.5" "same")
        ;("par" "abs_comp" "0.5" "same")
      )
      ;unless( getValCase(m1 "m") m1->m = 1 )
      ;unless( getValCase(m2 "m") m2->m = 1 )
      ;unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      ;unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      genericcomb("parFETHVcomb" m1 m2 paraminfolist)
    )
  )
  procedure( INDLINEcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("grnd" "abs_comp" "0.5")
        ("ind" "rel_comp" "5%")
        ("l" "abs_comp" "hgp")
        ("nlev" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
      )
      genericcomp("INDLINEcomp" m1 m2 paraminfolist)
    )
  )
  procedure( INDcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("grnd" "abs_comp" "0.5")
        ("n" "abs_comp" "0.125")
        ("nlev" "abs_comp" "0.5")
        ("s" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("wu" "abs_comp" "hgp")
        ("x" "rel_comp" "1%")
      )
      if( equal( getVal(m1->n ) 1) || equal( getVal(m2->n ) 1) then
        m1->s = 5.0e-6
        m2->s = 5.0e-6
      )
      genericcomp("INDcomp" m1 m2 paraminfolist)
    )
  )
  procedure( SYMINDcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("grnd" "abs_comp" "0.5")
        ("n" "abs_comp" "0.125")
        ("nlev" "abs_comp" "0.5")
        ("s" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("wu" "abs_comp" "hgp")
        ("x" "abs_comp" "hgp")
        ("xov" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "xov") m1->xov = 0 )
      unless( getValCase(m2 "xov") m2->xov = 0 )
      if( equal( getVal(m1->n ) 1) || equal( getVal(m2->n ) 1) then
        m1->s = 5.0e-6
        m2->s = 5.0e-6
        m1->xov = 0
        m2->xov = 0
      )
      genericcomp("SYMINDcomp" m1 m2 paraminfolist)
    )
  )
  procedure( SINGLEWIREcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("layerads" "abs_comp" "0.5")
        ("nlev" "abs_comp" "0.5")
        ("overads" "abs_comp" "0.5")
        ("s" "abs_comp" "hgp")
        ("shieldsads" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
      )
      if( equal( getValCase(m1 "shieldsads") 0 )   m1->s = 0 )
      if( equal( getValCase(m2 "shieldsads") 0 )   m2->s = 0 )
      genericcomp("SINGLEWIREcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiPCDCAPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomp("multiPCDCAPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiPCDCAPcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("w" "abs_comp" "hgp" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomb("multiPCDCAPcomb" m1 m2 paraminfolist)
    )
  )
  procedure( SBDcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("nf" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
      )
      genericcomp("SBDcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiSBDcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("nf" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("multiSBDcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiSBDcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("nf" "abs_comp" "0.5" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomb("multiSBDcomb" m1 m2 paraminfolist)
    )
  )
  procedure( multiRES2comp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
        ("pbar" "abs_comp" "0.5")
        ;("r" "rel_comp" "1%")
        ("s" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomp("multiRES2comp" m1 m2 paraminfolist)
    )
  )
  procedure( multiRES2comb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
        ("pbar" "abs_comp" "0.5" "same")
        ;("r" "rel_comp" "1%" "same")
        ("s" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomb("multiRES2comb" m1 m2 paraminfolist)
    )
  )
  procedure( parRES2comb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
        ;("r" "X" "X" "pres")
        ;("s" "X" "X" "one")
	("s" "abs_comp" "0.5" "same")
	("pbar" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomb("parRES2comb" m1 m2 paraminfolist)
    )
  )
  procedure( serRES2comb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same" )
        ;("r" "X" "X" "add")
        ;("s" "X" "X" "one")
	("pbar" "abs_comp" "0.5" "same")
        ("s" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      unless( getValCase(m1 "pbar") m1->pbar = 1 )
      unless( getValCase(m2 "pbar") m2->pbar = 1 )
      unless( getValCase(m1 "s") m1->s = 1 )
      unless( getValCase(m2 "s") m2->s = 1 )
      ;set_res2(m1 m2)
      genericcomb("serRES2comb" m1 m2 paraminfolist)
    )
  )
   procedure( multiDIFFMOSVARcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ("w" "abs_comp" "hgp" "same")
        ("nf" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomb("multiDIFFMOSVARcomb" m1 m2 paraminfolist)
    )
  )
  procedure( multiDIFFMOSVARcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ("w" "abs_comp" "hgp")
        ("nf" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomp("multiDIFFMOSVARcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMOSVARcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("xrep" "abs_comp" "0.5")
        ("yrep" "abs_comp" "0.5")
        ("m" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomp("multiMOSVARcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiMOSVARcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("xrep" "abs_comp" "0.5" "same")
        ("yrep" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomb("multiMOSVARcomb" m1 m2 paraminfolist)
    )
  )
  procedure( parMOSVARcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("xrep" "X" "X" "add")
        ("yrep" "abs_comp" "0.5" "same")
        ("m" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomb("parMOSVARcomb" m1 m2 paraminfolist)
    )
  )
  procedure( DIPDNWcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
        ("nf" "abs_comp" "0.5")
	("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("DIPDNWcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiDIPDNWcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("nf" "abs_comp" "0.5" "same")
        ("m" "X" "X" "add")
	("par" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomb("multiDIPDNWcomb" m1 m2 paraminfolist)
    )
  )
  procedure( HAVARcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("nastripes" "abs_comp" "0.5")
        ("rxl" "abs_comp" "hgp")
        ("rxw" "abs_comp" "hgp")
      )
      genericcomp("HAVARcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiHAVARcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("m" "abs_comp" "0.5")
        ("nastripes" "abs_comp" "0.5")
        ("rxl" "abs_comp" "hgp")
        ("rxw" "abs_comp" "hgp")
      )
      genericcomp("multiHAVARcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiHAVARcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("m" "X" "X" "add")
        ("nastripes" "abs_comp" "0.5" "same")
        ("rxl" "abs_comp" "hgp" "same")
        ("rxw" "abs_comp" "hgp" "same")
      )
      genericcomb("multiHAVARcomb" m1 m2 paraminfolist)
    )
  )
  procedure( ESDVPNPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "abs_comp" "1e-12")
        ("perim" "abs_comp" "3*hgp")
        ("nanod" "abs_comp" "0.5")
      )
      genericcomp("ESDVPNPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( parESDVPNPcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "X" "X" "add")
        ("perim" "X" "X" "add")
        ("nanod" "X" "X" "add")
      )
      genericcomb("parESDVPNPcomb" m1 m2 paraminfolist)
    )
  )
  procedure( ESDNDSXcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "abs_comp" "1e-12")
        ("ncath" "abs_comp" "0.5")
        ("perim" "abs_comp" "3*hgp")
      )
      genericcomp("ESDNDSXcomp" m1 m2 paraminfolist)
    )
  )
  procedure( parESDNDSXcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "X" "X" "add")
        ("perim" "X" "X" "add")
        ("ncath" "X" "X" "add")
;       ("nw" "abs_comp" "0.5" "same")
      )
      genericcomb("parESDNDSXcomb" m1 m2 paraminfolist)
    )
  )
  procedure( ESDXDIcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("area" "abs_comp" "1e-12")
        ;("perim" "abs_comp" "hgp")
        ("l" "abs_comp" "hgp")
        ("w" "abs_comp" "hgp")
	("m" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      (if m1->m && m1->nd then m1->m = getValCase(m1 "m") * getValCase(m1 "nd") )
      (if m2->m && m2->nd then m2->m = getValCase(m2 "m") * getValCase(m2 "nd") )
      genericcomp("ESDXDIcomp" m1 m2 paraminfolist)
    )
  )
  procedure( parESDXDIcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("w" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "nd") m1->nd = 1 )
      unless( getValCase(m2 "nd") m2->nd = 1 )
      (if m1->m && m1->nd then m1->m = getValCase(m1 "m") * getValCase(m1 "nd") )
      (if m2->m && m2->nd then m2->m = getValCase(m2 "m") * getValCase(m2 "nd") )
      genericcomb("parESDXDIcomb" m1 m2 paraminfolist)
    )
  )
 
  procedure( multiSBLKREScomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp")
        ("m" "abs_comp" "0.5")
        ;("r" "rel_comp" "1%")
        ("w" "abs_comp" "hgp")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomp("multiSBLKREScomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiSBLKREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("l" "abs_comp" "hgp" "same")
        ("m" "X" "X" "add")
        ;("r" "rel_comp" "1%" "same")
        ("w" "abs_comp" "hgp" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      genericcomb("multiSBLKREScomb" m1 m2 paraminfolist)
    )
  )
 procedure( multiHVREScomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("r" "rel_comp" "1%")
        ("l" "rel_comp" "1%")
        ("w" "rel_comp" "1%")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      ;set_res2(m1 m2)
      genericcomp("multiHVREScomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiHVREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ;("r" "rel_comp" "1%" "same")
        ("l" "rel_comp" "1%" "same")
        ("w" "rel_comp" "1%" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      ;set_res2(m1 m2)
      genericcomb("multiHVREScomb" m1 m2 paraminfolist)
    )
  )
  procedure( parHVREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("r" "X" "X" "pres")
        ("w" "rel_comp" "1%" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      ;set_res2(m1 m2)
      genericcomb("parHVREScomb" m1 m2 paraminfolist)
    )
  )
  procedure( serHVREScomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("r" "X" "X" "add")
        ("w" "rel_comp" "1%" "same")
        ("m" "abs_comp" "0.5" "same")
        ("par" "abs_comp" "0.5" "same")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      ;set_res2(m1 m2)
      genericcomb("serHVREScomb" m1 m2 paraminfolist)
    )
  )
procedure( multiBIPcomp(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "rel_comp" "1%")
        ("m" "abs_comp" "0.5")
        ("par" "abs_comp" "0.5")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomp("multiBIPcomp" m1 m2 paraminfolist)
    )
  )
  procedure( multiBIPcomb(m1, m2)
    let((paraminfolist )
      paraminfolist='(
        ("area" "X" "X" "same")
        ("m" "X" "X" "add")
        ("par" "X" "X" "add")
      )
      unless( getValCase(m1 "m") m1->m = 1 )
      unless( getValCase(m2 "m") m2->m = 1 )
      unless( getValCase(m1 "par") m1->par = getValCase(m1 "m") )
      unless( getValCase(m2 "par") m2->par = getValCase(m2 "m") )
      genericcomb("multiBIPcomb" m1 m2 paraminfolist)
    )
  )

  ; Modify BONDPAD multiplicity names

  parameterModifiedDevice("bondpad"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("bondpadx"           ("mSwitch" "_m" "0"))

  ; Modify OPRES multiplicity names

  parameterModifiedDevice("opnpcres"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opnpcresx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opppcres"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opppcresx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oprppres"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oprppresx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oprrpres"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oprrpresx"          ("mSwitch" "_m" "0"))

  ; Modify MIM multiplicity names

  parameterModifiedDevice("dualcmim"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("dualcmimx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("cmim"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("cmimx"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("dualcmimhd"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("dualcmimhdx"        ("mSwitch" "_m" "0"))
  parameterModifiedDevice("cmimhd"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("cmimhdx"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("mimhk"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("mimhkx"             ("mSwitch" "_m" "0"))

  ; Modify VNCAP multiplicity names

  parameterModifiedDevice("vncap"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("vncapx"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("vncap_hv"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("vncap_hvx"          ("mSwitch" "_m" "0"))

  ; Modify CWIRE multiplicity names

  parameterModifiedDevice("coupledwires"       ("mSwitch" "_m" "0"))

  ; Modify FET multiplicity names

  parameterModifiedDevice("nfet"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetx"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfet33"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfet33x"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetm"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetmx"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetmtw"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetmtwx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti4"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetihvt4"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetim4"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetix"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetihvt"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetihvtx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetim"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetimx"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfethvt"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfethvtx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetshvt"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfetshvtx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfet33twx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfettw"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfettwx"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetx"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfeti4"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfeti"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetix"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetihvt4"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetihvt"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetixhvt"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet33"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet33x"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetm"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetmx"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetim4"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetim"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetimx"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfethvt"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfethvtx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetshvt"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfetshvtx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("zvtnfet"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("zvtnfetx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("zvtnfet33"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("zvtnfet33x"         ("mSwitch" "_m" "0"))

  ; Modify RF FET multiplicity names

  parameterModifiedDevice("nfet_rf"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti4_rf"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti_rf"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfettw_rf"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet_rf"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfeti4_rf"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfeti_rf"           ("mSwitch" "_m" "0"))

  ; Modify HV FET multiplicity names

  parameterModifiedDevice("nfet20mh"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfet20hs"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfet50hs"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti20h"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti20t"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti25m"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti50h"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti50m"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("nfeti50t"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet20h"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet20hs"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet20t"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet25m"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet50h"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet50hs"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet50m"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pfet50t"            ("mSwitch" "_m" "0"))

  ; Modify INDLINE multiplicity names

  parameterModifiedDevice("indline"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("indlinex"           ("mSwitch" "_m" "0"))

  ; Modify IND multiplicity names

  parameterModifiedDevice("ind"                ("mSwitch" "_m" "0"))
  parameterModifiedDevice("symind"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("symindp"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("indp"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("inds"               ("mSwitch" "_m" "0"))

  ; Modify SINGLEWIRE multiplicity names

  parameterModifiedDevice("singlewire"         ("mSwitch" "_m" "0"))

  ; Modify PCDCAP multiplicity names

  parameterModifiedDevice("pcdcap"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcapx"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcapm"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcapmx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcapt"  	       ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcaptx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcap33"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcdcap33x"          ("mSwitch" "_m" "0"))

  ; Modify SBD multiplicity names

  parameterModifiedDevice("sbd"                ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sbdx"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sbdi"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sbdix"              ("mSwitch" "_m" "0"))

  ; Modify RES2 multiplicity names

  parameterModifiedDevice("k1res"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("k1resx"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opndres"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opndresx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oppdres"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oppdresx"           ("mSwitch" "_m" "0"))

  ; OP*DIRES multiplicity names

  parameterModifiedDevice("opndires"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opndiresx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("opndres3"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oppdires"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oppdiresx"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("oppdres3"           ("mSwitch" "_m" "0"))

  ; Modify MOSVAR multiplicity names

  parameterModifiedDevice("mosvart"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("mosvartx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("mosvarm"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("mosvarmx"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("diffmosvar"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("diffmosvarx"        ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcap"               ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcapi"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("pcapim"             ("mSwitch" "_m" "0"))

  ; Modify PJFET multiplicity names

  parameterModifiedDevice("pjfet"              ("mSwitch" "_m" "0"))

  ; Modify DIPDNW multiplicity names

  parameterModifiedDevice("dipdnw"             ("mSwitch" "_m" "0"))
  parameterModifiedDevice("dindpw"             ("mSwitch" "_m" "0"))

  ; Modify DIVPNP multiplicity names

  parameterModifiedDevice("divpnp"             ("mSwitch" "_m" "0"))

  ; Modify HAVAR multiplicity names

  parameterModifiedDevice("havar"              ("mSwitch" "_m" "0"))
  parameterModifiedDevice("havarx"             ("mSwitch" "_m" "0"))

  ; Modify ESDVPNP multiplicity names

  parameterModifiedDevice("esdvpnpnw"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdpnpi"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdpdidn"           ("mSwitch" "_m" "0"))

  ; Modify ESDNDSX multiplicity names

  parameterModifiedDevice("esdndsx"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdndpi"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdndidn"           ("mSwitch" "_m" "0"))

  ; Modify ESDFDI ESDTDI multiplicity names

  parameterModifiedDevice("esdfdi25"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdfdi50"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdtdi20"           ("mSwitch" "_m" "0"))
  parameterModifiedDevice("esdtdi25"           ("mSwitch" "_m" "0"))
  ;parameterModifiedDevice("esdtdi50"           ("mSwitch" "_m" "0"))

  ; Modify SBLKRES multiplicity names

  parameterModifiedDevice("sblkndres"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkndresx"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkndires"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkndiresx"        ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkndres3"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkpdres"          ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkpdresx"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkpdires"         ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkpdiresx"        ("mSwitch" "_m" "0"))
  parameterModifiedDevice("sblkpdres3"         ("mSwitch" "_m" "0"))

  ; VNPN & VPNP multiplicity names

  parameterModifiedDevice( "vnpn"              ("mSwitch" "_m" "0"))    
  parameterModifiedDevice( "vpnp"              ("mSwitch" "_m" "0"))  


  ; Modify HV RES multiplicity names

  parameterModifiedDevice("hvnwres"            ("mSwitch" "_m" "0"))
  parameterModifiedDevice("hvpwres"            ("mSwitch" "_m" "0"))

  ; SUBC merge

  mergeParallel( "subc"               merge parSubcont )
  mergeParallel( "subcx"              merge parSubcont )

  ; LVSRES merge

;  mergeParallel( "m1res m2res m3res m4res m5res mtres amres lmres" merge )
  mergeParallel( "lvsres"             merge )
  mergeSeries(   "lvsres"             merge )

  ; BONDPAD merge

  mergeParallel( "bondpad_m0"         noMerge )
  mergeParallel( "bondpadx_m0"        noMerge )

  ; OPRES merge

  mergeParallel( "opnpcres_m1"        merge multiOPREScomb )
  mergeParallel( "opnpcresx_m1"       merge multiOPREScomb )
  mergeParallel( "opppcres_m1"        merge multiOPREScomb )
  mergeParallel( "opppcresx_m1"       merge multiOPREScomb )
  mergeParallel( "oprppres_m1"        merge multiOPREScomb )
  mergeParallel( "oprppresx_m1"       merge multiOPREScomb )
  mergeParallel( "oprrpres_m1"        merge multiOPREScomb )
  mergeParallel( "oprrpresx_m1"       merge multiOPREScomb )
  mergeParallel( "opnpcres_m0"        merge parOPREScomb )
  mergeParallel( "opnpcresx_m0"       merge parOPREScomb )
  mergeParallel( "opppcres_m0"        merge parOPREScomb )
  mergeParallel( "opppcresx_m0"       merge parOPREScomb )
  mergeParallel( "oprppres_m0"        merge parOPREScomb )
  mergeParallel( "oprppresx_m0"       merge parOPREScomb )
  mergeParallel( "oprrpres_m0"        merge parOPREScomb )
  mergeParallel( "oprrpresx_m0"       merge parOPREScomb )
  mergeSeries(   "opnpcres_m0"        merge serOPREScomb )
  mergeSeries(   "opnpcresx_m0"       merge serOPREScomb )
  mergeSeries(   "opppcres_m0"        merge serOPREScomb )
  mergeSeries(   "opppcresx_m0"       merge serOPREScomb )
  mergeSeries(   "oprppres_m0"        merge serOPREScomb )
  mergeSeries(   "oprppresx_m0"       merge serOPREScomb )
  mergeSeries(   "oprrpres_m0"        merge serOPREScomb )
  mergeSeries(   "oprrpresx_m0"       merge serOPREScomb )

  ; MIM merge

  mergeParallel( "dualcmim_m1"        merge multiMIMcomb )
  mergeParallel( "dualcmimx_m1"       merge multiMIMcomb )
  mergeParallel( "dualcmimhd_m1"      merge multiMIMcomb )
  mergeParallel( "dualcmimhdx_m1"     merge multiMIMcomb )
  mergeParallel( "cmim_m1"            merge multiMIMcomb )
  mergeParallel( "cmimx_m1"           merge multiMIMcomb )
  mergeParallel( "cmimhd_m1"          merge multiMIMcomb )
  mergeParallel( "cmimhdx_m1"         merge multiMIMcomb )
  mergeParallel( "mimhk_m1"           merge multiMIMHKcomb )
  mergeParallel( "mimhkx_m1"          merge multiMIMHKcomb )

  mergeParallel( "dualcmim_m0"        noMerge )
  mergeParallel( "dualcmimx_m0"       noMerge )
  mergeParallel( "dualcmimhd_m0"      noMerge )
  mergeParallel( "dualcmimhdx_m0"     noMerge )
  mergeParallel( "cmim_m0"            noMerge )
  mergeParallel( "cmimx_m0"           noMerge )
  mergeParallel( "cmimhd_m0"          noMerge )
  mergeParallel( "cmimhdx_m0"         noMerge )
  mergeParallel( "mimhk_m0"           noMerge )
  mergeParallel( "mimhkx_m0"          noMerge )

  mergeSeries( "dualcmim_m0"         noMerge )
  mergeSeries( "dualcmimx_m0"        noMerge )
  mergeSeries( "dualcmimhd_m0"       noMerge )
  mergeSeries( "dualcmimhdx_m0"      noMerge )
  mergeSeries( "cmim_m0"             noMerge )
  mergeSeries( "cmimx_m0"            noMerge )
  mergeSeries( "cmimhd_m0"           noMerge )
  mergeSeries( "cmimhdx_m0"          noMerge )
  mergeSeries( "mimhk_m0"            noMerge )
  mergeSeries( "mimhkx_m0"           noMerge )

  ; VNCAP merge
  mergeSeries( "vncap_m0"             noMerge )
  mergeSeries( "vncapx_m0"            noMerge )
  mergeSeries( "vncap_hv_m0"          noMerge )
  mergeSeries( "vncap_hvx_m0"         noMerge )

  mergeParallel( "vncap_m0"           noMerge )
  mergeParallel( "vncapx_m0"          noMerge )
  mergeParallel( "vncap_hv_m0"        noMerge )
  mergeParallel( "vncap_hvx_m0"       noMerge )

  mergeParallel( "vncap_m1"           merge multiVPPcomb )
  mergeParallel( "vncapx_m1"          merge multiVPPcomb )
  mergeParallel( "vncap_hv_m1"        merge multiVPPHVcomb )
  mergeParallel( "vncap_hvx_m1"       merge multiVPPHVcomb )

  ; CWIRE merge

  mergeParallel( "coupledwires_m0"    noMerge )

  ; FET merge

  mergeParallel( "nfet_m1"            merge multiFETcomb )
  mergeParallel( "nfetx_m1"           merge multiFETcomb )
  mergeParallel( "nfet33_m1"          merge multiFETcomb )
  mergeParallel( "nfet33x_m1"         merge multiFETcomb )
  mergeParallel( "nfetm_m1"           merge multiFETcomb )
  mergeParallel( "nfetmx_m1"          merge multiFETcomb )
  mergeParallel( "nfetmtw_m1"         merge multiFETcomb )
  mergeParallel( "nfetmtwx_m1"        merge multiFETcomb )
  mergeParallel( "nfeti_m1"           merge multiFETcomb )
  mergeParallel( "nfetix_m1"          merge multiFETcomb )
  mergeParallel( "nfeti4_m1"          merge multiFETcomb )
  mergeParallel( "nfetihvt_m1"        merge multiFETcomb )
  mergeParallel( "nfetihvtx_m1"       merge multiFETcomb )
  mergeParallel( "nfetihvt4_m1"       merge multiFETcomb )
  mergeParallel( "nfetim_m1"          merge multiFETcomb )
  mergeParallel( "nfetimx_m1"         merge multiFETcomb )
  mergeParallel( "nfetim4_m1"         merge multiFETcomb )
  mergeParallel( "nfethvt_m1"         merge multiFETcomb )
  mergeParallel( "nfethvtx_m1"        merge multiFETcomb )
  mergeParallel( "nfetshvt_m1"        merge multiFETcomb )
  mergeParallel( "nfetshvtx_m1"       merge multiFETcomb )
  mergeParallel( "nfet33twx_m1"       merge multiFETcomb )
  mergeParallel( "nfettw_m1"          merge multiFETcomb )
  mergeParallel( "nfettwx_m1"         merge multiFETcomb )
  mergeParallel( "pfet_m1"            merge multiFETcomb )
  mergeParallel( "pfetx_m1"           merge multiFETcomb )
  mergeParallel( "pfet33_m1"          merge multiFETcomb )
  mergeParallel( "pfet33x_m1"         merge multiFETcomb )
  mergeParallel( "pfetm_m1"           merge multiFETcomb )
  mergeParallel( "pfetmx_m1"          merge multiFETcomb )
  mergeParallel( "pfeti_m1"           merge multiFETcomb )
  mergeParallel( "pfetix_m1"          merge multiFETcomb )
  mergeParallel( "pfeti4_m1"          merge multiFETcomb )
  mergeParallel( "pfetihvt_m1"        merge multiFETcomb )
  mergeParallel( "pfetihvtx_m1"       merge multiFETcomb )
  mergeParallel( "pfetihvt4_m1"       merge multiFETcomb )
  mergeParallel( "pfetim_m1"          merge multiFETcomb )
  mergeParallel( "pfetimx_m1"         merge multiFETcomb )
  mergeParallel( "pfetim4_m1"         merge multiFETcomb )
  mergeParallel( "pfethvt_m1"         merge multiFETcomb )
  mergeParallel( "pfethvtx_m1"        merge multiFETcomb )
  mergeParallel( "pfetshvt_m1"        merge multiFETcomb )
  mergeParallel( "pfetshvtx_m1"       merge multiFETcomb )
  mergeParallel( "zvtnfet_m1"         merge multiFETcomb )
  mergeParallel( "zvtnfetx_m1"        merge multiFETcomb )
  mergeParallel( "zvtnfet33_m1"       merge multiFETcomb )
  mergeParallel( "zvtnfet33x_m1"      merge multiFETcomb )
  mergeParallel( "nfet_m0"            merge parFETcomb )
  mergeParallel( "nfetx_m0"           merge parFETcomb )
  mergeParallel( "nfet33_m0"          merge parFETcomb )
  mergeParallel( "nfet33x_m0"         merge parFETcomb )
  mergeParallel( "nfetm_m0"           merge parFETcomb )
  mergeParallel( "nfetmx_m0"          merge parFETcomb )
  mergeParallel( "nfetmtw_m0"         merge parFETcomb )
  mergeParallel( "nfetmtwx_m0"        merge parFETcomb )
  mergeParallel( "nfeti_m0"           merge parFETcomb )
  mergeParallel( "nfetix_m0"          merge parFETcomb )
  mergeParallel( "nfeti4_m0"          merge parFETcomb )
  mergeParallel( "nfetihvt_m0"        merge parFETcomb )
  mergeParallel( "nfetihvtx_m0"       merge parFETcomb )
  mergeParallel( "nfetihvt4_m0"       merge parFETcomb )
  mergeParallel( "nfetim_m0"          merge parFETcomb )
  mergeParallel( "nfetimx_m0"         merge parFETcomb )
  mergeParallel( "nfetim4_m0"         merge parFETcomb )
  mergeParallel( "nfethvt_m0"         merge parFETcomb )
  mergeParallel( "nfethvtx_m0"        merge parFETcomb )
  mergeParallel( "nfetshvt_m0"        merge parFETcomb )
  mergeParallel( "nfetshvtx_m0"       merge parFETcomb )
  mergeParallel( "nfet33twx_m0"       merge parFETcomb )
  mergeParallel( "nfettw_m0"          merge parFETcomb )
  mergeParallel( "nfettwx_m0"         merge parFETcomb )
  mergeParallel( "pfet_m0"            merge parFETcomb )
  mergeParallel( "pfetx_m0"           merge parFETcomb )
  mergeParallel( "pfet33_m0"          merge parFETcomb )
  mergeParallel( "pfet33x_m0"         merge parFETcomb )
  mergeParallel( "pfetm_m0"           merge parFETcomb )
  mergeParallel( "pfetmx_m0"          merge parFETcomb )
  mergeParallel( "pfeti_m0"           merge parFETcomb )
  mergeParallel( "pfetix_m0"          merge parFETcomb )
  mergeParallel( "pfeti4_m0"          merge parFETcomb )
  mergeParallel( "pfetihvt_m0"        merge parFETcomb )
  mergeParallel( "pfetihvtx_m0"       merge parFETcomb )
  mergeParallel( "pfetihvt4_m0"       merge parFETcomb )
  mergeParallel( "pfetim_m0"          merge parFETcomb )
  mergeParallel( "pfetimx_m0"         merge parFETcomb )
  mergeParallel( "pfetim4_m0"         merge parFETcomb )
  mergeParallel( "pfethvt_m0"         merge parFETcomb )
  mergeParallel( "pfethvtx_m0"        merge parFETcomb )
  mergeParallel( "pfetshvt_m0"        merge parFETcomb )
  mergeParallel( "pfetshvtx_m0"       merge parFETcomb )
  mergeParallel( "zvtnfet_m0"         merge parFETcomb )
  mergeParallel( "zvtnfetx_m0"        merge parFETcomb )
  mergeParallel( "zvtnfet33_m0"       merge parFETcomb )
  mergeParallel( "zvtnfet33x_m0"      merge parFETcomb )

  ; RF FET merge

  mergeParallel( "nfet_rf_m1"         merge multiFETRFcomb )
  mergeParallel( "nfeti_rf_m1"        merge multiFETRFcomb )
  mergeParallel( "nfeti4_rf_m1"       merge multiFETRFcomb )
  mergeParallel( "nfettw_rf_m1"       merge multiFETRFcomb )
  mergeParallel( "pfet_rf_m1"         merge multiFETRFcomb )
  mergeParallel( "pfeti_rf_m1"        merge multiFETRFcomb )
  mergeParallel( "pfeti4_rf_m1"       merge multiFETRFcomb )
  mergeParallel( "nfet_rf_m0"         merge parFETRFcomb )
  mergeParallel( "nfeti_rf_m0"        merge parFETRFcomb )
  mergeParallel( "nfeti4_rf_m0"       merge parFETRFcomb )
  mergeParallel( "nfettw_rf_m0"       merge parFETRFcomb )
  mergeParallel( "pfet_rf_m0"         merge parFETRFcomb )
  mergeParallel( "pfeti_rf_m0"        merge parFETRFcomb )
  mergeParallel( "pfeti4_rf_m0"       merge parFETRFcomb )

  ; HV FET merge

  mergeParallel( "nfet20mh_m1"        merge multiFETHVcomb )
  mergeParallel( "nfet20hs_m1"        merge multiFETHVcomb )
  mergeParallel( "nfet50hs_m1"        merge multiFETHVcomb )
  mergeParallel( "nfeti20h_m1"        merge multiFETHVcomb )
  mergeParallel( "nfeti20t_m1"        merge multiFETHVcomb )
  mergeParallel( "nfeti25m_m1"        merge multiFETHVcomb )
  mergeParallel( "nfeti50h_m1"        merge multiFETHVcomb )
  mergeParallel( "nfeti50m_m1"        merge multiFETHVcomb )
  mergeParallel( "nfeti50t_m1"        merge multiFETHVcomb )
  mergeParallel( "pfet20h_m1"         merge multiFETHVcomb )
  mergeParallel( "pfet20hs_m1"        merge multiFETHVcomb )
  mergeParallel( "pfet20t_m1"         merge multiFETHVcomb )
  mergeParallel( "pfet25m_m1"         merge multiFETHVcomb )
  mergeParallel( "pfet50h_m1"         merge multiFETHVcomb )
  mergeParallel( "pfet50hs_m1"        merge multiFETHVcomb )
  mergeParallel( "pfet50m_m1"         merge multiFETHVcomb )
  mergeParallel( "pfet50t_m1"         merge multiFETHVcomb )

  mergeParallel( "nfet20mh_m0"        merge parFETHVcomb )
  mergeParallel( "nfet20hs_m0"        merge parFETHVcomb )
  mergeParallel( "nfet50hs_m0"        merge parFETHVcomb )
  mergeParallel( "nfeti20h_m0"        merge parFETHVcomb )
  mergeParallel( "nfeti20t_m0"        merge parFETHVcomb )
  mergeParallel( "nfeti25m_m0"        merge parFETHVcomb )
  mergeParallel( "nfeti50h_m0"        merge parFETHVcomb )
  mergeParallel( "nfeti50m_m0"        merge parFETHVcomb )
  mergeParallel( "nfeti50t_m0"        merge parFETHVcomb )
  mergeParallel( "pfet20h_m0"         merge parFETHVcomb )
  mergeParallel( "pfet20hs_m0"        merge parFETHVcomb )
  mergeParallel( "pfet20t_m0"         merge parFETHVcomb )
  mergeParallel( "pfet25m_m0"         merge parFETHVcomb )
  mergeParallel( "pfet50h_m0"         merge parFETHVcomb )
  mergeParallel( "pfet50hs_m0"        merge parFETHVcomb )
  mergeParallel( "pfet50m_m0"         merge parFETHVcomb )
  mergeParallel( "pfet50t_m0"         merge parFETHVcomb )

  ; INDLINE merge

  mergeParallel( "indline_m0"         noMerge )
  mergeParallel( "indlinex_m0"        noMerge )

  ; IND merge

  mergeParallel( "ind_m0"             noMerge )
  mergeParallel( "symind_m0"          noMerge )
  mergeParallel( "symindp_m0"         noMerge )
  mergeParallel( "indp_m0"            noMerge )
  mergeParallel( "inds_m0"            noMerge )

  ; SINGLEWIRE merge

  mergeParallel( "singlewire_m0"      noMerge )

  ; PCDCAP merge

  mergeParallel( "pcdcap_m1"          merge multiPCDCAPcomb )
  mergeParallel( "pcdcapx_m1"         merge multiPCDCAPcomb )
  mergeParallel( "pcdcapm_m1"         merge multiMOSVARcomb ) ; mosvar with OUTLINE DECAP
  mergeParallel( "pcdcapmx_m1"        merge multiMOSVARcomb )
  mergeParallel( "pcdcapt_m1"         merge multiMOSVARcomb ) ; pcell pcdcap
  mergeParallel( "pcdcaptx_m1"        merge multiMOSVARcomb )
  mergeParallel( "pcdcap33_m1"        merge multiPCDCAPcomb )
  mergeParallel( "pcdcap33x_m1"       merge multiPCDCAPcomb )
  mergeParallel( "pcdcap_m0"          noMerge )
  mergeParallel( "pcdcapx_m0"         noMerge )
  mergeParallel( "pcdcapm_m0"         merge parMOSVARcomb )
  mergeParallel( "pcdcapmx_m0"        merge parMOSVARcomb )
  mergeParallel( "pcdcapt_m0"         merge parMOSVARcomb )
  mergeParallel( "pcdcaptx_m0"        merge parMOSVARcomb )
  mergeParallel( "pcdcap33_m0"        noMerge )
  mergeParallel( "pcdcap33x_m0"       noMerge )

  ; SBD merge

  mergeParallel( "sbd_m1"             merge multiSBDcomb )
  mergeParallel( "sbdx_m1"            merge multiSBDcomb )
  mergeParallel( "sbdi_m1"            merge multiSBDcomb )
  mergeParallel( "sbdix_m1"           merge multiSBDcomb )
  mergeParallel( "sbd_m0"             noMerge )
  mergeParallel( "sbdx_m0"            noMerge )
  mergeParallel( "sbdi_m0"            noMerge )
  mergeParallel( "sbdix_m0"           noMerge )

  ; RES2 merge

  mergeParallel( "k1res_m1"           merge multiRES2comb )
  mergeParallel( "k1resx_m1"          merge multiRES2comb )
  mergeParallel( "opndres_m1"         merge multiRES2comb )
  mergeParallel( "opndresx_m1"        merge multiRES2comb )
  mergeParallel( "oppdres_m1"         merge multiRES2comb )
  mergeParallel( "oppdresx_m1"        merge multiRES2comb )
  mergeParallel( "k1res_m0"           merge parRES2comb )
  mergeParallel( "k1resx_m0"          merge parRES2comb )
  mergeParallel( "opndres_m0"         merge parRES2comb )
  mergeParallel( "opndresx_m0"        merge parRES2comb )
  mergeParallel( "oppdres_m0"         merge parRES2comb )
  mergeParallel( "oppdresx_m0"        merge parRES2comb )
  mergeSeries(   "k1res_m0"           merge serRES2comb )
  mergeSeries(   "k1resx_m0"          merge serRES2comb )
  mergeSeries(   "opndres_m0"         merge serRES2comb )
  mergeSeries(   "opndresx_m0"        merge serRES2comb )
  mergeSeries(   "oppdres_m0"         merge serRES2comb )
  mergeSeries(   "oppdresx_m0"        merge serRES2comb )

  ; OP*DIRES merge

  mergeParallel( "opndires_m1"        merge multiRES2comb )
  mergeParallel( "opndiresx_m1"       merge multiRES2comb )
  mergeParallel( "opndres3_m1"        merge multiRES2comb )
  mergeParallel( "oppdires_m1"        merge multiRES2comb )
  mergeParallel( "oppdiresx_m1"       merge multiRES2comb )
  mergeParallel( "oppdres3_m1"        merge multiRES2comb )
  mergeParallel( "opndires_m0"        merge parRES2comb )
  mergeParallel( "opndiresx_m0"       merge parRES2comb )
  mergeParallel( "opndres3_m0"        merge parRES2comb )
  mergeParallel( "oppdires_m0"        merge parRES2comb )
  mergeParallel( "oppdiresx_m0"       merge parRES2comb )
  mergeParallel( "oppdres3_m0"        merge parRES2comb )
  mergeSeries(   "opndires_m0"        merge serRES2comb )
  mergeSeries(   "opndiresx_m0"       merge serRES2comb )
  mergeSeries(   "opndres3_m0"        merge serRES2comb )
  mergeSeries(   "oppdires_m0"        merge serRES2comb )
  mergeSeries(   "oppdiresx_m0"       merge serRES2comb )
  mergeSeries(   "oppdres3_m0"        merge serRES2comb )

  ; DIPDNW & DINDPW  merge

  mergeParallel( "dipdnw_m1"          merge multiDIPDNWcomb )
  mergeParallel( "dipdnwx_m1"         merge multiDIPDNWcomb )
  mergeParallel( "dipdnw_m0"          noMerge )
  mergeParallel( "dipdnwx_m0"         noMerge )
  mergeParallel( "dindpw_m1"          merge multiDIPDNWcomb )
  mergeParallel( "dindpwx_m1"         merge multiDIPDNWcomb )
  mergeParallel( "dindpw_m0"          noMerge )
  mergeParallel( "dindpwx_m0"         noMerge )

  ; DIVPNP merge

  mergeParallel( "divpnp_m1"          merge multiDIPDNWcomb )
  mergeParallel( "divpnpx_m1"         merge multiDIPDNWcomb )
  mergeParallel( "divpnp_m0"          noMerge )
  mergeParallel( "divpnpx_m0"         noMerge )

  ; MOSVAR merge

  mergeParallel( "mosvart_m1"         merge multiMOSVARcomb )
  mergeParallel( "mosvartx_m1"        merge multiMOSVARcomb )
  mergeParallel( "mosvarm_m1"         merge multiMOSVARcomb )
  mergeParallel( "mosvarmx_m1"        merge multiMOSVARcomb )
  mergeParallel( "pcap_m1"            merge multiMOSVARcomb )
  mergeParallel( "pcapi_m1"           merge multiMOSVARcomb )
  mergeParallel( "pcapim_m1"          merge multiMOSVARcomb )
  mergeParallel( "diffmosvar_m1"      merge multiDIFFMOSVARcomb )
  mergeParallel( "diffmosvarx_m1"     merge multiDIFFMOSVARcomb )
  mergeParallel( "mosvart_m0"         noMerge )
  mergeParallel( "mosvartx_m0"        noMerge )
  mergeParallel( "mosvarm_m0"         noMerge )
  mergeParallel( "mosvarmx_m0"        noMerge )
  mergeParallel( "pcap_m0"            noMerge )
  mergeParallel( "pcapi_m0"           merge parMOSVARcomb )
  mergeParallel( "pcapim_m0"          merge parMOSVARcomb )
  mergeParallel( "diffmosvar_m0"      noMerge )
  mergeParallel( "diffmosvarx_m0"     noMerge )

  ; HAVAR merge

  mergeParallel( "havar_m1"           merge multiHAVARcomb )
  mergeParallel( "havarx_m1"          merge multiHAVARcomb )
  mergeParallel( "havar_m0"           noMerge )
  mergeParallel( "havarx_m0"          noMerge )

  ; ESDVPNP merge

  mergeParallel( "esdvpnpnw_m0"       merge parESDVPNPcomb )
  mergeParallel( "esdpnpi_m0"         noMerge )
  mergeParallel( "esdpdidn_m0"        noMerge )

  ; ESDNDSX merge

  mergeParallel( "esdndsx_m0"         merge parESDNDSXcomb )
  mergeParallel( "esdndpi_m0"         noMerge )
  mergeParallel( "esdndidn_m0"        noMerge )

  ; ESDFDI ESDTDI merge

  mergeParallel( "esdfdi25_m0"        merge parESDXDIcomb)
  mergeParallel( "esdfdi50_m0"        merge parESDXDIcomb)
  mergeParallel( "esdtdi20_m0"        merge parESDXDIcomb)
  mergeParallel( "esdtdi25_m0"        merge parESDXDIcomb)

  ; SBLKRES merge

  mergeParallel( "sblkndres_m1"       merge multiSBLKREScomb )
  mergeParallel( "sblkndresx_m1"      merge multiSBLKREScomb )
  mergeParallel( "sblkndires_m1"      merge multiSBLKREScomb )
  mergeParallel( "sblkndiresx_m1"     merge multiSBLKREScomb )
  mergeParallel( "sblkndres3_m1"      merge multiSBLKREScomb )
  mergeParallel( "sblkpdres_m1"       merge multiSBLKREScomb )
  mergeParallel( "sblkpdresx_m1"      merge multiSBLKREScomb )
  mergeParallel( "sblkpdires_m1"      merge multiSBLKREScomb )
  mergeParallel( "sblkpdiresx_m1"     merge multiSBLKREScomb )
  mergeParallel( "sblkpdres3_m1"      merge multiSBLKREScomb )
  mergeParallel( "sblkndres_m0"       noMerge )
  mergeParallel( "sblkndresx_m0"      noMerge )
  mergeParallel( "sblkndires_m0"      noMerge )
  mergeParallel( "sblkndiresx_m0"     noMerge )
  mergeParallel( "sblkndres3_m0"      noMerge )
  mergeParallel( "sblkpdres_m0"       noMerge )
  mergeParallel( "sblkpdresx_m0"      noMerge )
  mergeParallel( "sblkpdires_m0"      noMerge )
  mergeParallel( "sblkpdiresx_m0"     noMerge )
  mergeParallel( "sblkpdres3_m0"      noMerge )

  ; HV RES merge

  mergeParallel( "hvnwres_m1"         merge multiHVREScomb )
  mergeParallel( "hvpwres_m1"         merge multiHVREScomb )
  mergeParallel( "hvnwres_m0"         noMerge )
  mergeParallel( "hvpwres_m0"         noMerge )
  mergeSeries(   "hvnwres_m0"         noMerge )
  mergeSeries(   "hvpwres_m0"         noMerge )
  ;mergeParallel( "hvnwres_m0"         merge parHVREScomb )
  ;mergeParallel( "hvpwres_m0"         merge parHVREScomb )
  ;mergeSeries(   "hvnwres_m0"         merge serHVREScomb )
  ;mergeSeries(   "hvpwres_m0"         merge serHVREScomb )

  ; PJFET merge
  mergeParallel( "pjfet_m0"           merge parPJFETcomb )
  mergeParallel( "pjfet_m1"           merge multiPJFETcomb )

  ; VNPN & VPNP merge

  mergeParallel( "vnpn_m1"            merge multiBIPcomb )
  mergeParallel( "vpnp_m1"            merge multiBIPcomb )
  mergeParallel( "vnpn_m0"            noMerge )
  mergeParallel( "vpnp_m0"            noMerge )


  ; BONDPAD compare

  compareParameter( "bondpad_m0"         BONDPADcomp )
  compareParameter( "bondpadx_m0"        BONDPADcomp )

if( avSwitch( "COMPARE_DIODE_SIZE" ) then
    ; DIODE compare
  compareParameter( "tdndsx"         DIODEcomp )
  compareParameter( "TDNDSX"         DIODEcomp )
  compareParameter( "tdpdnw"         DIODEcomp )
  compareParameter( "TDPDNW"         DIODEcomp ) 
  compareParameter( "wdnwsx"         DIODEcomp )
  compareParameter( "WDNWSX"         DIODEcomp )
  compareParameter( "tdndpw"         DIODEcomp )
  compareParameter( "TDNDPW"         DIODEcomp )
  compareParameter( "wddnsx"         DIODEcomp )
  compareParameter( "WDDNSX"         DIODEcomp )
  compareParameter( "wdpwdn"         DIODEcomp )
  compareParameter( "WDPWDN"         DIODEcomp )

    ; DIODE parallele merge
  mergeParallel( "tdndsx"        merge  DIODEcomb )
  mergeParallel( "TDNDSX"        merge  DIODEcomb )
  mergeParallel( "tdpdnw"        merge  DIODEcomb )
  mergeParallel( "TDPDNW"        merge  DIODEcomb )
  mergeParallel( "wdnwsx"        merge  DIODEcomb )
  mergeParallel( "WDNWSX"        merge  DIODEcomb )
  mergeParallel( "tdndpw"        merge  DIODEcomb )
  mergeParallel( "TDNDPW"        merge  DIODEcomb )
  mergeParallel( "wddnsx"        merge  DIODEcomb )
  mergeParallel( "WDDNSX"        merge  DIODEcomb )
  mergeParallel( "wdpwdn"        merge  DIODEcomb )
  mergeParallel( "WDPWDN"        merge  DIODEcomb )
  ) ; end if switch compare_Diode_Size

  ; OPRES compare

  compareParameter( "opnpcres_m0"        multiOPREScomp )
  compareParameter( "opnpcres_m1"        multiOPREScomp )
  compareParameter( "opnpcresx_m0"       multiOPREScomp )
  compareParameter( "opnpcresx_m1"       multiOPREScomp )
  compareParameter( "opppcres_m0"        multiOPREScomp )
  compareParameter( "opppcres_m1"        multiOPREScomp )
  compareParameter( "opppcresx_m0"       multiOPREScomp )
  compareParameter( "opppcresx_m1"       multiOPREScomp )
  compareParameter( "oprppres_m0"        multiOPREScomp )
  compareParameter( "oprppres_m1"        multiOPREScomp )
  compareParameter( "oprppresx_m0"       multiOPREScomp )
  compareParameter( "oprppresx_m1"       multiOPREScomp )
  compareParameter( "oprrpres_m0"        multiOPREScomp )
  compareParameter( "oprrpres_m1"        multiOPREScomp )
  compareParameter( "oprrpresx_m0"       multiOPREScomp )
  compareParameter( "oprrpresx_m1"       multiOPREScomp )

  ; MIM compare

  compareParameter( "dualcmim_m0"        multiMIMcomp )
  compareParameter( "dualcmim_m1"        multiMIMcomp )
  compareParameter( "dualcmimx_m0"       multiMIMcomp )
  compareParameter( "dualcmimx_m1"       multiMIMcomp )
  compareParameter( "cmim_m0"            multiMIMcomp )
  compareParameter( "cmim_m1"            multiMIMcomp )
  compareParameter( "cmimx_m0"           multiMIMcomp )
  compareParameter( "cmimx_m1"           multiMIMcomp )
  compareParameter( "dualcmimhd_m0"      multiMIMcomp )
  compareParameter( "dualcmimhd_m1"      multiMIMcomp )
  compareParameter( "dualcmimhdx_m0"     multiMIMcomp )
  compareParameter( "dualcmimhdx_m1"     multiMIMcomp )
  compareParameter( "cmimhd_m0"          multiMIMcomp )
  compareParameter( "cmimhd_m1"          multiMIMcomp )
  compareParameter( "cmimhdx_m0"         multiMIMcomp )
  compareParameter( "cmimhdx_m1"         multiMIMcomp )
  compareParameter( "mimhk_m0"           multiMIMHKcomp )
  compareParameter( "mimhk_m1"           multiMIMHKcomp )
  compareParameter( "mimhkx_m0"          multiMIMHKcomp )
  compareParameter( "mimhkx_m1"          multiMIMHKcomp )

  ; VNCAP compare

  compareParameter( "vncap_m0"           parVPPcomp     )
  compareParameter( "vncap_m1"           multiVPPcomp   )
  compareParameter( "vncapx_m0"          parVPPcomp     )
  compareParameter( "vncapx_m1"          multiVPPcomp   )
  compareParameter( "vncap_hv_m0"        parVPPHVcomp   )
  compareParameter( "vncap_hv_m1"        multiVPPHVcomp )
  compareParameter( "vncap_hvx_m0"       parVPPHVcomp     )
  compareParameter( "vncap_hvx_m1"       multiVPPHVcomp   )

  ; CWIRE compare

  compareParameter( "coupledwires_m0"    CWIREcomp )

  ; PJFET compare
  compareParameter( "pjfet_m0"          PJFETcomp )
  compareParameter( "pjfet_m1"          multiPJFETcomp )

  ; FET compare

 if( avSwitch( "COMPARE_NF_VALUES" )  then
	compareParameter( "nfet_m0"            FETNFcomp )
	compareParameter( "nfetx_m0"           FETNFcomp )
	compareParameter( "nfet33x_m0"         FETNFcomp )
	compareParameter( "nfet33_m0"          FETNFcomp )
	compareParameter( "nfetm_m0"           FETNFcomp )
	compareParameter( "nfetmx_m0"          FETNFcomp )
	compareParameter( "nfetmtw_m0"         FETNFcomp )
	compareParameter( "nfetmtwx_m0"        FETNFcomp )
	compareParameter( "nfethvt_m0"         FETNFcomp )
	compareParameter( "nfethvtx_m0"        FETNFcomp )
  	compareParameter( "nfetshvt_m0"        FETNFcomp )
  	compareParameter( "nfetshvtx_m0"       FETNFcomp )
	compareParameter( "nfet33twx_m0"       FETNFcomp )
	compareParameter( "nfettw_m0"          FETNFcomp )
	compareParameter( "nfettwx_m0"         FETNFcomp )
	compareParameter( "pfet_m0"            FETNFcomp )
	compareParameter( "pfetx_m0"           FETNFcomp )
	compareParameter( "pfet33_m0"          FETNFcomp )
	compareParameter( "pfet33x_m0"         FETNFcomp )
	compareParameter( "pfetm_m0"           FETNFcomp )
	compareParameter( "pfetmx_m0"          FETNFcomp )
	compareParameter( "pfethvt_m0"         FETNFcomp )
	compareParameter( "pfethvtx_m0"        FETNFcomp )
  	compareParameter( "pfetshvt_m0"        FETNFcomp )
  	compareParameter( "pfetshvtx_m0"       FETNFcomp )
	compareParameter( "zvtnfet_m0"         FETNFcomp )
	compareParameter( "zvtnfetx_m0"        FETNFcomp )
	compareParameter( "zvtnfet33_m0"       FETNFcomp )
	compareParameter( "zvtnfet33x_m0"      FETNFcomp )

        compareParameter( "nfeti_m0"           FETNFcomp )
        compareParameter( "nfetix_m0"          FETNFcomp )
        compareParameter( "nfeti4_m0"          FETNFcomp )
        compareParameter( "nfetihvt_m0"        FETNFcomp )
        compareParameter( "nfetihvtx_m0"       FETNFcomp )
        compareParameter( "nfetihvt4_m0"       FETNFcomp )
        compareParameter( "nfetim_m0"          FETNFcomp )
        compareParameter( "nfetimx_m0"         FETNFcomp )
        compareParameter( "nfetim4_m0"         FETNFcomp )
        compareParameter( "pfeti_m0"           FETNFcomp )
        compareParameter( "pfetix_m0"          FETNFcomp )
        compareParameter( "pfeti4_m0"          FETNFcomp )
        compareParameter( "pfetihvt_m0"        FETNFcomp )
        compareParameter( "pfetihvtx_m0"       FETNFcomp )
        compareParameter( "pfetihvt4_m0"       FETNFcomp )
        compareParameter( "pfetim_m0"          FETNFcomp )
        compareParameter( "pfetimx_m0"         FETNFcomp )
        compareParameter( "pfetim4_m0"         FETNFcomp )
  else 
   	compareParameter( "nfet_m0"            FETcomp )
	compareParameter( "nfetx_m0"           FETcomp )
	compareParameter( "nfet33x_m0"         FETcomp )
	compareParameter( "nfet33_m0"          FETcomp )
	compareParameter( "nfetm_m0"           FETcomp )
	compareParameter( "nfetmx_m0"          FETcomp )
	compareParameter( "nfetmtw_m0"         FETcomp )
	compareParameter( "nfetmtwx_m0"        FETcomp )
	compareParameter( "nfethvt_m0"         FETcomp )
	compareParameter( "nfethvtx_m0"        FETcomp )
  	compareParameter( "nfetshvt_m0"        FETcomp )
  	compareParameter( "nfetshvtx_m0"       FETcomp )
	compareParameter( "nfet33twx_m0"       FETcomp )
	compareParameter( "nfettw_m0"          FETcomp )
	compareParameter( "nfettwx_m0"         FETcomp )
	compareParameter( "pfet_m0"            FETcomp )
	compareParameter( "pfetx_m0"           FETcomp )
	compareParameter( "pfet33_m0"          FETcomp )
	compareParameter( "pfet33x_m0"         FETcomp )
	compareParameter( "pfetm_m0"           FETcomp )
	compareParameter( "pfetmx_m0"          FETcomp )
	compareParameter( "pfethvt_m0"         FETcomp )
	compareParameter( "pfethvtx_m0"        FETcomp )
  	compareParameter( "pfetshvt_m0"        FETcomp )
  	compareParameter( "pfetshvtx_m0"       FETcomp )
	compareParameter( "zvtnfet_m0"         FETcomp )
	compareParameter( "zvtnfetx_m0"        FETcomp )
	compareParameter( "zvtnfet33_m0"       FETcomp )
	compareParameter( "zvtnfet33x_m0"      FETcomp )

        compareParameter( "nfeti_m0"           FETcomp )
        compareParameter( "nfetix_m0"          FETcomp )
        compareParameter( "nfeti4_m0"          FETcomp )
        compareParameter( "nfetihvt_m0"        FETcomp )
        compareParameter( "nfetihvtx_m0"       FETcomp )
        compareParameter( "nfetihvt4_m0"       FETcomp )
        compareParameter( "nfetim_m0"          FETcomp )
        compareParameter( "nfetimx_m0"         FETcomp )
        compareParameter( "nfetim4_m0"         FETcomp )
        compareParameter( "pfeti_m0"           FETcomp )
        compareParameter( "pfetix_m0"          FETcomp )
        compareParameter( "pfeti4_m0"          FETcomp )
        compareParameter( "pfetihvt_m0"        FETcomp )
        compareParameter( "pfetihvtx_m0"       FETcomp )
        compareParameter( "pfetihvt4_m0"       FETcomp )
        compareParameter( "pfetim_m0"          FETcomp )
        compareParameter( "pfetimx_m0"         FETcomp )
        compareParameter( "pfetim4_m0"         FETcomp )
 ) ; end switch COMPARE_NF_VALUES

  compareParameter( "nfet_m1"            multiFETcomp )
  compareParameter( "nfetx_m1"           multiFETcomp )
  compareParameter( "nfet33_m1"          multiFETcomp )
  compareParameter( "nfet33x_m1"         multiFETcomp )
  compareParameter( "nfetm_m1"           multiFETcomp )
  compareParameter( "nfetmx_m1"          multiFETcomp )
  compareParameter( "nfetmtw_m1"         multiFETcomp )
  compareParameter( "nfetmtwx_m1"        multiFETcomp )
  compareParameter( "nfeti_m1"           multiFETcomp )
  compareParameter( "nfetix_m1"          multiFETcomp )
  compareParameter( "nfeti4_m1"          multiFETcomp )
  compareParameter( "nfetihvt_m1"        multiFETcomp )
  compareParameter( "nfetihvtx_m1"       multiFETcomp )
  compareParameter( "nfetihvt4_m1"       multiFETcomp )
  compareParameter( "nfetim_m1"          multiFETcomp )
  compareParameter( "nfetimx_m1"         multiFETcomp )
  compareParameter( "nfetim4_m1"         multiFETcomp )
  compareParameter( "nfethvt_m1"         multiFETcomp )
  compareParameter( "nfethvtx_m1"        multiFETcomp )
  compareParameter( "nfetshvt_m1"        multiFETcomp )
  compareParameter( "nfetshvtx_m1"       multiFETcomp )
  compareParameter( "nfet33twx_m1"       multiFETcomp )
  compareParameter( "nfettw_m1"          multiFETcomp )
  compareParameter( "nfettwx_m1"         multiFETcomp )
  compareParameter( "pfet_m1"            multiFETcomp )
  compareParameter( "pfetx_m1"           multiFETcomp )
  compareParameter( "pfet33_m1"          multiFETcomp )
  compareParameter( "pfet33x_m1"         multiFETcomp )
  compareParameter( "pfetm_m1"           multiFETcomp )
  compareParameter( "pfetmx_m1"          multiFETcomp )
  compareParameter( "pfeti_m1"           multiFETcomp )
  compareParameter( "pfetix_m1"          multiFETcomp )
  compareParameter( "pfeti4_m1"          multiFETcomp )
  compareParameter( "pfetihvt_m1"        multiFETcomp )
  compareParameter( "pfetihvtx_m1"       multiFETcomp )
  compareParameter( "pfetihvt4_m1"       multiFETcomp )
  compareParameter( "pfetim_m1"          multiFETcomp )
  compareParameter( "pfetimx_m1"         multiFETcomp )
  compareParameter( "pfetim4_m1"         multiFETcomp )
  compareParameter( "pfethvt_m1"         multiFETcomp )
  compareParameter( "pfethvtx_m1"        multiFETcomp )
  compareParameter( "pfetshvt_m1"        multiFETcomp )
  compareParameter( "pfetshvtx_m1"       multiFETcomp )
  compareParameter( "zvtnfet_m1"         multiFETcomp )
  compareParameter( "zvtnfetx_m1"        multiFETcomp )
  compareParameter( "zvtnfet33_m1"       multiFETcomp )
  compareParameter( "zvtnfet33x_m1"      multiFETcomp )

  ; RF FET compare

  compareParameter( "nfet_rf_m0"         FETRFcomp )
  compareParameter( "nfeti4_rf_m0"       FETRFcomp )
  compareParameter( "nfeti_rf_m0"        FETRFcomp )
  compareParameter( "nfettw_rf_m0"       FETRFcomp )
  compareParameter( "pfet_rf_m0"         FETRFcomp )
  compareParameter( "pfeti4_rf_m0"       FETRFcomp )
  compareParameter( "pfeti_rf_m0"        FETRFcomp )
  compareParameter( "nfet_rf_m1"         multiFETRFcomp )
  compareParameter( "nfeti4_rf_m1"       multiFETRFcomp )
  compareParameter( "nfeti_rf_m1"        multiFETRFcomp )
  compareParameter( "nfettw_rf_m1"       multiFETRFcomp )
  compareParameter( "pfet_rf_m1"         multiFETRFcomp )
  compareParameter( "pfeti4_rf_m1"       multiFETRFcomp )
  compareParameter( "pfeti_rf_m1"        multiFETRFcomp )

 ; HV FET compare

  compareParameter( "nfet20mh_m0"        FETHVcomp )
  compareParameter( "nfet20hs_m0"        FETHVcomp )
  compareParameter( "nfet50hs_m0"        FETHVcomp )
  compareParameter( "nfeti20h_m0"        FETHVcomp )
  compareParameter( "nfeti20t_m0"        FETHVcomp )
  compareParameter( "nfeti25m_m0"        FETHVcomp )
  compareParameter( "nfeti50h_m0"        FETHVcomp )
  compareParameter( "nfeti50m_m0"        FETHVcomp )
  compareParameter( "nfeti50t_m0"        FETHVcomp )
  compareParameter( "pfet20h_m0"         FETHVcomp )
  compareParameter( "pfet20hs_m0"        FETHVcomp )
  compareParameter( "pfet20t_m0"         FETHVcomp )
  compareParameter( "pfet25m_m0"         FETHVcomp )
  compareParameter( "pfet50h_m0"         FETHVcomp )
  compareParameter( "pfet50hs_m0"        FETHVcomp )
  compareParameter( "pfet50m_m0"         FETHVcomp )
  compareParameter( "pfet50t_m0"         FETHVcomp )
  compareParameter( "nfet20mh_m1"        multiFETHVcomp )
  compareParameter( "nfet20hs_m1"        multiFETHVcomp )
  compareParameter( "nfet50hs_m1"        multiFETHVcomp )
  compareParameter( "nfeti20h_m1"        multiFETHVcomp )
  compareParameter( "nfeti20t_m1"        multiFETHVcomp )
  compareParameter( "nfeti25m_m1"        multiFETHVcomp )
  compareParameter( "nfeti50h_m1"        multiFETHVcomp )
  compareParameter( "nfeti50m_m1"        multiFETHVcomp )
  compareParameter( "nfeti50t_m1"        multiFETHVcomp )
  compareParameter( "pfet20h_m1"         multiFETHVcomp )
  compareParameter( "pfet20hs_m1"        multiFETHVcomp )
  compareParameter( "pfet20t_m1"         multiFETHVcomp )
  compareParameter( "pfet25m_m1"         multiFETHVcomp )
  compareParameter( "pfet50h_m1"         multiFETHVcomp )
  compareParameter( "pfet50hs_m1"        multiFETHVcomp )
  compareParameter( "pfet50m_m1"         multiFETHVcomp )
  compareParameter( "pfet50t_m1"         multiFETHVcomp )

  ; INDLINE compare

  compareParameter( "indline_m0"         INDLINEcomp )
  compareParameter( "indlinex_m0"        INDLINEcomp )

  ; IND compare

  compareParameter( "ind_m0"             INDcomp )
  compareParameter( "symind_m0"          SYMINDcomp )
  compareParameter( "symindp_m0"         SYMINDcomp )
  compareParameter( "indp_m0"            INDcomp )
  compareParameter( "inds_m0"            INDcomp )

  ; SINGLEWIRE compare

  compareParameter( "singlewire_m0"      SINGLEWIREcomp )

  ; PCDCAP compare

  compareParameter( "pcdcap_m0"          multiPCDCAPcomp )
  compareParameter( "pcdcapx_m0"         multiPCDCAPcomp )
  compareParameter( "pcdcapm_m0"         multiMOSVARcomp ) ; mosvar with OUTLINE DECAP 
  compareParameter( "pcdcapmx_m0"        multiMOSVARcomp )
  compareParameter( "pcdcapt_m0"         multiMOSVARcomp ) ; pcell pcdcap
  compareParameter( "pcdcaptx_m0"        multiMOSVARcomp )
  compareParameter( "pcdcap33_m0"        multiPCDCAPcomp )
  compareParameter( "pcdcap33x_m0"       multiPCDCAPcomp )
  compareParameter( "pcdcap_m1"          multiPCDCAPcomp )
  compareParameter( "pcdcapx_m1"         multiPCDCAPcomp )
  compareParameter( "pcdcapm_m1"         multiMOSVARcomp ) ; mosvar with OUTLINE DECAP
  compareParameter( "pcdcapmx_m1"        multiMOSVARcomp )
  compareParameter( "pcdcapt_m1"         multiMOSVARcomp ) ; pcell pcdcap
  compareParameter( "pcdcaptx_m1"        multiMOSVARcomp )
  compareParameter( "pcdcap33_m1"        multiPCDCAPcomp )
  compareParameter( "pcdcap33x_m1"       multiPCDCAPcomp )

  ; SBD compare

  compareParameter( "sbd_m0"             SBDcomp )
  compareParameter( "sbdx_m0"            SBDcomp )
  compareParameter( "sbdi_m0"            SBDcomp )
  compareParameter( "sbdix_m0"           SBDcomp )
  compareParameter( "sbd_m1"             multiSBDcomp )
  compareParameter( "sbdx_m1"            multiSBDcomp )
  compareParameter( "sbdi_m1"            multiSBDcomp )
  compareParameter( "sbdix_m1"           multiSBDcomp )

  ; RES2 compare

  compareParameter( "k1res_m0"           multiRES2comp )
  compareParameter( "k1resx_m0"          multiRES2comp )
  compareParameter( "opndres_m0"         multiRES2comp )
  compareParameter( "opndresx_m0"        multiRES2comp )
  compareParameter( "oppdres_m0"         multiRES2comp )
  compareParameter( "oppdresx_m0"        multiRES2comp )
  compareParameter( "k1res_m1"           multiRES2comp )
  compareParameter( "k1resx_m1"          multiRES2comp )
  compareParameter( "opndres_m1"         multiRES2comp )
  compareParameter( "opndresx_m1"        multiRES2comp )
  compareParameter( "oppdres_m1"         multiRES2comp )
  compareParameter( "oppdresx_m1"        multiRES2comp )

  ; OP*DIRES compare

  compareParameter( "opndires_m0"        multiRES2comp )
  compareParameter( "opndiresx_m0"       multiRES2comp )
  compareParameter( "opndres3_m0"        multiRES2comp )
  compareParameter( "oppdires_m0"        multiRES2comp )
  compareParameter( "oppdiresx_m0"       multiRES2comp )
  compareParameter( "oppdres3_m0"        multiRES2comp )
  compareParameter( "opndires_m1"        multiRES2comp )
  compareParameter( "opndiresx_m1"       multiRES2comp )
  compareParameter( "opndres3_m1"        multiRES2comp )
  compareParameter( "oppdires_m1"        multiRES2comp )
  compareParameter( "oppdiresx_m1"       multiRES2comp )
  compareParameter( "oppdres3_m1"        multiRES2comp )

  ; MOSVAR compare

  compareParameter( "mosvart_m0"         multiMOSVARcomp )
  compareParameter( "mosvartx_m0"        multiMOSVARcomp )
  compareParameter( "mosvarm_m0"         multiMOSVARcomp )
  compareParameter( "mosvarmx_m0"        multiMOSVARcomp )
  compareParameter( "pcap_m0"            multiMOSVARcomp )
  compareParameter( "pcapi_m0"           multiMOSVARcomp )
  compareParameter( "pcapim_m0"          multiMOSVARcomp )
  compareParameter( "mosvart_m1"         multiMOSVARcomp )
  compareParameter( "mosvartx_m1"        multiMOSVARcomp )
  compareParameter( "mosvarm_m1"         multiMOSVARcomp )
  compareParameter( "mosvarmx_m1"        multiMOSVARcomp )
  compareParameter( "pcap_m1"            multiMOSVARcomp )
  compareParameter( "pcapi_m1"           multiMOSVARcomp )
  compareParameter( "pcapim_m1"          multiMOSVARcomp )

  compareParameter( "diffmosvar_m0"      multiDIFFMOSVARcomp )
  compareParameter( "diffmosvarx_m0"     multiDIFFMOSVARcomp )
  compareParameter( "diffmosvar_m1"      multiDIFFMOSVARcomp )
  compareParameter( "diffmosvarx_m1"     multiDIFFMOSVARcomp )

  ; DIPDNW & DINDPW compare

  compareParameter( "dipdnw_m0"          DIPDNWcomp )
  compareParameter( "dipdnwx_m0"         DIPDNWcomp )
  compareParameter( "dipdnw_m1"          DIPDNWcomp )
  compareParameter( "dipdnwx_m1"         DIPDNWcomp )
  compareParameter( "dindpw_m0"          DIPDNWcomp )
  compareParameter( "dindpwx_m0"         DIPDNWcomp )
  compareParameter( "dindpw_m1"          DIPDNWcomp )
  compareParameter( "dindpwx_m1"         DIPDNWcomp )

  ; DIVPNP compare

  compareParameter( "divpnp_m0"          DIPDNWcomp )
  compareParameter( "divpnpx_m0"         DIPDNWcomp )
  compareParameter( "divpnp_m1"          DIPDNWcomp )
  compareParameter( "divpnpx_m1"         DIPDNWcomp )

  ; HAVAR compare

  compareParameter( "havar_m0"           HAVARcomp )
  compareParameter( "havarx_m0"          HAVARcomp )
  compareParameter( "havar_m1"           multiHAVARcomp )
  compareParameter( "havarx_m1"          multiHAVARcomp )

  ; ESDVPNP compare

  compareParameter( "esdvpnpnw_m0"       ESDVPNPcomp )
  compareParameter( "esdpnpi_m0"         ESDVPNPcomp )
  compareParameter( "esdpdidn_m0"        ESDVPNPcomp )

  ; ESDNDSX compare

  compareParameter( "esdndsx_m0"         ESDNDSXcomp )
  compareParameter( "esdndpi_m0"         ESDNDSXcomp )
  compareParameter( "esdndidn_m0"        ESDNDSXcomp )

  ; ESDFDI ESDTDI compare

  compareParameter( "esdfdi25_m0"        ESDXDIcomp )
  compareParameter( "esdfdi50_m0"        ESDXDIcomp )
  compareParameter( "esdtdi20_m0"        ESDXDIcomp )
  compareParameter( "esdtdi25_m0"        ESDXDIcomp )
  ;compareParameter( "esdtdi50_m0"        ESDXDIcomp )

  ; SBLKRES compare

  compareParameter( "sblkndres_m0"       multiSBLKREScomp )
  compareParameter( "sblkndresx_m0"      multiSBLKREScomp )
  compareParameter( "sblkndires_m0"      multiSBLKREScomp )
  compareParameter( "sblkndiresx_m0"     multiSBLKREScomp )
  compareParameter( "sblkndres3_m0"      multiSBLKREScomp )
  compareParameter( "sblkpdres_m0"       multiSBLKREScomp )
  compareParameter( "sblkpdresx_m0"      multiSBLKREScomp )
  compareParameter( "sblkpdires_m0"      multiSBLKREScomp )
  compareParameter( "sblkpdiresx_m0"     multiSBLKREScomp )
  compareParameter( "sblkpdres3_m0"      multiSBLKREScomp )
  compareParameter( "sblkndres_m1"       multiSBLKREScomp )
  compareParameter( "sblkndresx_m1"      multiSBLKREScomp )
  compareParameter( "sblkndires_m1"      multiSBLKREScomp )
  compareParameter( "sblkndiresx_m1"     multiSBLKREScomp )
  compareParameter( "sblkndres3_m1"      multiSBLKREScomp )
  compareParameter( "sblkpdres_m1"       multiSBLKREScomp )
  compareParameter( "sblkpdresx_m1"      multiSBLKREScomp )
  compareParameter( "sblkpdires_m1"      multiSBLKREScomp )
  compareParameter( "sblkpdiresx_m1"     multiSBLKREScomp )
  compareParameter( "sblkpdres3_m1"      multiSBLKREScomp )

  ; HV RES compare

  compareParameter( "hvnwres_m0"         multiHVREScomp )
  compareParameter( "hvpwres_m0"         multiHVREScomp )
  compareParameter( "hvnwres_m1"         multiHVREScomp )
  compareParameter( "hvpwres_m1"         multiHVREScomp )

  ; VNPN & VPNP compare

  compareParameter( "vnpn_m0"            multiBIPcomp )
  compareParameter( "vpnp_m0"            multiBIPcomp )
  compareParameter( "vnpn_m1"            multiBIPcomp )
  compareParameter( "vpnp_m1"            multiBIPcomp )

)


;----------------------------------------------------------------------------
; avCompareRules Section from Options Form
; Created by the Assura UI
;----------------------------------------------------------------------------

avCompareRules(
     abortOnUnboundDevices( nil )
     alwaysContinue()
     autoPinSwap( t 1000 )
     expandOnError( (unstableDevices t) (swap t) (reduce t) (pins t) (match t) (swapThres t) (instCount t) (skipMatchOnReduceError t) (ambiguousPinAssignment nil) (parameter nil) )
     filterReduceStatistics( (preExpand t) )
     formGate( MOS none )
     listFilteredDevices()
     listXRef()
     mergeSplitGate( MOS sameOrder )
     mergeSplitGate( LDD sameOrder )
     unmatchedNetDetail()
     verifyTopLayPins( (t notKeepFloatingPins) )
     verifyTopSchPins( (t notKeepFloatingPins) )
)




;----------------------------------------------------------------------------
; avCompareRules Section from Run Submit Form
; Created by the Assura UI
;----------------------------------------------------------------------------

avCompareRules(
schematic(
netlist( dfII "/home/saul/projects/LAYOUT_TUT/ASSURA_LVS/curr_mirror_dummy/myrun.vlr" )
)
bindingFile("/pkg/AMS411/assura/h18a6/h18a6/bind.vldb")
)


avLVS()

